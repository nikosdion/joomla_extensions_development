<?xml version="1.0" encoding="UTF-8"?>
<book version="5.1" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xila="http://www.w3.org/2001/XInclude/local-attributes"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:trans="http://docbook.org/ns/transclusion"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Joomla Extensions Development</title>

    <subtitle>The missing <trademark>Joomla</trademark> reference for
    extension developers</subtitle>

    <author>
      <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>

      <personblurb>
        <para>Nicholas is a software developer, mostly known for his work in
        Akeeba Backup and Admin Tools. He's been writing Joomla extensions
        since 2006 — and software in general for another decade, since his
        middle school years. He is a regular contributor to the Joomla
        project. When he's not writing code he enjoys writing documentation to
        spread the knowledge and the Joomla love. He lives in Greece with his
        wife, daughter and their two cats.</para>
      </personblurb>
    </author>

    <pubdate>October 2022</pubdate>

    <copyright>
      <year>2022</year>

      <holder>Nikolaos Dionysopoulos</holder>
    </copyright>

    <abstract>
      <para>Developing Joomla extensions is fun and fulfilling. However, its
      API evolves to better suit the changing times and PHP best practices.
      When Joomla 4 came out with its richer, brand new API there was no
      documentation to tell developers how to update and keep developing their
      extensions. Moreover, over a decade of API stagnation and lack of
      documentation led developers to complacency, bad code, and
      unmaintainable code. This book aims to distill my experience writing
      Joomla software since 2006 and includes some useful background on how
      some features were decided, how they are meant to be used, and where
      they fit in the larger picture of writing efficient, maintainable code.
      This is neither a tutorial nor a reference book. It's more of a
      practical guide through the Joomla extensions development API.</para>
    </abstract>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.3 or any later version published by the Free Software Foundation; with
      no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
      copy of the license is included in the section entitled "<link
      linkend="fdl-license">GNU Free Documentation License</link>".</para>

      <para>—</para>

      <para>This work is not affiliated with or endorsed by the Joomla!
      Project. It is not supported or warranted by the Joomla! Project or Open
      Source Matters. The Joomla! logo is used under a limited license granted
      by Open Source Matters, the trademark holder in the United States and
      other countries.</para>

      <para>—</para>

      <para>All code found in the code samples in this book is free software;
      you can redistribute it and/or modify it under the terms of the GNU
      General Public License as published by the Free Software Foundation;
      either version 2 of the License, or (at your option) any later
      version.</para>

      <para>This sample program code is distributed in the hope that it will
      be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
      of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the <link
      linkend="gpl">GNU General Public License</link> for more details.</para>

      <para>You should have received a copy of the GNU General Public License
      along with this sample program code; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
      USA</para>
    </legalnotice>
  </info>

  <preface xml:id="intro">
    <title>Introduction</title>

    <section xml:id="intro-about">
      <title>About this book</title>

      <para>I started writing this book in August 2022 as a quick reference
      for myself and other third party developers writing Joomla 4 extensions,
      or migrating our extensions to Joomla 4's native MVC.</para>

      <para>While Joomla 4 has an amazing, rich and powerful architecture and
      API it does not have any real developer-facing documentation. The
      documentation you will find is outdated, chaotic and leaves you running
      for your life.</para>

      <para>I am making every effort to make this book approachable to all
      levels of developers, from the novice who's barely hacked together their
      first plugin to the seasoned expert with dozens of extensions under
      their belt. However, to keep things relatively simple and because I am
      doing this unpaid, on my limited free time, I decided to take a few
      shortcuts here and there. I do not explain every concept in great
      detail, I try to explain it in practical detail.</para>

      <para>If you want to see what a real world Joomla extension looks like I
      urge you to take a look at and dissect the Joomla 4 extensions my
      company, Akeeba Ltd, has published free of charge. The simplest
      component to start with is Akeeba ContactUs. The most complete
      combination of a component, plugins and several modules we have
      published is Akeeba Ticket System — even the free of charge version uses
      most of the features I am describing in this book.</para>

      <para>Hopefully, you will find my approach pragmatic and result-driven
      instead of a dry, technical document. If you have suggestions for
      improvement or would like to sponsor this work feel free to contact me
      through the Contact Me page on <link
      xlink:href="https://www.dionysopoulos.me">dionysopoulos.me</link>.</para>
    </section>

    <section xml:id="about-me">
      <title>About the author</title>

      <para><mediaobject>
          <imageobject>
            <imagedata fileref="https://www.gravatar.com/avatar/d8bb182ef0e061a3c4959a2d659e4252.jpg?s=256"/>
          </imageobject>
        </mediaobject>Hi, I am Nicholas. I am a Mechanical Engineer turned
      Software Engineer. I am from and still live in Greece with my wife,
      daughter and our two naughty cats.</para>

      <para>I've been into computers since I was 11 years olds, at the dawn of
      the 1990s. Back then dinosaurs were still walking among us, haircuts
      were <emphasis>weird</emphasis>, personal computers were the size of a
      small backpack and had <emphasis>far less</emphasis> computing power
      than your average smart lightbulb. Only one of the previous statements
      is false. I immediately took to programming for, as I said to my parents
      at the time, “I want to learn how to make this machine do things for me
      so I don't have to do them”. LIttle did I know what I was getting myself
      into…</para>

      <para>I've been using Joomla as a site integrator and extensions
      developer since it was called Mambo, back in 2004. I wrote my first
      mass-distributed extension called JoomlaPack in October 2006 while
      taking a two week break from my day job at the time as a business
      consultant. One thing led to another, JoomlaPack became Akeeba Backup
      and I gave up on business consultancy and mechanical engineering to
      become a full time software engineer.</para>

      <para>I've been actively participating in the Joomla community since
      2009. I am a regular Joomla contributor and not just writing code. I've
      been involved in community outreach efforts and instigated the events
      leading to the beginning of the Joomla 4 effort. I still contribute to
      Joomla and, if I want to be honest with myself, I will continue doing
      that until Joomla or myself is no more, whichever comes first.</para>

      <para>I am neurodivergent (ADHD) and have a particular sense of humour.
      I firmly believe that life's too short to take it seriously. You'll see
      that a lot in this book. I don't care about writing a dry, boring book,
      especially on a subject as dry and boring as writing software.</para>
    </section>

    <section xml:id="intro-j4-features">
      <title>New Joomla 4 features at a glance</title>

      <para>Joomla 4 is a smorgasbord of new features, improvements and much
      needed changes. Unfortunately, a year into its release you'd be hard
      pressed to find any kind of documentation of what these are and how they
      can impact your software development practices. I will try to give you
      the 30,000-feet overview of what <emphasis>I</emphasis> found to be the
      most important changes.</para>

      <para><link linkend="concepts-namespaces"><emphasis
      role="bold">Namespaces</emphasis></link>. As you may remember, ever
      since Joomla 3.3 the legacy class names (e.g. <code>JUri</code>) changed
      to a namespaced equivalent (e.g. <code>Joomla\CMS\Uri\Uri</code>). In
      Joomla 4 a lot of the legacy classes stopped working. You can find out
      these changes neatly codified along with tools to mass convert your
      extensions in my <link
      xlink:href="http://github.com/nikosdion/joomlatypehints">Joomla Type
      Hints</link> repository. In Joomla 4 the namespacing work went even
      deeper, having all classes in components, modules, plugins and templates
      also support namespaces — if you use the new, Joomla 4 API for
      developing extensions. This is a game-changer concept! Namespaced
      classes follow the <link
      xlink:href="https://www.php-fig.org/psr/psr-4/">PSR-4</link>
      specification. Joomla caches and registers the PSR-4 mappings between
      namespace prefixes and directories on your site which means that
      <emphasis>you can safely use any class of any extension anywhere without
      having to use <code>include</code> or <code>require</code> ever
      again</emphasis>. This greatly reduces the possibility for bugs and
      massively improves the performance of Joomla and its extensions.</para>

      <para><emphasis role="bold"><link
      linkend="concepts-container">Dependency Injection Container / Service
      Locator</link></emphasis>. Joomla 1.x to 3.x inclusive had this annoying
      <link xlink:href="https://en.wikipedia.org/wiki/God_object">God
      Object</link> called the Joomla Factory (<code>JFactory</code> or
      <code>\Joomla\CMS\Factory</code>). It had a very opinionated approach on
      instantiating all sorts of globally used services, from the application
      itself, to the database, to the user objects, to the mailer object. If
      you wanted to write Unit Tests for your extension — or Joomla itself —
      it was the bane of your existence. In Joomla 4 we instead have a
      Container. It is not a real <link
      xlink:href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency
      Injection Container</link> as much as it is a <link
      xlink:href="https://en.wikipedia.org/wiki/Service_locator_pattern">Service
      Locator</link>, meaning that it won't magically instantiate an object
      based on the type definitions in its class' constructor but it will let
      you retrieve the services you need to inject to your objects. Each
      extension — component, module, plugin and template — gets its own
      service locator and its own extension object which uses it. This makes
      it far easier to write unit tests for your code, especially your Models
      (which is where most of your business logic, therefore your code that
      needs testing, should already be).</para>

      <para><link linkend="concepts-webassetmanager"><emphasis role="bold">Web
      Asset Manager</emphasis></link>. In the past, whenever we wanted to load
      a JavaScript or CSS file we'd have to load its dependencies and finally
      our file. For example we might want to load jQuery, then load some
      Bootstrap core JavaScript files, then our JavaScript file. Each
      extension would do that and it lead to several chicken and egg problems.
      What if file A from extension X depends on files B and C and file B from
      extension Y depends on files C and D but D must be loaded before C?
      Bummer. The Web Asset Manager codifies the dependencies in a way which
      lets Joomla resolve them. It also lets you define alternative
      dependencies,e.g. a different JavaScript file to load depending on
      whether the user's browser supports <link
      xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript
      modules</link> or not, and asset groups, e.g. a collection of CSS and
      JavaScript which are meant to be loaded together. This lets you split
      your CSS and JavaScript into smaller files which load in the correct
      order and improve the performance of your user's site.</para>

      <para><emphasis role="bold"><link linkend="com-j3-vs-j4-mvc">A new
      MVC</link></emphasis>. The MVC in Joomla 1.5 to 3.10 inclusive had
      changed very little. Previous attempts to modernise it failed
      ignominiously because they simultaneously failed to go far enough and
      maintain <acronym>b/c</acronym> (backwards compatibility). Joomla 4 has
      a new MVC model which is based on Dependency Injection and namespaces,
      it is more prescriptive, more flexible and more powerful than its
      predecessors. You can very easily extend a frontend model from a backend
      model instead of writing the same code twice or doing a contortionist
      act with PHP Traits. You can easily create custom HTML helpers without
      calling static functions, use categories without writing precarious
      database code, create object-oriented URL routers and much more which we
      will explore in this book.</para>

      <para><emphasis role="bold">Hide-able inline help</emphasis>. Remember
      how Joomla 3 XML Forms looked like a word vomit with all the inline help
      text (field descriptions) being always visible? This was a bad interface
      for experienced users. At the same time, Joomla 4.0 removing all inline
      help text made the interface inapproachable for newcomers and end
      clients meant to use the site. With Joomla 4.1 it is now possible to
      have hide-able inline help text in your forms and your component
      configuration. The field descriptions are hidden by default and the user
      can show them by clicking on the <guibutton>Show Inline Help</guibutton>
      button in the interface. Now your extensions' interface can be
      simultaneously approachable for both new and experienced users.</para>

      <para><emphasis role="bold">Prepared statements</emphasis>. SQL
      injection vulnerabilities have been almost <emphasis>de
      rigueur</emphasis> for any web software, Joomla extensions being no
      exception to that. Sure, Joomla does have some very nifty tools to get
      filtered input and escape it when placed inside database queries but not
      all input can be escaped sufficiently if you do not know its
      <emphasis>type</emphasis> (integer, string, array of one or the other).
      Moreover, despite best intentions, accidents can and do happen, e.g.
      forgetting to escape one piece of input you assumed it's an integer but
      it came through a path which never did check the input type nor did it
      try to typecast it to an integer! Joomla 4 introduced <link
      xlink:href="https://en.wikipedia.org/wiki/Prepared_statement">prepared
      statements</link> which make these oversights and corner cases a thing
      of the past. You tell the query builder where you expect potentially
      user-originating data in your query, which data to use in there and what
      type this data is. You are guaranteed safe execution without worrying
      about SQL injection <emphasis>unless you try really hard</emphasis> to
      NOT let Joomla use a prepared statement. On the flip side, there are a
      few types of SQL queries which cannot execute in the context of prepared
      statements and required some code contortion to execute.</para>

      <para><link linkend="com-mailtemplates"><emphasis role="bold">Mail
      templates</emphasis></link>. In the past there were two ways to handle
      email for your extension. You could send plain text only email using
      language strings OR you would have to invent your own email template
      management. The former led to ugly email messages. The latter required
      reinventing a very complex device on each and every of your components.
      If you did not have a component, tough luck. Darn! Joomla 4's mail
      templates feature allows your users to use the Joomla WYSIWYG editor to
      create rich email templates with placeholders to be replaced by data
      provided by your extension. This feature looks half-finished in Joomla 4
      as it has no obvious way to register or update email templates. Don't
      worry, though, we do have a way to work around its shortcomings,
      complete with example code.</para>

      <para><link linkend="com-scheduled-tasks"><emphasis
      role="bold">Scheduled Tasks</emphasis></link>. Many extensions need to
      periodically execute some kind of code. For example, sending email
      newsletters, updating the prices of thousands of SKUs in an online shop
      from an Excel or XML file, running backups, you name it! In the past we
      had to reinvent the wheel on each extension we built. For example, we
      created ‘special’ URLs in our components or through com_ajax to be
      accessed with wget, cURL or a service like WebCRON.org periodically; or
      we created CLI scripts to be used with CRON jobs. We almost always
      offered more than one way to do things which led to a certain degree of
      code duplication. In all cases, the user was responsible for setting up
      CRON jobs or the equivalent on a third party service for every single
      task they needed to be executed periodically. This was a tall ask!
      Joomla 4.1 and later offers a new Scheduled Tasks feature which allows
      users to select which tasks they want to be executed, when to execute
      them and even configure their execution parameters — all within the
      familiar Joomla user interface. It even lets the task scheduler to be
      executed three ways: with a command line CRON job, a URL-based CRON job
      or automatically based on visitor traffic (lazy scheduling). The end
      user has to set up just the one CRON job or, if they are using lazy
      scheduling, just flip a switch.</para>

      <para><link linkend="com-cli"><emphasis role="bold">CLI
      Application</emphasis></link>. In the past we had to create bespoke CLI
      scripts for every task each of our extensions needed to allow to be
      executed from a command line context, be it a CRON job or a manually
      executed CLI helper tool. This required creating a new application and
      contend with the two facts that a) the base class changed at least twice
      in the last ten years and b) it lacked a lot of methods several core and
      third party classes were expecting to be present. This led to a lot of
      reinventing the wheel. The Joomla CLI Application is like a built-in
      version of WordPress' WP-CLI or Drupal's Drush in that it's based on the
      Symfony Console Components and can be easily extended using plugins
      which register command classes. Used wisely, it can enhance your
      extensions and help your advanced users who can use the CLI to automate
      things around their site.</para>

      <para><link linkend="com-api"><emphasis role="bold">API
      Application</emphasis></link>. Joomla has historically been an HTML-only
      application. Yes, sure, you can have JSON, XML, Feed and Raw views but
      they feel bolted onto the HTML application; they are not a real API to
      your component. Joomla 4 introduced a brand-new application, the
      ApiApplication which lives in the <filename>api</filename> directory of
      your site. For now it's only accessible to Super Users but it provides a
      real RESTful JSON-based API to components which integrate with it.
      Integrating your component with the API application is as easy as
      creating a Web Services plugin and adding a few easy to create
      controllers and views in the API part of your component. That is to say,
      your component now has a backend, a frontend and an API side. You don't
      <emphasis>have</emphasis> to integrate with the API application but if
      you have something which could benefit from automation it is strongly
      encouraged to do so.</para>

      <para><emphasis role="bold">Dashboards</emphasis>. Between Joomla 1.0
      and 3.10 inclusive Joomla only ever offered one dashboard, the main
      Control Panel page which loaded when you logged into your site's
      backend. In Joomla 1.0 to 1.6 it was hard-coded and inflexible. I added
      the ability to use plugins to render custom action buttons in Joomla
      1.7, based on my experience with my software. Starting with Joomla 3.0
      you could now publish <emphasis>modules</emphasis> to add information
      panes to the Control Panel dashboard. If you wanted the same experience
      in your extension… tough luck. You would have to reinvent the wheel.
      Joomla 4.0 and later allow you to set up <emphasis>one or more dashboard
      pages for your own component</emphasis> which appear in the Joomla menu
      structure, under your component's menu item, and where you and your end
      users can publish any number of modules.</para>

      <para><emphasis role="bold">Layouts everywhere</emphasis>. A lot of the
      HTML generated by Joomla, even throughout version 3, was statically
      coded in the PHP files implementing the business logic, making any kind
      of customisation impossible (or, at the very least, requiring a very
      judicious application of in-memory code editing, buffer stream wrappers
      and Reflection). Let's just say that if you disagreed with how a certain
      form field or HTML helper rendered its HTML you were out of luck.
      Layouts were introduced in Joomla 3.4 and later versions did make better
      use of them in various places but you still had to contend with several
      of the same issues. Not anymore! Joomla 4 uses layouts for every kind of
      HTML output. If you want to override how some core code renders in your
      component or your template you can easily do that by overriding the
      layout. Likewise, you are encouraged to use Layouts everywhere you have
      reusable HTML output in your extensions to make it easier for end users
      to override them in their template.</para>

      <para><emphasis role="bold">Media options per component</emphasis>.
      Joomla 3.4 introduced an upload checker for all uploaded files based on
      the work I had done in Admin Tools. This was a massive leap in security
      as we codified the basic upload checks and encapsulated them in a way
      that made them run automatically whenever you were handling uploads.
      However, this was controlled by the Media component's
      (<code>com_media</code>) settings. This was great if your extension only
      ever needed static media files to be uploaded. If you wanted to allow
      your users to upload non-media files, or files otherwise not acceptable
      anywhere else <code>com_media</code> was exposed, such as ZIP, 7Z, and
      RAR files in a helpdesk component, you had to modify the Media options,
      allowing these files <emphasis>everywhere</emphasis>. The unfortunate
      solution to that was that third party component developers chose to
      <emphasis>disable</emphasis> the upload checks, undoing the security
      improvements we added in Joomla 3.4. This is no longer the case! Joomla
      4 allows each component to have its own, private copy of Media settings
      for its own uploads. Any upload being handled by your component (not
      <code>com_media</code>!) will have these private settings applied. It's
      a bit of a chore BUT it lets you provide a much safer option for
      uploading files through your extension.</para>

      <para>There are many more improvements which I will not cover in this
      book. If you found out something cool and you'd like me to write a
      section for it, please do let me know. I can't promise it will
      definitely make it into the book but I will at least promise to give it
      a good thought and most likely a good try.</para>
    </section>
  </preface>

  <chapter xml:id="concepts">
    <title>Basic concepts</title>

    <para>As mentioned in the <link
    linkend="intro-j4-features">introduction</link>, Joomla 4 introduced a lot
    of new features. Some of these features introduce new fundamental concepts
    or refine existing ones. Before delving deeper into Joomla extension
    development let's take a look at these basic concepts to make sure we are
    all on the same page.</para>

    <section xml:id="concepts-namespaces">
      <title>Namespaces</title>

      <para>The single most defining change in Joomla 4 is that Joomla
      embraces <link
      xlink:href="https://www.php.net/manual/en/language.namespaces.php">PHP
      namespaces</link> everywhere: core, core extensions, third party
      extensions and everything in between.</para>

      <bridgehead>The core</bridgehead>

      <para>The work on namespacing core Joomla API classes had started since
      Joomla 3.3. If you have not updated your code the last few years you may
      have found that it no longer works on Joomla 4. Do not despair! The vast
      majority of issues comes from your using outdated, non-namespaced
      versions of core classes in your code. Replacing them with their
      namespaced versions will let most Joomla 3–only extensions to run well
      enough in Joomla 4 for a migration to be practical.</para>

      <para>I have collected the old, non-namespaced core classes and the new,
      namespaced names of them along with the Joomla version the namespaced
      versions appeared and the Joomla version the non-namespaced versions are
      or will be removed in <link
      xlink:href="https://github.com/nikosdion/joomlatypehints/blob/main/JoomlaObsoleteClasses.md">my
      Joomla Type Hints</link> repository. The repository also includes <link
      xlink:href="https://getrector.org">Rector</link> configurations which
      allow you to do most of the heavy lifting using an automated tool. For
      everything else you need some good old search and replace across your
      source trees.</para>

      <bridgehead>The extensions</bridgehead>

      <para>The story of Joomla 4 began on the last day of May 2015 in Prague,
      Czech Republic at a round table discussion about the future of Joomla. A
      dozen or so leadership members, core contributors and third party
      developers sat down to figure out why Joomla “sucks” and how to improve
      it.</para>

      <para>Beyond the user-facing issues, we found out that the core MVC and
      architecture were extremely dated. The core MVC started being developed
      in 2005 and made its first appearance in 2007, with Joomla 1.5. It had
      not changed much, despite some moderate improvements in Joomla 1.6 which
      was released in 2010 (e.g. XML Forms) and a few disparate things added
      here and there (e.g. Tags in 3.2, Layouts in 3.4 and so on). You could
      not reference frontend code from the backend or vice-versa. For third
      party extensions this was an annoyance which led to duplicated code and
      bugs. For using core code, like creating articles <emphasis>the right
      way</emphasis> using <code>com_content</code>'s Article model, it was
      nearly impossible: if you tried doing that on a page which had already
      loaded the front-end ContentModelArticle class you could no longer load
      the same-named but entirely differently operating backend class.</para>

      <para>The way to solve that would be to <emphasis>namespace</emphasis>
      the extensions' code. A com_example extension could have the namespace
      prefix \MyCompany\Example\Administrator for its backend classes and
      \MyCompany\Example\Site for its frontend classes. This way you could
      have something like:</para>

      <programlisting language="php">namespace \MyCompany\Example\Site\Model;

class ItemModel extends \MyCompany\Example\Administrator\Model\ItemModel
{
   // ...
}</programlisting>

      <para>By being able to extend classes across application sides you would
      finally be able to get rid of duplicate code and obliterate bugs coming
      from that bad practice.</para>

      <para>By following the <link
      xlink:href="https://www.php-fig.org/psr/psr-4/">PSR-4</link> standard we
      could also have a very efficient autoloader which allows us to load any
      extension's classes from anywhere, without having to know where on the
      filesystem the class file lives and without having to use the ugly
      static methods of the core MVC classes (which, by the way, would NOT
      work predictably across extensions because of their dependence on the
      <code>JPATH_COMPONENT_ADMINISTRATOR</code> and
      <code>JPATH_COMPONENT</code> constants which cannot, of course, be
      redefined).</para>

      <para>Each extension's namespace is declared in the XML manifest of the
      extension using a new XML element under the
      <code>&lt;extension&gt;</code> root element:</para>

      <programlisting language="xml">&lt;namespace path="src"&gt;My\Namespace\Prefix&lt;/namespace&gt;</programlisting>

      <para>The <code>path</code> attribute tells Joomla which subdirectory of
      your extension holds the PSR-4 of your extension's PHP files. It is best
      practice to name it <filename>src</filename> but <emphasis>you don't
      have to</emphasis>. In the rest of this section I assume you are using
      <filename>src</filename>.</para>

      <para>The text inside the XML element, <code>My\Namespace\Prefix</code>
      in our example, is the namespace prefix you will be using.</para>

      <para>Here is how namespace prefixes work across different types of
      extensions:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Component, frontend</emphasis>. Each
          component can register its own namespace prefix without any
          restrictions. It is <emphasis>recommended</emphasis> to use the
          convention <code>\Company\Something</code> where
          <code>Company</code> is your company name (or a shortened version
          thereof) and <code>Something</code> corresponds to the
          <code>com_something</code> extension name of your component. For
          example, the component <code>com_example</code> by Acme, Inc could
          have a namespace prefix of <code>\Acme\Example</code> set up in its
          XML manifest. In this case its frontend classes MUST be under the
          namespace <code>\Acme\Example\Site</code>. The folder
          <filename>components/com_example/src</filename> is the root of the
          <code>\Acme\Example\Site</code> namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Component, backend</emphasis>. Let's say
          we have the component <code>com_example</code> by Acme, Inc which
          has a namespace prefix of <code>\Acme\Example</code>. In this case
          its backend classes MUST be under the namespace
          <code>\Acme\Example\Administrator</code>. The folder
          <filename>administrator/components/com_example/src</filename> is the
          root of the <code>\Acme\Example\Administrator</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Component, API application</emphasis>.
          The API application is the third Joomla application (the other two
          being Site the frontend, and Administrator the backend). We'll talk
          about it <link linkend="com-api">later in this book</link>. Let's
          say we have the component <code>com_example</code> by Acme, Inc
          which has a namespace prefix of <code>\Acme\Example</code>. In this
          case its API application classes MUST be under the namespace
          <code>\Acme\Example\Api</code>. The folder
          <filename>api/components/com_example/src</filename> is the root of
          the <code>\Acme\Example\Api</code> namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Module, frontend</emphasis>. A frontend
          module mod_example MUST have its classes under the namespace
          <code>Joomla\Module\Example\Site</code>. The namespace you MUST
          declare in the XML manifest is <code>Joomla\Module\Example</code>.
          Even though you are severely restricted in the namespace prefix you
          can use, you MUST provide it in your XML manifest or your module
          won't work! The folder <filename>modules/mod_example/src</filename>
          is the root of the <code>Joomla\Module\Example\Site</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Module, backend</emphasis>. A backend
          module mod_example MUST have its classes under the namespace
          <code>Joomla\Module\Example\Administrator</code>. The namespace you
          MUST declare in the XML manifest is
          <code>Joomla\Module\Example</code>. Even though you are severely
          restricted in the namespace prefix you can use, you MUST provide it
          in your XML manifest or your module won't work! The folder
          <filename>administrator/modules/mod_example/src</filename> is the
          root of the <code>Joomla\Module\Example\Administrator</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Plugin</emphasis>. The plugin
          <code>plg_system_example</code> MUST have its classes under the
          namespace <code>Joomla\Plugin\System\Example</code>. The namespace
          you MUST declare in the XML manifest is
          <code>Joomla\Plugin\System\Example</code>. Even though you are
          severely restricted in the namespace prefix you can use, you MUST
          provide it in your XML manifest or your plugin won't work! The
          folder <filename>plugins/system/example/src</filename> is the root
          of the <code>Joomla\Plugin\System\Example</code> namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Template</emphasis>. Well, Joomla does
          NOT register a namespace for templates. You are encouraged to use
          namespaces for any template-specific code (you certainly have some
          helpers, don't you?) BUT Joomla won't facilitate you with any
          autoloading. You will have to register your template's namespace
          directly with the <code>JLoader::registerPrefix</code> method. It is
          a good practice putting your namespaced PHP files in the
          <filename>src</filename> directory and use the namespace
          <code>\Joomla\Template\Site\Something</code> for frontend templates
          and <code>\Joomla\Template\Administrator\Something</code> for
          backend templates. Please note that there is no real guidance for
          the template names BUT we can infer what any future change adding
          namespace support to templates will most likely be based on how
          modules are namespaced and Joomla trying to have a modicum of
          consistency.</para>
        </listitem>
      </itemizedlist>

      <bridgehead>How to choose a namespace for your extension</bridgehead>

      <para>Namespaces have for two primary reasons of existence:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Uniqueness</emphasis>. Each of the
          extensions installed on the same site in different directories must
          have a unique namespace prefix which is not a subset or a superset
          of the namespace prefix of another extension and does not clash (be
          identical to) the namespace prefix of another extension.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Identifiability</emphasis>. Namespaces
          of Joomla extensions should make it fairly obvious which extension
          they belong to when read by people with little to no PHP coding
          experience.</para>
        </listitem>
      </itemizedlist>

      <para>Let's see some <emphasis>bad</emphasis> examples first.</para>

      <para>A component with the namespace prefix
      <classname>Acme\Example</classname> and a plugin with the prefix
      <classname>Acme\Example\System</classname>. This violates both reasons
      for having a namespace. The namespace prefixes are not unique (the
      plugin's prefix is a subset of the component's prefix) and it's hard to
      understand which extension they refer to.</para>

      <para>A component released by Yoyodyne Corporation with the namespace
      prefix <classname>Acme\Component\Example</classname>. This violates the
      second rule as a casual bystander would assume that the component was
      written by a company called Acme, not Yoyodyne.</para>

      <para>A system plugin called foobar with the namespace
      <classname>Joomla\Plugin\System\Foo</classname>. Again, it violates both
      reasons as it's neither unique (<code>plg_system_foo</code> could use
      the same namespace!) and does not help people identify the plugin in
      question.</para>

      <para>Based on the bad examples it's easy to understand what a
      <emphasis>good</emphasis> namespace is.</para>

      <para>A good namespace is generally constructed as follows:</para>

      <itemizedlist>
        <listitem>
          <para>The company name, as commonly referred to in marketing and
          documentation. For example Joomla (the project name commonly used),
          not OpenSourceMattersInc (the full name of the non-profit legal
          entity which owns the Joomla trademark).</para>
        </listitem>

        <listitem>
          <para>(optional, but encouraged) The type of the extension the
          namespace refers to, e.g. Component, Plugin, or Module.</para>
        </listitem>

        <listitem>
          <para>(for plugins) The plugin type i.e. the folder it's installed
          into, e.g. System, Content, and so on.</para>
        </listitem>

        <listitem>
          <para>The name of the extension, either as installed (e.g. ARS for
          com_ars) or as commonly referred to in the extensions manager (e.g.
          ReleaseSystem for com_ars).</para>
        </listitem>
      </itemizedlist>

      <para>Thus, a namespace like Akeeba\Component\ReleaseSystem gives us a
      pretty good idea that it's an extension written by a company called
      Akeeba, it's a component and it's name is something with Release System
      in it. Hm, it must be Akeeba Release System!</para>

      <para>It is a very good idea that parts of your namespace when searched
      in the extensions manager end up listing your extension. This will help
      a user faced with an exception error page to figure out which extension
      the exception comes from, even though they have no idea about PHP or
      what an exception is.</para>

      <bridgehead>If you get Class Not Found while developing
      extensions</bridgehead>

      <para>Joomla automatically creates a map of installed extensions, their
      location and their namespace prefixes as noted in their XML manifests.
      It uses this information to register a PSR-4 autoloader which handles
      loading the various classes based on their name, without having to
      manually include their files yourself.</para>

      <para>The information is cached in the file
      <filename>administrator/cache/autoload_psr4.php</filename> which is
      automatically generated on every page load if it's missing. It is also
      forcibly regenerated when you install, update, remove, publish, or
      unpublish an extension from your site.</para>

      <para>It is possible that while developing your site you will end up
      with that file becoming out of sync with the XML manifests on your
      filesystem — for example, if you changed the namespace of an extension
      you are developing or if you moved files around. If that happens to you,
      simply delete the
      <filename>administrator/cache/autoload_psr4.php</filename> file and
      reload the frontend home page of your site. The file will be
      regenerated.</para>

      <para>If something is missing from that file or if you keep getting
      problems despite that file appearing to be correct, ask yourself these
      questions:</para>

      <itemizedlist>
        <listitem>
          <para>Am I using the correct class name? Writing this book I've
          typed <classname>Acme\Examlpe</classname> instead of
          <classname>Acme\Example</classname> more times than I care to admit.
          Always start with the assumption that you typed the class name
          wrong.</para>
        </listitem>

        <listitem>
          <para>Are my folders and files the correct letter case? Attention
          macOS and Windows users! While on macOS and Windows the folders
          <filename>FooBar</filename>, <filename>FOOBAR</filename> and
          <filename>foobar</filename> will all work this is not true on Linux!
          Also remember that if you commit a folder / file in the wrong case
          on Git you can't just rename it and commit it; it will not work when
          checking out the file. Instead rename the folder / file to its
          correct case with a <filename>-bak</filename> suffix, commit, remove
          the suffix, commit again.</para>
        </listitem>

        <listitem>
          <para>Is the extension installed? You'd be surprised at how wrapped
          up you can get writing the code of the extension without remembering
          to actually install it on your development site. I do that every
          second plugin I write. At least I know that I'm both the detective
          and the killer in this code murder mystery, having gone through it
          so often.</para>
        </listitem>

        <listitem>
          <para>Is the extension published? When you install a plugin it is
          disabled by default. Disabled extensions don't get
          autoloaded.</para>
        </listitem>

        <listitem>
          <para>Am I using OPcache? If you're using OPcache —or any other PHP
          cache— your server might “remember” the older version of the
          <filename>autoload_psr4.php</filename> file. If unsure, restart the
          web server <emphasis>and</emphasis> the PHP-FPM service.</para>
        </listitem>

        <listitem>
          <para>Have I cleared Joomla's cache? If you toggled the publish
          status of an extension in the database Joomla might not be aware
          that you did so (especially salient for plugins and modules). Clear
          Joomla's cache, administrator and site.</para>
        </listitem>

        <listitem>
          <para>Am I using another cache, CDN or reverse proxy between my
          browser and the server? Don't do that during development!</para>
        </listitem>

        <listitem>
          <para>Does the XML manifest exist in the location Joomla expects it
          <emphasis>and</emphasis> up-to-date? Components' XML manifests must
          exist in the component's backend root (e.g.
          <filename>administrator/components/com_example/example.xml</filename>).
          Plugins and modules expect the XML manifest in their respective
          folder. Make sure the manifest file you have there actually has the
          <tag>&lt;namespace&gt;</tag> tag, the namespace is spelled correctly
          and it has a <parameter>path</parameter> attribute which is also
          spelled correctly, both itself and the folder name which is your
          PSR-4 root.</para>
        </listitem>

        <listitem>
          <para>Is it possible that my namespace violates the two rules
          described above, especially the one about it not being a subset of
          another extension's namespace? If your namespace is a subset of
          another extension (e.g. my namespace is
          <classname>Acme\Example\Foo</classname> and there's another
          extension with the namespace <classname>Acme\Example</classname>)
          the PSR-4 autoloader will end up looking into the <emphasis>wrong
          folder</emphasis> for your files.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="concepts-container">
      <title>Dependency Injection Container / Service Locator</title>

      <para>Joomla had historically been quite a mess, architecturally
      speaking. Its saving grace was that it was a far smaller mess than
      WordPress and much more approachable to non-expert coders than Drupal.
      This let it carve a niche for itself: people who wanted a very powerful
      site without having to first acquire a PhD in Computer Science and/or
      have a team of dozens of developers under them. In short, Joomla's
      bad-but-not-too-bad architecture let it be used by small web design
      firms, freelance site integrators and small but serious software
      development firms.</para>

      <para>That said, Joomla 1.x to 3.x inclusive had a <link
      xlink:href="https://en.wikipedia.org/wiki/God_object">God Object</link>
      called the Joomla Factory (<code>JFactory</code> or
      <code>\Joomla\CMS\Factory</code>) with a very opinionated approach on
      instantiating all sorts of globally used services, from the application
      itself, to the database, to the user objects, to the mailer
      object.</para>

      <para>While this is a better approach to using global variables (like
      WordPress' infamous <code>$wpdb</code> for accessing the database), this
      architecture caused a lot of pain when you wanted to write Unit Tests
      for your code. Your code gets user instances? You need to create a mock
      for the entire Factory object returning mock user objects. Your code
      uses the database? You need to create a mock database object and inject
      it to an uninitialised Factory instance using static class variables.
      Your code sends email? Not only you need a mock mailer object, you need
      to mock the Factory too. Want to write tests which mock different things
      in different tests? You can either forget about running your tests as a
      suite OR you need to create an extremely over-reaching and hard to
      configure mock Factory. Your tests must run in a different order? Good
      luck figuring out the bugs in your Factory mock object and why running
      tests in one order works but fails when run in a different order, or on
      their lonesome. Been there, done that, still paying for therapy…</para>

      <para>In Joomla 4 we no longer have a God Object. Well, to be fair, the
      Factory is still there but it is no longer a God Object; it is an
      interface to a <link
      xlink:href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency
      Injection Container</link> (<acronym>DIC</acronym> for short, pronounced
      like Dee Eye See, not the nickname for a Richard, thank you very much).
      So, Factory is still a God Object but with lesser powers. A minor deity
      object, perhaps? In any case, the Container is initialised before
      Factory is used and it can also be replaced. Therefore you only need to
      get a copy of the DIC and replace one or more of its services with a
      mock object when writing Unit Tests. Much easier, much more robust, no
      more therapy necessary after writing Unit Tests.</para>

      <para>The Container is now the preferred way to get access to several
      services previously available only through the Factory (they are still
      available through the Factory in Joomla 4 but will very likely disappear
      in Joomla 5). Let's see a few practical examples:</para>

      <programlisting language="php">use \Joomla\CMS\Factory;

// Instead of Factory::getDbo();
$db = Factory::getContainer()-&gt;get('DatabaseDriver');

// Instead of Factory::getLanguage(); WARNING! STILL DOES NOT WORK EXACTLY AS INTENDED!
$language = Factory::getContainer()-&gt;get(LanguageFactoryInterface::class)-&gt;createLanguage(
  Factory::getApplication()-&gt;get('language'),
  Factory::getApplication()-&gt;get('debug_lang'),
);

// Instead of Factory::getUser($id)
$user = Factory::getContainer()-&gt;get(UserFactoryInterface::class)-&gt;loadUserById($id);

// Instead of Factory::getUser() with no arguments; note that this does NOT go through the DIC!
$currentUser = Factory::getApplication()-&gt;getIdentity();</programlisting>

      <para>That said, Joomla's DIC is not a real DIC; it is in fact a <link
      xlink:href="https://en.wikipedia.org/wiki/Service_locator_pattern">Service
      Locator</link>. That is to say, you don't ask the DIC to construct an
      object and expect it to inject the appropriate dependencies based on the
      class type hints of the constructor's arguments. In theory it can (kind
      of), but in practice this is NOT how the Joomla core API classes are
      written. If you came here expecting a DIC like what you find in Laravel,
      sorry, I have to disappoint you.</para>

      <para>Now, you are thinking, does this not make the DIC kinda useless?
      No, not really. You see, being a Service Locator you get a
      <emphasis>copy</emphasis> of it when your extension is initialised. In
      fact, each native Joomla 4 extension needs to have a Service Provider
      which takes the DIC copy as input and registers services to it. At the
      very least you will be registering your extension service which is used
      by Joomla to instantiate your extension's object and run its code. You
      can also register any number of services you might need, even custom
      ones only to be used by your extension.</para>

      <para>At some point in the future Joomla will MAYBE remove the Factory,
      if not altogether then at least insofar it can only return the main
      application's DIC. In such a future Joomla will VERY PROBABLY make it
      much easier for an extension's internal classes to have access to its
      own DIC / Service Locator instead of only ever making it available to
      the Extension class. In this potential future Joomla extensions will be
      self-contained and perfectly testable. Even better, they can be sure
      that whatever happens in an extension stays in the extension, without
      leaking to the global application scope (and poison other
      extensions).</para>
    </section>

    <section xml:id="concepts-webassetmanager">
      <title>Web Asset Management</title>

      <para>A large part of our work as Joomla extension developers is to load
      static assets, CSS and JavaScript files, in the user-facing HTML output
      of our extensions.</para>

      <para>In older Joomla versions we did that through the HTML document and
      using HTMLHelper static methods to load dependencies. For
      example:</para>

      <programlisting language="php">$doc = \Joomla\CMS\Factory::getApplication()-&gt;getDocument();
Joomla\CMS\HTML\HTMLHelper::_('bootstrap.tooltip', '.hasTooltip');
Joomla\CMS\HTML\HTMLHelper::_('script', 'com_example/something.js', [
    'version'       =&gt; 'auto',
    'relative'      =&gt; true,
    'detectDebug'   =&gt; false,
    'framework'     =&gt; false,
    'pathOnly'      =&gt; false,
    'detectBrowser' =&gt; false,
], [
    'defer' =&gt; true,
    'async' =&gt; false,
]);
</programlisting>

      <para>This has a few shortcomings, as we have all discovered to our
      despair.</para>

      <para>First of all, we need to remember to load all dependencies in the
      correct order before our own CSS or JavaScript file. In the above
      example, the something.js file depends on Bootstrap's Tooltip helper. If
      we forget the first call to HTMLHelper our JavaScript file will be
      broken.</para>

      <para>However, our extension is not the only thing running on the page,
      right? Now, see the second parameter in that first HTMLHelper call? It
      tells Joomla's Bootstrap HTML helper to initialise the Tooltip helper so
      that anything with the class hasTooltip will have a Bootstrap tooltip.
      Since this is a component we are confident that this will always be the
      case. Oh, really? If a plugin ran before us and it also loaded its own
      JavaScript which also depends on Bootstrap's tooltip BUT had no second
      argument (or a different second argument) do you care to guess what our
      code above will do? If you guessed “sod all” you'd be right and a Joomla
      extensions development veteran! So, yup, a third party extension having
      a JavaScript file with the same dependency as ours running before us
      breaks our perfectly working JavaScript. This could even happen within
      the same extension if the aforementioned code appeared in a layout and
      your page just happens to load two layout which both call
      <code>Joomla\CMS\HTML\HTMLHelper::_('bootstrap.tooltip')</code> with a
      different second parameter. Great!</para>

      <para>Beyond that, what happens if our something.js gains another
      dependency and we are loading this file in six different places… but
      missed updating one of them? Why, yes, that sixth page will be broken!
      Even worse, we might only update our code with the additional dependency
      in one place (let's say a layout), another four places not updated work
      because they are loading that changed layout and the sixth and final
      place does not work because it was neither updated nor trying to load
      something else which loads the dependency for us.</para>

      <para>Let's put it this way. If you do manual dependency management you
      will be in a world of pain, sooner rather than later.</para>

      <para>Joomla 4 addresses this problem by introducing the Web Asset
      Manager (WAM). The WAM is responsible for loading our CSS and JavaScript
      files <emphasis>and their dependencies</emphasis>. It can figure out
      simple dependency chains even across multiple extensions and make sure
      that things are loaded in an order that makes sense and will do what we
      wanted it to do.</para>

      <para>For that to work we need two things:</para>

      <orderedlist>
        <listitem>
          <para>Using Joomla's media directory the way it was intended ever
          since its introduction in Joomla 1.5.0, back in 2007.</para>
        </listitem>

        <listitem>
          <para>A <filename>joomla.assets.json</filename> file which describes
          our static assets and their dependencies.</para>
        </listitem>
      </orderedlist>

      <para>On the first point please let me remind you how the media folder
      works. If you have any static assets which must be web accessible they
      <emphasis role="bold">MUST</emphasis> be placed in a subdirectory of the
      <filename>media</filename> folder named after your extension (as Joomla
      names it internally). Don't put them in your extension's directory,
      don't put them in <filename>cache</filename> or <filename>tmp</filename>
      (they are NOT web accessible, they CAN be moved around even outside the
      web root AND their contents can and will be removed anytime).</para>

      <para>You have a component named <code>com_foobar</code>? Put your
      static assets in <filename>media/com_foobar</filename>. You have a
      module named <code>mod_example</code>? Put your static assets in
      <filename>media/mod_example</filename>. You have a plugin named
      <code>example</code> in the <filename>folder</filename> system? Put your
      static assets in <filename>media/plg_system_example</filename>. You have
      a template named <code>beauty</code>? Put your static assets in
      <filename>media/tpl_beauty</filename>. Its subdirectories are
      <filename>css</filename> for CSS files and <filename>js</filename> for
      JavaScript files. It's simple, it's efficient, it's how Joomla is meant
      to work.</para>

      <para>The second point, the <filename>joomla.assets.json</filename>
      file, tells Joomla where to find what, what depends on what else and how
      it all fits together. This file is placed in the extension's media
      subdirectory.</para>

      <para>For example, a component <code>com_example</code> could have a
      <filename>media/com_example/joomla.asset.json</filename> file which
      looks like this:</para>

      <programlisting language="json">{
  "$schema": "https://developer.joomla.org/schemas/json-schema/web_assets.json",
  "name": "com_example",
  "version": "1.0.0",
  "description": "This file contains details of the assets used by the Example component by Acme, Inc.",
  "license": "GPL-2.0-or-later",
  "assets": [
    {
      "name": "com_example.backend",
      "description": "Backend styling.",
      "type": "style",
      "uri": "backend.min.css",
      "dependencies": [
        "com_example.typography"
      ]
    },
    {
      "name": "com_example.typography",
      "description": "Fancy typography.",
      "type": "style",
      "uri": "typography.min.css",
      "dependencies": [
        "fontawesome"
      ]
    },
    {
      "name": "com_example.backend.items",
      "description": "JavaScript for the backend Items page.",
      "type": "script",
      "uri": "backend_items.js",
      "attributes" : {
        "defer": true
      },
      "dependencies": [
        "core"
      ]
    },
    {
      "name": "com_example.backend.items",
      "type": "preset",
      "dependencies": [
        "com_example.backend#style",
        "com_example.backend.items#script"
      ]
    }
  ]
}
</programlisting>

      <para>We declare various named assets. The
      <code>com_example.backend</code> style asset loads the
      <filename>backend.min.css</filename> file. However, that file depends on
      the <code>com_example.typography</code> asset which loads the
      <filename>typography.min.css</filename> file. In its turn, this asset
      depends on the core <code>fontawesome</code> asset which loads the
      FontAwesome icon font in any way Joomla figures out is
      appropriate.</para>

      <para>When we tell Joomla to load the <code>com_example.backend</code>
      style asset it will first load the CSS files for FontAwesome (if our
      backend template has not already loaded it), then our
      <filename>typography.min.css</filename> file and finally our
      <filename>backend.min.css</filename> file. This all happens
      automatically. All we have to do in our extension's template layout code
      is</para>

      <programlisting language="php">$this-&gt;document-&gt;getWebAssetManager()-&gt;useStyle('com_example.backend');</programlisting>

      <para>If at a later point we decide that the backend style needs to
      depends on yet another CSS asset we will add it to its dependencies
      array in the <filename>joomla.asset.json</filename> file <emphasis>and
      we are done</emphasis>. We do not have to touch our view templates. We
      do not have to think about anything else. Joomla will figure it out. No
      more hard to track down bugs!</para>

      <para>You may have noticed that we also declared a script asset called
      <code>com_example.backend.items</code> which loads the file
      <filename>backend_items.js</filename> deferred. Deferred means that we
      tell the browser to load it after it has finished initialising the DOM.
      This means that we do not need to add any special code to execute
      something after the DOM is initialised which saves us a lot of
      frustration and bugs. We use the script resource like this:</para>

      <programlisting language="php">$this-&gt;document-&gt;getWebAssetManager()-&gt;useScript('com_example.backend.items');</programlisting>

      <para>We have told Joomla that our script only depends on
      <code>core</code>, i.e. the Joomla core JavaScript. This is not
      mandatory, but something you will see plenty of times because you'll be
      using <code>Joomla.getOptions</code> in your JavaScript code to retrieve
      settings <link linkend="com-data-to-frontend">passed from the backend to
      the frontend</link>. This is the recommended method instead of setting
      arbitrary JavaScript variables in inline JavaScript code. In fact, using
      inline JavaScript code is discouraged (but not forbidden) in Joomla 4
      and later.</para>

      <para>If at a later point we modify our JavaScript to also depend on
      Bootstrap's Modal dialog helper we will just update its
      dependencies:</para>

      <programlisting language="json">    {
      "name": "com_example.backend.items",
      "description": "JavaScript for the backend Items page.",
      "type": "script",
      "uri": "backend_items.js",
      "attributes" : {
        "defer": true
      },
      "dependencies": [
        "core",
        "bootstrap.modal"
      ]
    }</programlisting>

      <para>That's it! No more hunting down usages of this JavaScript file and
      updating our view template code.</para>

      <para>You can of course tell Joomla to load both CSS and JavaScript
      assets. The simplest way is being descriptive in our view
      template:</para>

      <programlisting language="php">$this-&gt;document-&gt;getWebAssetManager()
  -&gt;useStyle('com_example.backend')
  -&gt;useScript('com_example.backend.items');</programlisting>

      <para>(note that useStyle and useScript return the WAM object which
      means they can be chain-called)</para>

      <para>However, this runs the same risk as loading assets the
      old-fashioned way. What happens if we decide that the Items page needs
      some extra CSS which does not apply to the rest of our component's
      backend? We'd have to edit the template layout file. Enter bugs.</para>

      <para>Instead of being descriptive we can be
      <emphasis>prescriptive</emphasis> using another WAM feature called
      <emphasis role="bold">presets</emphasis>. A preset consists entirely of
      dependencies. We declared it in our JSON file like this:</para>

      <programlisting language="json">    {
      "name": "com_example.backend.items",
      "type": "preset",
      "dependencies": [
        "com_example.backend#style",
        "com_example.backend.items#script"
      ]
    }
</programlisting>

      <para>and we can load it in our view template very easily like
      this:</para>

      <programlisting language="php">$this-&gt;document-&gt;getWebAssetManager()-&gt;usePreset('com_example.backend.items');</programlisting>

      <para>Note that the preset asset's key is the same as our script asset's
      key. Script, style and preset assets are separate collections which
      means we <emphasis>can</emphasis> reuse the same key across them. Joomla
      will not be confused. We tell it which collection to look into by using
      a different WAM method: <code>useScript</code>, <code>useStyle</code> or
      <code>usePreset</code>.</para>

      <para>Now let's see why presets are the bee's knees. Let's say we
      decided that Items also needs some special styling in a separate CSS
      file called <filename>items.min.css</filename>. We will just add this
      asset to our JSON file and update the preset:</para>

      <programlisting language="json">    {
      "name": "com_example.backend.items",
      "description": "Backend styling just for the Items page.",
      "type": "style",
      "uri": "items.min.css",
      "dependencies": [
        "com_example.backend"
      ]
    },
    {
      "name": "com_example.backend.items",
      "type": "preset",
      "dependencies": [
        "com_example.backend#style",
        "com_example.backend.items#style",
        "com_example.backend.items#script"
      ]
    }
</programlisting>

      <para>(You may notice that our <code>com_example.backend.items</code>
      asset depends on <code>com_example.backend</code>. I didn't have to do
      that, but I like to be explicit about dependencies to avoid any stupid
      bugs if I remove any intermediate dependencies in a dependency
      chain.)</para>

      <para>We do NOT have to touch our view template file. Since we are
      telling it to load a preset, changing the preset is enough for Joomla to
      figure out what it needs to do.</para>

      <para>Using the Web Asset Manager correctly can be a massive asset (no
      pun intended!) in your extensions' public frontend. Your view templates
      can load your prescriptive presets. If you decide you want to change
      something you can change the preset. Your clients who have created
      template overrides will NOT need to update their overrides. This means
      far fewer “bug” reports and more time for you to work on your
      code.</para>

      <para>The Web Asset Manager has changed the way I write extensions and
      has solved a lot of my headaches. You can use the WAM on any component
      running on Joomla 4, regardless of whether you are using the “old”
      (Joomla 3) MVC or the “new” (Joomla 4) MVC. In fact, since it is a part
      of the Joomla document object, you can use it in modules, even plugins —
      however, if you are using it in a plugin you MUST tell the WAM to load
      your JSON file since Joomla will not do that by default for
      plugins.</para>

      <para>Finally, the WAM is a much less error-prone method to injecting
      static assets to Joomla. All Joomla document classes have a WAM, even
      when they are not HTML; it just follows that if it's a non-HTML document
      adding an asset through WAM does nothing. Compare that with what happens
      if you try to use the HTMLHelper or the addScript / addStyle document
      methods when your document is not HTML. Yup, these old ways of adding
      static assets cause Joomla to error out. Again, WAM is safe, the methods
      of yesteryear are not. One more reason to migrate your extensions to WAM
      today.</para>
    </section>
  </chapter>

  <chapter xml:id="com">
    <title>Components</title>

    <para>The Joomla component is arguably the most important extension type.
    It's not just the sheer fact that it is an application inside an
    application, letting us create custom experiences otherwise nearly
    impossible with just core code, it is also that Joomla embraces the need
    for this kind of custom experiences and has heavily invested in making
    component development relatively easy. This is in stark contrast with
    WordPress where your experience is far and foremost defined by its core
    code, custom experiences outside custom content types are actively
    discouraged and there is no sensible API for creating an equivalent
    extension type without a lot of reinventing the wheel, bending over
    backwards and judicious application of the Dark Arts.</para>

    <section xml:id="com-mvc">
      <title>The Joomla MVC: an introduction</title>

      <para>Joomla came with a strong legacy of modular architecture in
      version 1.0, when it was a little more than a fork of and improvement
      upon Mambo 4, its predecessor. Joomla 1.5 introduced extension
      developers to the concept of <link
      xlink:href="https://en.wikipedia.org/wiki/Model–view–controller">MVC</link>
      (Model-View-Controller) where each component has defined and logical
      structure, separating business logic from presentation. Joomla 4
      improves upon this legacy, by further polishing the MVC and embracing
      concepts introduced to the PHP developer's arsenal over the last decade
      and a half.</para>

      <para>Before delving into improvements and changes in Joomla 4 I think a
      little Joomla MVC refresher is in order. This is especially useful if
      you are used to the MVC definition from a college Computer Science class
      or have used real MVC in other programming languages or even PHP
      frameworks (e.g. in Laravel the typical Model is Eloquent which works
      completely differently, the View is your Blade files and the Controller
      is more of a collection of middleware rather than a single class — it's
      still MVC but a different dialect in the same way Spanish, Italian and
      French are all Romance languages).</para>

      <para>Joomla follows the MVC model typically called “skinny controller -
      fat model”. This puts most of the business logic into the Model and
      keeps the Controller a relatively nimble affair. Further to that, Joomla
      also uses another class called a Table to abstract our interaction with
      the persistence layer objects (that's a fancy, pretentious way of saying
      “database table”). So, it's really an MVCT approach.</para>

      <para>But what are these Controllers, Models and Views anyway?</para>

      <para>The Controller consists of one or more <emphasis>tasks</emphasis>
      implemented as public methods. Each one of them tells the controller to
      <emphasis>do</emphasis> something. For example display an article,
      publish or unpublish an article, delete an article, log in the user,
      check the Multi-factor Authentication provided by the user, create a
      user data deletion request and so on and so forth. Controllers are
      orchestrators; they know what work needs to be done but they do not do
      it themselves. The Controller handles requests: it reads the user input
      and decides what needs to happen next which is invariably one of two
      things. For simple tasks with no output like publishing an article,
      deleting an article, logging in a user etc it will get the Model, tell
      it what to do and then issue a redirection to a different page, possibly
      setting a (very short!) message to show to the user. Most of the time it
      will need to create a document, e.g. an HTML page, a JSON document, an
      RSS feed etc. In this case it will get the appropriate View, push the
      Model to it and ask it to render itself. It then takes the rendered
      document and echoes it; Joomla will intercept that and decide what to do
      with the document effectively returned by the Controller. If an error
      occurred the Controller will catch it and decide what to do with it:
      swallow it or push it up the stack so that it ends up becoming an error
      page for the user.</para>

      <para><emphasis>Note that unlike the normative Controller of the MVC
      pattern the Joomla component's Controller DOES NOT normally push data to
      the Model. Yes, this is a violation of the separation of concerns.
      However, addressing that would be a massive backwards compatibility
      break which would necessitate the rethinking and rewriting of all Joomla
      components, core and third party. As a result we are unlikely to ever
      see this changing.</emphasis></para>

      <para>The Model is the workhorse of the component. It has the
      <emphasis>business logic</emphasis>, i.e. it knows how to get things
      done. In most cases it is a data-aware model which means that it knows
      how to get stuff from the database, put stuff back to the database and
      perform other auxiliary functions with the database data. It does NOT
      handle any presentation logic, i.e. it will NOT output any HTML. It
      returns raw data whenever it is asked to. Therefore you can use a Model
      in any context: inside the component, in a CLI script, in the API
      application (which only handles and returns JSON data), a Scheduled
      Task, a module, a plugin, even a template (though that would be a bit of
      an architectural violation; I won't judge you harshly if you do that
      because you're on a deadline and/or a shoestring budget).</para>

      <para><emphasis>Note that unlike the normative Model of the MVC pattern
      the Joomla component's Model will seek data from the user session and if
      it's not found there it will try to get it from the request. This makes
      it a pain in the posterior to use outside the frontend, backend and API
      applications, e.g. in a CLI application. Yes, there's a trick to that
      (and probably a section I will have to write at some point): set its
      state manually and it will no longer try to get data from the
      request.</emphasis></para>

      <para>As I said, Joomla also has a Table class which, architecturally
      speaking, is somewhere between a Model and a Persistence Layer. But
      we're not CS majors, we're Joomla extension developers. What we need to
      know is that the Table class is an abstraction which represents exactly
      one record of a database table. Table classes only exist in the backend
      of your component but can be used anywhere. They are used either inside
      a Model or directly on their own.</para>

      <para><emphasis>Tables are used by Models but not when returning
      multiple rows. When you run getItems on a ListModel you get an array of
      stdClass objects. This sounds odd at first but it makes sense; Models
      can join multiple tables and return embellished data in lists. For
      example, you may not just get a user ID but also the user's name and
      email address as separate fields. In most (but not all!) cases you could
      instantiate a Table object and call its bind() method with one of the
      aforementioned stdClass objects as its argument to get a Table object
      representation of your data. Just remember in this case that
      instantiating a Table object is computationally expensive as it needs to
      parse the database table's column definitions. Create an instance of the
      Table object. Then clone it for each row you are processing and bind the
      data to the Table object's clone. When processing a few dozen or more
      rows it can save you hundreds of milliseconds of page load
      time.</emphasis></para>

      <para>Then, we have Views. Now, this is the biggest departure of the
      normative MVC pattern. In Computer Science the View only renders
      information in a suitable way for the user to understand. A Joomla
      component's View is actually part controller and part ViewModel. Which
      means that Joomla's MVC is neither MVC nor MVVM, it's its own thing.
      But, as we said before, we are not CS majors, we are Joomla extension
      developers. So let's see what our View does.</para>

      <para>Our View gets data from the Model. It does a bit of error checking
      to make sure nothing is amiss — if it is, it will show an appropriate
      error state be it the new in Joomla 4 Empty State (guiding the user to
      please create some data when we have nothing to show them) or an error
      page if something has gone so bad we don't know what to do. It is also
      responsible for setting up the page metadata (frontend) or the page's
      Title and Toolbar (backend) which is View-related stuff in the same way
      that making coffee is related to hosting an in-person meeting: not
      really your job but people would be really upset if nobody did
      it.</para>

      <para>In the end, the View renders the information in an appropriate
      format for the user — which is what a View is really supposed to do if
      it wants to be called a View! For HTML pages it calls one or more View
      Template files to render some HTML. For other view types such as JSON,
      Raw, XML, Feed and so on a view template file may be used but it's
      neither necessary nor does it always make sense. If you're returning a
      JSON document or a CSV it makes far more sense to construct it directly
      in your View code and return it than going through an unnecessary
      round-trip through a view template file.</para>

      <para>Finally, we need to talk about the View Template files. These are
      the real View of the MVC pattern: they convert the raw data we got from
      our Model to the HTML which will be displayed to the user. Why not have
      the View return the HTML directly? Well, we <emphasis>could</emphasis>
      but we'd have two problems. First, the View itself is also part
      Controller and part ViewModel therefore we'd have an issue with the
      separation of concerns, mixing business logic with presentation logic
      (bad idea; we are using MVC to avoid this bad practice). Second,
      Joomla's raw, unadulterated power comes from the fact that our end users
      can <emphasis>override</emphasis> View Templates in their sites, thereby
      changing the presentation of our component in ways we can neither think
      of nor support in any meaningful way across our entire user base.</para>

      <para>This is the overview of Joomla's MVC and you'll be happy to know
      that it has not actually changed ever since Joomla 1.5. Some
      implementation details have changed but the core concepts — the good,
      the bad and the ugly parts alike — have remained unchanged in Joomla 4.
      In other words, if you already have a perfectly serviceable component
      written for Joomla 3 you <emphasis>can</emphasis> migrate it to Joomla
      4. It's not a different language (like Italian to Spanish), it's a
      different <emphasis>dialect</emphasis>. Yes, you'll need to learn the
      vernacular of the new dialect but it's much, much easier than learning a
      new language. I am saying that as someone who had to learn three foreign
      (human) languages and more programming languages than I care to
      list.</para>
    </section>

    <section xml:id="com-j3-vs-j4-mvc">
      <title>Joomla 3 MVC vs Joomla 4 MVC</title>

      <para>As we already said, the basic functionality of Joomla's MVC has
      remained the same throughout Joomla 3 and 4. If you know how to make a
      Joomla 3 component you know most of what you need to make a Joomla 4
      component. The differences are a few minor, but salient, points.</para>

      <para><link linkend="com-namespaces"><emphasis
      role="bold">Namespaces</emphasis></link>. All native Joomla 4 component
      use <link
      xlink:href="https://www.php.net/manual/en/language.namespaces.php">PHP
      namespaces</link> for their PHP code. This is a very simple change in
      thinking for models, views and controllers. For example, instead of your
      frontend model being called <code>ExampleModelItem</code> it will now be
      the class <code>ItemModel</code> in the namespace
      <classname>\<replaceable>My</replaceable>\<replaceable>Prefix</replaceable>\Site\Model</classname>
      where <code>\My\Prefix</code> is something you can define, and has no
      restrictions other than it needs to be a valid PHP namespace, unique to
      your component and should not start with <code>\Joomla</code> (component
      namespaces starting withIn <code>\Joomla</code> are reserved for core
      components). This also applies to custom form fields you may need to
      create in your component — and there <emphasis>is</emphasis> a way to
      tell Joomla which namespace to look custom form fields in with new
      attributes in XML forms.</para>

      <para><link linkend="com-services"><emphasis role="bold">Service
      provider</emphasis></link>. All Joomla components are passed a
      Dependency Injection Container (DIC) which is, in fact, a Service
      Locator. This even applies to components written with the Joomla 3 MVC
      as we'll see in <link linkend="com-lifetime">the lifetime of a
      component</link>. You can register services specific to your component
      in your service locator. At the very least, Joomla expects you to set up
      the <link linkend="com-extension">extension class</link> of your
      component. Unfortunately, even simple components need to have a service
      provider as there is no convention-over-configuration in Joomla 4's
      component DIC.</para>

      <para><link linkend="com-extension"><emphasis role="bold">Extension
      class</emphasis></link>. The extension class
      <emphasis>replaces</emphasis> the entry point file (e.g.
      <filename>administrator/components/com_example/example.php</filename>)
      you had in Joomla 3 MVC. All components written with the Joomla 4 MVC
      have an extension class which extends from
      <code>Joomla\CMS\Extension\MVCComponent</code>. It is used to register
      special services used when working with your component such as the
      <code>MVCFactory</code> service (responsible for creating model, view
      and controller object instances), an <link linkend="com-html">HTML
      helper service</link> which extends Joomla's HTMLHelper, a <link
      linkend="com-router">Router service</link> for frontend search engine
      friendly (SEF) URL routing, and a <link
      linkend="com-categories">Category service</link> if your component uses
      core Categories. It also returns your component's <link
      linkend="com-dispatcher">Dispatcher</link> which is where the execution
      of your component starts. For very simple components you can even use
      the core MVCComponent class as your extension class, without
      sub-classing. See, for example, what the core
      <code>com_actionlogs</code> component does.</para>

      <para><emphasis role="bold"><link
      linkend="com-dispatcher">Dispatcher</link> instead of a front
      controller</emphasis>. In the Joomla 3 MVC paradigm you had a
      <filename>controller.php</filename> file in the root of your component's
      directory structure. This was a front-controller, supposed to figure out
      which controller to use to handle the specified view and task in the
      request. This was a bit gimmicky and error-prone, especially if you had
      components capable of displaying more than one discrete types of
      information, e.g. a downloads repository would be able to display
      categories, releases in a category and files in a release which made for
      three discrete content types which had to be handled by the same front
      controller. The new Dispatcher does the same job, it works without
      sub-classing it for most simple extensions and benefits greatly the more
      complex extensions which need more involved request processing.</para>

      <para><emphasis role="bold"><link linkend="com-html">HTML helper</link>
      is a service</emphasis>. If you had ever registered an HTMLHelper class
      with static calls this is no longer the recommended method. If you need
      an HTML helper for your extension you need to register it through the
      extension class and its methods are no longer static. Since it's a real
      object instantiated by the extension object it has access to the
      component's DIC, therefore to any service you registered in your service
      provider or you were given by Joomla in the DIC. This makes helpers
      testable and means that they can access custom services (e.g. a shipping
      cost calculation service if you are writing an e-commerce component)
      without trying to contort your code.</para>

      <para><emphasis role="bold">New format for </emphasis><link
      linkend="com-router"><emphasis role="bold">Router</emphasis></link>.
      Joomla 4 comes with a new Router which is instantiated through a
      service. The new component router superclass allows you to write
      efficient routers without a lot of boilerplate, duplicated and
      convoluted code.</para>
    </section>

    <section xml:id="com-lifetime">
      <title>The lifetime of a component</title>

      <para>In the previous section we talked about the new concepts in the
      Joomla 4 MVC but it's really hard to understand how they all work
      together. It's best if we talk about the lifetime of a component, i.e.
      what happens when you try to access a Joomla URL in the form
      <uri>index.php?option=com_example&amp;view=foo</uri>.</para>

      <para>The lifetime of our component starts in the application object
      (<code>SiteApplication</code>, <code>AdministratorApplication</code> or
      <code>ApiApplication</code>), namely its <code>dispatch()</code> method.
      All these methods do some initialisation and call
      <code>Joomla\CMS\Component::renderComponent()</code>. This method runs
      this line where things get interesting for our component:</para>

      <programlisting language="php">$app-&gt;bootComponent($option)-&gt;getDispatcher($app)-&gt;dispatch();</programlisting>

      <para>Let's rewrite it so it's more readable:</para>

      <para><programlisting language="php">$componentExtension = $app-&gt;bootComponent($option)
$componentDispatcher = $componentExtension-&gt;getDispatcher($app)
$componentDispatcher-&gt;dispatch();</programlisting>What Joomla does is ask
      the application object to <emphasis>somehow</emphasis> get a component
      extension object — even if it is a legacy component using the Joomla 3
      MVC. Then it asks the component extension object to get it the
      component's Dispatcher object. Finally, it tells the component's
      Dispatcher to dispatch (execute) the component.</para>

      <para>These three steps are crucial to understanding the difference
      between legacy Joomla 3 MVC components, modern Joomla 4 MVC components
      and how Joomla 4 makes them all work.</para>

      <section xml:id="com-lifetime-booting">
        <title>Booting the component</title>

        <para>The <code>bootComponent</code> method is implemented by
        <code>Joomla\CMS\Extension\ExtensionManagerTrait</code>. The first
        thing it does, by calling its <code>loadExtension</code> method, is to
        figure out if this is a Joomla 4 MVC or Joomla 3 MVC component. It
        does that by looking for the
        <filename>services/provider.php</filename> file under the component's
        root. As you may have guessed this is our component's <link
        linkend="com-services">service provider</link> and the reason why all
        Joomla 4 MVC components, even the simplest ones for which we could
        infer their service provider, really do need to have a service
        provider file.</para>

        <para>If the file exists it's loaded and its services are registered
        into the copy of the Joomla DIC which is used as our component's
        DIC.</para>

        <note>
          <para>This means that our component only sees a frozen in time copy
          of the global application services. You cannot register any services
          in the component's DIC and expect them to be available in the global
          application.</para>
        </note>

        <para>If the file does not exist, Joomla creates an instance of the
        <code>Joomla\CMS\Extension\LegacyComponent</code>. As you can see,
        this extension object uses a legacy MVC factory object which "speaks"
        the Joomla 3 non-namespaced MVC class names and a legacy component
        dispatcher which looks for the <filename>componentName.php</filename>
        (in our example: <filename>example.php</filename>) component entry
        point file and loads it. This is exactly how Joomla 4 can render
        components using Joomla 3 MVC.</para>

        <para>The rest of this section will talk about a Joomla 4 MVC
        component.</para>

        <para>Finally, Joomla returns <link linkend="com-extension">the
        component's extension object</link> as the result of the
        <code>bootComponent</code> method.</para>

        <tip>
          <para>You can call
          <code>\Joomla\CMS\Factory::getApplication()-&gt;bootComponent('com_example')</code>
          to get the <code>com_example</code> component's extension object
          anytime, anywhere — <emphasis role="bold">including in modules and
          plugins</emphasis>. If you subclass the
          <code>Joomla\CMS\Extension\MVCExtension</code> class in your own
          component you can create your own methods to return <emphasis>ANY
          OBJECT KNOWN TO THE COMPONENT AND ITS CONTAINER</emphasis>.</para>

          <para>This is of enormous importance.</para>

          <para>You can instantiate any MVC class of the component. You have
          access to your HTML helper, categories service and router service.
          You can get an instance of any of the custom services you created in
          your component. All of that WITHOUT any static helpers in your
          extension, WITHOUT worrying that something might break if you call
          your code outside your component. Your Models can provide a public
          API for third party developers communicating with your
          component.</para>

          <para>Joomla core components already do that. For example, you can
          get the backend <code>ArticleModel</code> of
          <code>com_content</code> in a frontend component or plugin to create
          a new Joomla article <emphasis>the right way</emphasis>:</para>

          <programlisting language="php">$articleModel = \Joomla\CMS\Factory::getApplication()
  -&gt;bootComponent('com_content')
  -&gt;getMVCFactory()
  -&gt;createModel('Article', 'Administrator');</programlisting>
        </tip>
      </section>

      <section xml:id="com-lifetime-dispatcher">
        <title>Getting the Dispatcher</title>

        <para>The extension object is responsible for returning a number of
        interesting objects through its methods. These objects are meant to be
        used for interacting with the component. One of these is
        <code>getDispatcher</code> which lets us retrieve the component's
        <link linkend="com-dispatcher">Dispatcher</link> object.</para>

        <para>Your extension can have a custom dispatcher class,
        <code>\My\Prefix\Dispatcher\Dispatcher</code>, where
        <code>\My\Prefix</code> is your component's prefix. If this class
        exists, an object instance of it is returned.</para>

        <para>If your extension does not have a dispatcher an instance of the
        default <code>Joomla\CMS\Dispatcher\ComponentDispatcher</code> (site
        and administrator applications) or
        <code>Joomla\CMS\Dispatcher\ApiDispatcher</code> (API application)
        will be created and returned instead.</para>
      </section>

      <section xml:id="com-lifetime-dispatching">
        <title>Dispatching the component</title>

        <para>The dispatcher object has a <code>dispatch()</code> method. This
        method looks in the request data to figure out which controller it
        needs to instantiate and which task it should execute on it. The
        controller object is instantiated through your component's
        <code>MVCFactory</code> service and its <code>execute</code> and
        <code>redirect</code> methods are called on it. So, yes, this is
        basically what your old Joomla 3 MVC
        <filename>controller.php</filename> file was doing.</para>

        <tip>
          <para>Having a custom dispatcher means that you can manipulate the
          <emphasis>controller and task</emphasis> based on other request
          variables.</para>

          <para>This is very important when your component is accessed
          <emphasis>outside of a Joomla menu item (no Itemid in the request
          variables)</emphasis>. In this case Joomla always uses the default
          (Home) menu item for the current language. This means that you may
          be getting a <uri>controller</uri>, <uri>view</uri> or
          <uri>task</uri> request variable — as well as other variables which
          might mess with your component, like <uri>id</uri> — from the Home
          menu item.</para>

          <para>Your Dispatcher is responsible for figuring out if this is the
          case and fix the input variables to prevent weird bugs / showing the
          wrong page of your component when it's accessed without a menu item
          id, e.g. a URL like <uri>/component/example?view=foobar</uri>. This
          is something which has happened a lot when I converted my own
          extensions to Joomla 4, including LoginGuard (the extension
          contributed as Joomla's Multi-factor Authentication feature in
          Joomla 4.2).</para>
        </tip>
      </section>
    </section>

    <section xml:id="com-dirs">
      <title>Directory structure</title>

      <para>The directory structure of a typical Joomla 4 MVC component is as
      follows, assuming it's called <code>com_example</code> and has the
      namespace prefix <code>\Acme\Example</code>. Directories are suffixed
      with <filename>/</filename>. Please note that capitalisation matters
      (directory and file names are case-sensitive).</para>

      <itemizedlist>
        <listitem>
          <para><filename>administrator/components/com_example/</filename> The
          component's backend directory</para>

          <itemizedlist>
            <listitem>
              <para><filename>forms/</filename> Optional. List view forms and
              search tools forms (formerly in models/forms)</para>

              <itemizedlist>
                <listitem>
                  <para><filename>items.xml</filename> An example form for the
                  Items list view.</para>
                </listitem>

                <listitem>
                  <para><filename>filter_items.xml</filename> An example
                  search tools form for the Items list view.</para>
                </listitem>

                <listitem>
                  <para><filename>item.xml</filename> An example form for the
                  Item edit view.</para>
                </listitem>

                <listitem>
                  <para>…</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>language/</filename> Not required but you should
              always somehow provide language files with your extension. The
              language files of your component (typically installed in
              <filename>administrator/languages/en-GB</filename>)</para>

              <itemizedlist>
                <listitem>
                  <para><filename>en-GB/</filename> The English (Great
                  Britain) language files. That's the default Joomla
                  language.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>com_example.ini</filename> The main
                      language file for your component's views. Note that
                      there is no longer an <filename>en-GB.</filename>
                      prefix; it's implied by the directory the language file
                      is in.</para>
                    </listitem>

                    <listitem>
                      <para><filename>com_example.sys.ini</filename> The
                      language file used by Joomla to display backend menu
                      items, permissions, the component's Options page, core
                      categories used by your component, select menu item
                      types in the menu manager, and render each menu item
                      type's configuration parameters.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>layouts/</filename> Optional. Any Joomla Layouts
              you want to ship with your extension for use in its
              backend.</para>
            </listitem>

            <listitem>
              <para><filename>services/</filename> Required. Here lives the
              <link linkend="com-services">Service Provider</link> of your
              component.</para>

              <itemizedlist>
                <listitem>
                  <para><filename>provider.php</filename> The service provider
                  file.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>sql/</filename> Optional, unless your extension
              makes changes to database structure or content.</para>

              <itemizedlist>
                <listitem>
                  <para><filename>updates/</filename> Required. Your
                  component's schema (database) files applied on each
                  update.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>mysql/</filename> Optional. Indicates
                      updates for sites running on the MySQL database.</para>

                      <itemizedlist>
                        <listitem>
                          <para><filename>1.0.0-20220815-0000.sql</filename> A
                          database update file. You should name them
                          <filename>version-date-time.sql</filename>. The
                          version part is mandatory.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>install.mysql.utf8.sql</filename> The SQL
                  executed on your component's first installation. Update
                  files are not executed in this case.</para>
                </listitem>

                <listitem>
                  <para><filename>uninstall.mysql.utf8.sql</filename> The SQL
                  executed on your component's uninstallation. Remove any
                  tables or database data you created.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>src/ Required. The root of your extension's PHP files and
              the root of the PSR-4 <code>\Acme\Example\Administrator</code>
              namespace prefix.</para>

              <itemizedlist>
                <listitem>
                  <para><filename>Controller/</filename> Required. Your
                  component's controllers</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>ItemsController.php</filename> An
                      example controller for a ListView</para>
                    </listitem>

                    <listitem>
                      <para><filename>ItemController.php</filename> An example
                      controller for an AdminView</para>
                    </listitem>

                    <listitem>
                      <para>…</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Dispatcher/</filename> Optional. Holds your
                  custom component dispatcher.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>Dispatcher.php</filename> Your custom
                      component dispatcher.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Extension/</filename> Optional. Holds your
                  custom extension class.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>ExampleExtension.php</filename> Your
                      custom extension class.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Field/</filename> Optional. Custom form
                  fields. Use them in your XML forms using the attribute
                  <code>addfieldprefix="Acme\Example\Administrator\Field"</code>.</para>
                </listitem>

                <listitem>
                  <para><filename>Model/</filename> Required. Your component's
                  Models.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>ItemsModel.php</filename> An example
                      model for the Items list view.</para>
                    </listitem>

                    <listitem>
                      <para><filename>ItemModel.php</filename> An example
                      model for the Item view. Handles editing and adding
                      records.</para>
                    </listitem>

                    <listitem>
                      <para>…</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Provider/</filename> Optional. Custom
                  service providers.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>RouterFactory.php</filename> Example of
                      a RouterFactory provider, if you need a frontend SEF URL
                      router.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Router/</filename> Optional. The recommended
                  place to put your custom RouterFactory, if you need a
                  frontend SEF URL router.</para>
                </listitem>

                <listitem>
                  <para><filename>Service/</filename> Optional. Custom
                  services.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>Html/</filename> Optional. Where your
                      custom HTML services (which are made available through
                      Joomla's HTMLHelper) live.</para>

                      <itemizedlist>
                        <listitem>
                          <para><filename>Example.php</filename> An example
                          HTML service.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Table/</filename> Required. Your Table
                  classes.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>ItemTable.php</filename> An example
                      table class for the items of this component (which
                      should ideally live in the
                      <database>#__example_items</database> table if you want
                      to follow Joomla best practices).</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>View/</filename> Required. Your view
                  classes. All subdirectories must be in Uppercasefirst format
                  and match the controller's name before the
                  <code>Controller</code> word.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>Items/</filename> The directory for the
                      Items list view.</para>

                      <itemizedlist>
                        <listitem>
                          <para><filename>HtmlView.php</filename> The HTML
                          view class for rendering this backend view.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>

                    <listitem>
                      <para><filename>Item/</filename> The directory for the
                      Item add/edit view.</para>

                      <itemizedlist>
                        <listitem>
                          <para><filename>HtmlView.php</filename> The HTML
                          view class for rendering this backend view.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>tmpl/</filename> Required. The view templates
              for your backend views.</para>

              <important>
                <para>All the sub-directories are in <emphasis role="bold">all
                lowercase</emphasis>. This is VERY important!</para>

                <para>Be careful if you are developing on Windows or macOS
                (which use case-insensitive filesystems). You might
                accidentally use MixedCase or Uppercasefirst folder names.
                While this will work fine on Windows and macOS it will
                <emphasis>fail</emphasis> on the Linux servers most sites run
                on. That's because Linux primarily uses case-sensitive
                filesystems.</para>
              </important>

              <itemizedlist>
                <listitem>
                  <para><filename>items/</filename></para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>default.php</filename> The view template
                      for the Items view.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>item/</filename></para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>edit.php</filename> The view template
                      for the Item view.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>access.xml</filename> The component's
              permissions configuration file</para>
            </listitem>

            <listitem>
              <para><filename>config.xml</filename> The component;s Options
              page form file</para>
            </listitem>

            <listitem>
              <para><filename>example.xml</filename> The component's XML
              manifest</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><filename>components/com_example/</filename> The component's
          frontend directory</para>

          <itemizedlist>
            <listitem>
              <para><filename>forms/</filename> Optional. Any forms for
              frontend views (formerly in models/forms).</para>
            </listitem>

            <listitem>
              <para><filename>language/</filename> Not required but you should
              always somehow provide language files with your extension. The
              language files of your component (typically installed in
              <filename>languages/en-GB</filename>)</para>

              <itemizedlist>
                <listitem>
                  <para><filename>en-GB/</filename> The English (Great
                  Britain) language files. That's the default Joomla
                  language.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>com_example.ini</filename> The main
                      language file for your component's frontend
                      views.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>layouts/</filename> Optional. Any Joomla Layouts
              you want to ship with your extension for use in its
              frontend.</para>
            </listitem>

            <listitem>
              <para>src/ Required. The root of your extension's PHP files and
              the root of the PSR-4 <code>\Acme\Example\Site</code> namespace
              prefix.</para>

              <itemizedlist>
                <listitem>
                  <para><filename>Controller/</filename> Required. Your
                  component's controllers</para>
                </listitem>

                <listitem>
                  <para><filename>Dispatcher/</filename> Optional. Holds your
                  custom component dispatcher for the frontend only.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>Dispatcher.php</filename> Your custom
                      component frontend dispatcher.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Model/</filename> Required. Your component's
                  Models.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>ItemsModel.php</filename> An example
                      model for the Items list view.</para>
                    </listitem>

                    <listitem>
                      <para><filename>ItemModel.php</filename> An example
                      model for the Item view. Handles editing and adding
                      records.</para>
                    </listitem>

                    <listitem>
                      <para>…</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>Service/</filename> Optional. Custom
                  services.</para>

                  <itemizedlist>
                    <listitem>
                      <para><filename>Category.php</filename> Optional. Your
                      site's category service.</para>
                    </listitem>

                    <listitem>
                      <para><filename>Router.php</filename> Optional. Your
                      site's SEF router.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para><filename>View/</filename> Required. Your frontend
                  view classes. All subdirectories must be in Uppercasefirst
                  format and match the controller's name before the
                  <code>Controller</code> word.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><filename>tmpl/</filename> Required. The view templates
              for your backend views. All the sub-directories are in <emphasis
              role="bold">all lowercase</emphasis>.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><filename>api/components/com_example/</filename> Optional.
          Your Joomla API application integration. Just having this directory
          is not enough, you will also need a published plugin for your
          application in the <filename>webservices</filename> folder.</para>

          <itemizedlist>
            <listitem>
              <para>src/ Required. The root of your extension's PHP files and
              the root of the PSR-4 <code>\Acme\Example\Api</code> namespace
              prefix.</para>

              <itemizedlist>
                <listitem>
                  <para><filename>Controller/</filename> Required. Your
                  component's controllers</para>
                </listitem>

                <listitem>
                  <para><filename>View/</filename> Required. Your API view
                  classes. All subdirectories must be in Uppercasefirst format
                  and match the controller's name before the
                  <code>Controller</code> word. Note that these views DO NOT
                  use view template files; they return JSON data
                  directly.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><filename>media/com_example/</filename> Optional. Your
          component's static assets.</para>

          <itemizedlist>
            <listitem>
              <para><filename>css/</filename> Optional. Custom CSS files for
              your component.</para>
            </listitem>

            <listitem>
              <para><filename>js/</filename> Optional. Custom JavaScript files
              for your component.</para>
            </listitem>

            <listitem>
              <para><filename>joomla.asset.json</filename> The <link
              linkend="concepts-webassetmanager">WebAssetManager configuration
              file</link> for your static assets.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="com-services">
      <title>Service provider</title>

      <para>As discussed in the previous section, the service provider file is
      mandatory for Joomla 4 MVC components and lives in the component's
      <filename>services</filename> folder and always named
      <filename>provider.php</filename>.</para>

      <para>The absolutely minimal minimal service provider file looks like
      the following:</para>

      <programlisting language="php">&lt;?php
defined('_JEXEC') || die;

use Acme\Example\Administrator\Extension\ExampleComponent;
use Joomla\CMS\Dispatcher\ComponentDispatcherFactoryInterface;
use Joomla\CMS\Extension\ComponentInterface;
use Joomla\CMS\Extension\Service\Provider\MVCFactory;
use Joomla\CMS\MVC\Factory\MVCFactoryInterface;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;

return new class implements ServiceProviderInterface {
    public function register(Container $container)
    {
        // PART 1: Register service providers to the component's container
        $container-&gt;registerServiceProvider(new MVCFactory('Acme\\Example'));

        // PART 2: Instantiate and set up your extension object
        $container-&gt;set(
            ComponentInterface::class,
            function (Container $container) {
                /**
                 * PART 2.a: Instantiate the extension object
                 *
                 * If you do not have a custom extension class use \Joomla\CMS\Extension\MVCComponent instead.
                 */
                $component = new \Acme\Example\Administrator\Extension\ExampleComponent(
                    $container-&gt;get(ComponentDispatcherFactoryInterface::class)
                );

                // PART 2.b: Set up the extension object
                $component-&gt;setMVCFactory($container-&gt;get(MVCFactoryInterface::class));

                // PART 2.c: return the extension object
                return $component;
            }
        );
    }
};
</programlisting>

      <para>As you can see the service provider returns an <link
      xlink:href="https://www.php.net/manual/en/language.oop5.anonymous.php">anonymous
      PHP class</link> which implements the
      <code>Joomla\DI\ServiceProviderInterface</code>. That's the standard way
      to extend Joomla's DIC. Remember, as we learned in <link
      linkend="com-lifetime">the lifetime of a component</link>, Joomla
      creates a <emphasis>copy</emphasis> of its DIC and uses it as our
      component's own DIC. The service providers we set up in our component
      stay with our component, they do not leak out to the global application
      scope (the global Joomla DIC you get through the
      <code>Joomla\CMS\Factory::getContainer()</code> static method).</para>

      <para>Part 1 of that file lets us register service providers to our
      component's DIC. At the bare minimum we need to register a
      <code>Joomla\CMS\Extension\Service\Provider\MVCFactory</code> provider.
      This returns an object implementing
      <code>Joomla\CMS\MVC\Factory\MVCFactoryInterface</code> which is used by
      our component's code (and Joomla's core code) to get the MVC objects of
      our component (Controllers, Models, Views, Tables). If we want to use
      more core Joomla features with out component we may have to register
      more service providers as we'll see in the <link
      linkend="com-extension">Extension class</link> section and the rest of
      the sections of this chapter.</para>

      <para>Part 2 sets up a service provider returning an object implementing
      the <code>Joomla\CMS\Extension\ComponentInterface</code>, i.e. our
      component's extension object.</para>

      <para>Part 2.a is where we create an instance of our <link
      linkend="com-extension">extension class</link>. If you have a dead
      simple component which does not use a custom extension class you can use
      Joomla's built-in <code>\Joomla\CMS\Extension\MVCComponent</code> class
      instead. Most components will need a custom extension class so we
      instantiate it here.</para>

      <para>Part 2.b is where we set up the extension object we created in
      Part 2.a. Remember when I told you that <link
      linkend="concepts-container">Joomla's DIC is not really a Dependency
      Injection Container</link> but more of a Service Locator? Because of
      that fact, when we create the extension object it does not know of any
      service objects it needs to use. Therefore we have to push them
      manually.</para>

      <para><emphasis>Sidebar: In my opinion, the three biggest shortcomings
      of the Joomla 4 MVC are the lack of convention over configuration, the
      lack of abstracted configuration and the lack of a real Dependency
      Injection container. These three shortcomings are, respectively, why we
      need to have a service provider file, why we need Part 1 and Part 2.b
      and why we need Part 2.a. Most other PHP frameworks have already solved
      these shortcomings. This means that any complaints that Joomla is moving
      to a very abstracted approach just to compete with other PHP frameworks
      are entirely unfounded; Joomla's architecture is still a good 10 or so
      years behind the PHP state of the art. This is not a bad thing! Too much
      abstraction may be a good thing for experienced, hardcore developers
      like yours truly but not necessarily the easiest thing to get your head
      around if you're a newcomer to Joomla or PHP in
      general.</emphasis></para>

      <para>Finally, we have Part 3 where we return the configured extension
      object, necessary for our custom service provider to <emphasis>actually
      work</emphasis>.</para>

      <warning>
        <para>You may be tempted to think that the service provider is only
        ever called when Joomla is about to render your component. <emphasis
        role="bold">This is not the case</emphasis>. Joomla will load a
        component's service provider any time it needs to interact with any of
        its services including the Router, or because another extension (such
        as a plugin, or module) wants to get access to your component's Models
        or some other service or object.</para>

        <para>Just because your service provider's code is running DOES NOT
        mean you are about to render an HTML page with your component, it DOES
        NOT mean that you necessarily have access to the JPATH_COMPONENT and
        JPATH_COMPONENT_ADMINISTRATOR constants and absolutely DOES NOT mean
        that you should ever, <emphasis>ever</emphasis>, try to push CSS,
        JavaScript or run any other code which assumes that Joomla is in an
        HTML output state.</para>

        <para>If you have such code (which is generally a bad idea) you should
        run it in your component's <link
        linkend="com-dispatcher">Dispatcher</link> and only after checking
        that you are indeed running in an HTML application (check the type of
        the object returned from calling
        <code>\Joomla\CMS\Factory::getApplication()-&gt;getDocument()</code>).</para>
      </warning>
    </section>

    <section xml:id="com-extension">
      <title>Extension class</title>

      <para>As we saw earlier in <link linkend="com-lifetime">the lifetime of
      a component</link>, the Extension class of a component is <emphasis>sort
      of</emphasis> a service locator for our component. Joomla checks if that
      objects implements a PHP Interface it knows about and uses the service
      communicated via the Interface implementation (typically one of the
      corresponding PHP Traits provided by Joomla) to do something useful,
      e.g. register an HTMLHelper helper, integrate with Tags, create SEF URLs
      by using a Router and so on and so forth.</para>

      <para>If your component does not make use of any of these features you
      do not need to create a custom extension class for your component.
      Joomla gives you the perfectly serviceable
      <code>Joomla\CMS\Extension\MVCComponent</code> class which implements a
      minimal Joomla 4 component: it can run because it returns a Dispatcher
      and it can create MVC objects using the Joomla 4 MVC because it returns
      an MVCFactory object. This is enough for a component which only runs in
      the backend or runs in both the frontend and the backend but has no way
      of letting Joomla create SEF URLs for it. You may think this is useless
      but I'd contest you're not thinking simple enough. Case in point, some
      core Joomla components doing exactly that. For example the
      <code>com_actionlogs</code> component which only has a backend user
      interface.</para>

      <para>That said, there wouldn't be much to write if all or even most
      components didn't need a custom extension class. You see, most
      components need one or more of the following features. I am documenting
      the features I discovered that need customisations in the extension
      class and give you an overview of the required changes in your
      component's code to make them work.</para>

      <itemizedlist>
        <listitem>
          <para>Use a custom <link linkend="com-html">HTML
          Helper</link>.</para>

          <para>Your extension class must implement the
          <code>Joomla\CMS\HTML\HTMLRegistryAwareTrait</code> and use the
          <code>Joomla\CMS\HTML\HTMLRegistryAwareTrait</code>. The extension
          class must override the <code>boot</code> method and have a line
          similar to <code>$this-&gt;getRegistry()-&gt;register('something',
          new MyHTMLHelper())</code>. We'll see what that means in the section
          covering the HTML helper.</para>
        </listitem>

        <listitem>
          <para>Use <link linkend="com-categories">core
          categories</link>.</para>

          <para>Your extension class must implement the
          <code>Joomla\CMS\Categories\CategoryServiceInterface</code> and use
          the <code>Joomla\CMS\Categories\CategoryServiceTrait</code>. Your
          service provider (<filename>provider.php</filename>) needs to
          register a
          <code>Joomla\CMS\Extension\Service\Provider\CategoryFactory</code>
          service provider and use the extension object's
          <code>setCategoryFactory</code> method to pass this factory to the
          extension object. The extension class must override the
          <code>getTableNameForSection</code> and
          <code>getStateColumnForSection</code> methods defined in the
          aforementioned trait and interface.</para>
        </listitem>

        <listitem>
          <para>Integrate with Joomla's Tags feature.</para>

          <para>Your extension class must implement the
          <code>Joomla\CMS\Tag\TagServiceInterface</code> and use the
          <code>Joomla\CMS\Tag\TagServiceTrait</code>. The extension class
          must override the <code>getTableNameForSection</code> and
          <code>getStateColumnForSection</code> methods defined in the
          aforementioned trait and interface.</para>
        </listitem>

        <listitem>
          <para>Integrate with <link linkend="com-fields">Joomla's Custom
          Fields feature</link>.</para>

          <para>Your extension class must implement the
          <code>Joomla\CMS\Fields\FieldsServiceInterface</code>. The extension
          class must implement the <code>validateSection</code> and
          <code>getContext</code> methods defined in the aforementioned
          interface.</para>
        </listitem>

        <listitem>
          <para>Provide a <link linkend="com-router">Router</link> for
          meaningful, human-readable SEF URLs in the frontend.</para>

          <para>Your component must have a class implementing the
          <code>Joomla\CMS\Component\Router\RouterFactoryInterface</code>
          (Router factory) and a class implementing the
          <code>Joomla\DI\ServiceProviderInterface</code> (Router factory
          provider). Your extension class must implement the
          <code>Joomla\CMS\Component\Router\RouterServiceInterface</code> and
          use the <code>Joomla\CMS\Component\Router\RouterServiceTrait</code>.
          Your service provider (<filename>provider.php</filename>) needs to
          register your Router factory provider and use the extension object's
          <code>setRouterFactory</code> method to pass the resulting Router
          factory to the extension object.</para>
        </listitem>

        <listitem>
          <para>Let Joomla associate items between languages on multi-language
          sites.</para>

          <para>Your component must have a class extending the
          <code>Joomla\CMS\Association\AssociationExtensionHelper</code>. Your
          service provider (<filename>provider.php</filename>) must register
          this class with the
          <code>Joomla\CMS\Association\AssociationExtensionInterface::class</code>
          key and use the extension object's
          <code>setAssociationExtension</code> method to assign the object
          resulting from that service to the extension object. Your extension
          object needs to implement the
          <code>Joomla\CMS\Association\AssociationServiceInterface</code> and
          use the
          <code>Joomla\CMS\Association\AssociationServiceTrait</code>.</para>
        </listitem>

        <listitem>
          <para>Integrate with Joomla's Workflows feature.</para>

          <para>Your extension class must implement the
          <code>Joomla\CMS\Workflow\WorkflowServiceInterface</code> and use
          the <code>Joomla\CMS\Workflow\WorkflowServiceTrait</code>. The
          extension class must override the <code>getModelName</code>,
          <code>filterTransitions</code>,
          <code>getWorkflowTableBySection</code>,
          <code>getWorkflowContexts</code> and
          <code>getCategoryWorkflowContext</code> methods defined in the
          aforementioned trait and interface.</para>
        </listitem>
      </itemizedlist>

      <para>As you can see, trying to do pretty much anything useful does
      require a custom extension class.</para>

      <section xml:id="com-extension-naming">
        <title>Naming your extension class</title>

        <para>There are no hard rules for naming your component's extension
        class. That said, to help anyone reading your code — including
        yourself six or so months later — retain a modicum of their sanity it
        is advisable to use the convention
        <code><replaceable>\My\Prefix</replaceable>\Administrator\Extension\<replaceable>Name</replaceable>Component</code>
        where \My\Prefix is the namespace prefix of your component and
        <code>Name</code> is the name of your component without the
        <code>com_</code> prefix.</para>

        <para>For example, if you have a component named
        <code>com_example</code> with the namespace prefix
        <code>\Acme\Example</code> your extension class should be
        <code>\Acme\Example\Administrator\Extension\ExampleComponent</code>
        and placed in the file
        <filename>administrator/components/com_example/src/Extension/ExampleComponent.php</filename>.</para>
      </section>

      <section xml:id="com-extension-provider">
        <title>Using your extension class in the service provider</title>

        <para>As you remember from the service provider section, in Part 2.a
        you need to instantiate the extension class. These lines would look
        like this:</para>

        <programlisting language="php">$component = new \Acme\Example\Administrator\Extension\ExampleComponent(
    $container-&gt;get(ComponentDispatcherFactoryInterface::class)
);</programlisting>

        <para>Simple, isn't it?</para>
      </section>

      <section xml:id="com-extension-outside-com">
        <title>Using your extension class from outside the component</title>

        <para>Now we are finally able to answer the question which you had in
        mind coming to this section: why in the name of Cthulu do I have to
        have an extension class and what does it accomplish beyond adding yet
        another layer of complexity to my extension writing problems?</para>

        <para>For that, let's consider this. Let's say we have a news site and
        we are building a system plugin which checks every day for newly
        published articles, auto-generating a daily summary blog post using
        the intro text of these articles and some preset template (maybe even
        some judicious use of a GPT-3–based AI). This plugin would need to
        publish an article. You could of course just instantiate the
        <code>ArticleTable</code> class of <code>com_content</code> directly
        to do that but this would not run any content plugins or create the
        right entries in the #__assets table, breaking your site. You need to
        use the com_content Article backend model of
        <code>com_content</code>.</para>

        <para>Back in the Joomla 3 days you would do that by directly
        instantiating the <code>ContentModelArticle</code> class. Okay, first
        problem: Joomla didn't know where to find it so you have to
        <code>require_once()</code> the file. Second problem: what if that
        model changes over time and has dependencies to other classes you have
        failed to require the files of? Believe me, I've been there, done that
        and it was about as enjoyable as using a rusty fork to pull my eyes
        out of their sockets.</para>

        <para>In Joomla 4 you don't have to care about the class autoloading,
        but the <code>ArticleModel</code> will actually need access to other
        services provided by the <code>com_content</code> component for things
        like tagging, custom fields and workflows. If you try to instantiate
        the model class directly you will get a lot of errors as well. So, who
        are you gonna call? No, not Ghostbusters; they are Hollywood fiction.
        You're gonna call the very real and very useful
        <code>bootComponent</code> method of the application!</para>

        <programlisting language="php">$contentExtension = \Joomla\CMS\Factory::getApplication()
  -&gt;bootComponent('com_content');
$articleModel = $contentExtension
  -&gt;getMVCFactory()
  -&gt;createModel('Article', 'Administrator');</programlisting>

        <para>The first two lines told Joomla to “boot” the
        <code>com_content</code> component, returning its <emphasis>extension
        object</emphasis>. Now we have have access to all services known to
        this object through its various getters (method whose name start with
        <code>get</code>).</para>

        <para>This works for any component, anywhere, anytime. You can be in
        the frontend, backend, API application or CLI application or in an
        execution context you don't care to know about in a Scheduled Tasks
        plugin. No problem! You can boot any components — yours, core, or
        third party — to get its extension object and Bob's your uncle.</para>
      </section>

      <section xml:id="com-extension-dic-proxy">
        <title>Getting access to the component's DIC anytime, anywhere</title>

        <para>I see that some of you are <emphasis>still</emphasis> not
        convinced that the extension object is a cool concept.</para>

        <para>Remember when I told you that the Joomla DIC — therefore the
        component's DIC which is a customised copy of it — is not a real
        Dependency Injection Container but a Service Locator and lamented the
        fact that you cannot get a reference to it from anywhere in your
        component, unlike modern PHP frameworks like Laravel?</para>

        <para>Well, it turns out that you can get access to your component's
        DIC anywhere, anytime. You just need to add the following handy code
        to your extension's class:</para>

        <programlisting language="php">	protected static $dic;

    public function boot(ContainerInterface $container)
    {
        self::$dic = $container;
    }

    public static function getContainer()
    {
        if (empty(self::$dic))
        {
            Factory::getApplication()
                   -&gt;bootComponent('com_example');
        }

        return self::$dic;
    }
</programlisting>

        <para>This code is very simple. We declare a protected static variable
        holding our component's DIC. This is initialised by the boot method
        which is called whenever the component is booted. The static method
        getContainer returns the component's DIC; if the DIC was undefined at
        this point it boots the component first.</para>

        <para>So now you can simply do:</para>

        <programlisting language="php">$exampleDIC = \Acme\Example\Administrator\Extension\ExampleComponent::getContainer();</programlisting>

        <para>The component's DIC gives you access to all of the application's
        services and your component's service. Using the MVCFactory to get an
        MVC object you can be sure that it will work as intended.</para>
      </section>
    </section>

    <section xml:id="com-dispatcher">
      <title>Dispatcher</title>

      <para>As we said <link linkend="com-j3-vs-j4-mvc">when comparing the
      Joomla 3 to the Joomla 4 MVC</link>, the Dispatcher takes the place of
      the front controller (<filename>controller.php</filename>) in the legacy
      Joomla 3 MVC. In some ways it also takes the place of the entry point
      file (e.g. <filename>example.php</filename> for a component named
      <code>com_example</code>) as it's the first code which is executed when
      our component is loaded with the explicit intent of rendering
      output.</para>

      <para>Most components do not need a custom Dispatcher. The default
      Dispatcher provided by Joomla is just fine.</para>

      <para>If you do decide to create a custom Dispatcher its class name
      <emphasis role="bold">MUST</emphasis> be
      <code><replaceable>\My\Prefix</replaceable>\Administrator\Dispatcher\Dispatcher</code>
      (backend),
      <code><replaceable>\My\Prefix</replaceable>\Site\Dispatcher\Dispatcher</code>
      (frontend) or
      <code><replaceable>\My\Prefix</replaceable>\Api\Dispatcher\Dispatcher</code>
      (API application) where <code>\My\Prefix</code> is the namespace prefix
      for your component. This class must extend from
      <code>\Joomla\CMS\Dispatcher\ComponentDispatcher</code>.</para>

      <para>Typically, there are two methods you might need to customise. One
      is <code>loadLanguage</code> which loads your component's language
      files. You may have to customise that if, for example, you need to load
      the backend files in the frontend or vice versa, or if you need to load
      some core component's language files on top of yours.</para>

      <para>The other method may be the <code>dispatch()</code> method which
      figures out the view, task and controller from the input and executes
      the component.</para>

      <para>Usually, I override the <code>dispatch()</code> method to add a
      minimum PHP version check and fix up the request variables so I always
      have a view and task. The latter helps when writing Routers for
      components which have record add / edit views in the
      <emphasis>frontend</emphasis>. Such a Dispatcher would look like the
      following code example.</para>

      <programlisting language="php">&lt;?php
namespace Acme\Example\Site\Dispatcher;

defined('_JEXEC') or die;

class Dispatcher extends \Joomla\CMS\Dispatcher\ComponentDispatcher
{
    /**
     * The default controller (and view), if none is specified in the request.
     *
     * @var   string
     */
    protected $defaultController = 'items';

    /** @inheritdoc */
    public function dispatch()
    {
        $minPHPVersion = '7.4.0';

        if (version_compare(PHP_VERSION, $minPHPVersion, 'lt'))
        {
            throw new \RuntimeException(
                sprintf(
                    'This component requires PHP %s or later.',
                    $minPHPVersion
                )
            );
        }

        $this-&gt;applyViewAndController();

        parent::dispatch();
    }

    /**
     * Applies the view and controller to the input object communicated to the MVC objects.
     *
     * If we have a controller without view or just a task=controllerName.taskName we populate the view to make things
     * easier and more consistent for us to handle.
     *
     * @return  void
     */
    protected function applyViewAndController(): void
    {
        $controller = $this-&gt;input-&gt;getCmd('controller', null);
        $view       = $this-&gt;input-&gt;getCmd('view', null);
        $task       = $this-&gt;input-&gt;getCmd('task', 'default');

        if (strpos($task, '.') !== false)
        {
            // Explode the controller.task command.
            [$controller, $task] = explode('.', $task);
            $view = null;
        }

        if (empty($controller) &amp;&amp; empty($view))
        {
            $controller = $this-&gt;defaultController;
            $view       = $this-&gt;defaultController;
        }
        elseif (empty($controller) &amp;&amp; !empty($view))
        {
            $controller = $view;
        }
        elseif (!empty($controller) &amp;&amp; empty($view))
        {
            $view = $controller;
        }

        $controller = strtolower($controller);
        $view       = strtolower($view);

        $this-&gt;input-&gt;set('view', $view);
        $this-&gt;input-&gt;set('controller', $controller);
        $this-&gt;input-&gt;set('task', $task);
    }
}</programlisting>
    </section>

    <section xml:id="com-namespaces">
      <title>Namespaces and MVC</title>

      <para>Before we delve into the specifics of how Models, Views,
      Controllers and Tables work in the Joomla 4 MVC we need to talk about
      how they are <emphasis>named</emphasis>.</para>

      <section xml:id="com-namespaces-j3">
        <title>How things worked from Joomla 1.5 to 3.10</title>

        <para>In Joomla 3 the naming convention was
        <code>ComponentTypeName</code> where</para>

        <itemizedlist>
          <listitem>
            <para><code>Component</code> is the name of the component without
            the <code>com_</code> prefix and with the first letter in
            uppercase. For example, if you have <code>com_example</code> the
            first part of an MVC class name was <code>Example</code>.</para>
          </listitem>

          <listitem>
            <para><code>Type</code> is the type of the class you have, i.e.
            one of <code>Component</code>, <code>Model</code>,
            <code>View</code>, or <code>Table</code>. Again, the first letter
            is uppercase.</para>
          </listitem>

          <listitem>
            <para><code>Name</code> is the name of the specific MVC class with
            its first letter in uppercase, e.g. <code>Item</code>.</para>
          </listitem>
        </itemizedlist>

        <para>This conventions held true in both the front- and backend parts
        of your component. For example, both the frontend and the backend
        would have a class named ExampleControllerItem and they could not
        extend from each other. This led to a <emphasis>lot</emphasis> of code
        duplication. Code duplication is the natural enemy of <link
        xlink:href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</link>
        (Don't Repeat Yourself) code and a source of the most egregious bugs.
        That's why this practice is mockingly called WET: Write Everything
        Twice. When you put it like that it sounds exactly as ridiculous as it
        is practicing it.</para>

        <para>As for file naming, things were pretty clear for Controllers,
        Models and Tables. The name of the file was the <code>Name</code> part
        of your class name, but in all lowercase. For example, the class
        <code>ExampleControllerItem</code> was placed in a file called
        <filename>item.php</filename>.</para>

        <para>Views were... a bit more complicated. A view has a
        <emphasis>view type</emphasis> which corresponds to the
        <parameter>format</parameter> URL parameter, the default (if not
        specified) being <option>html</option>. However, if all view classes
        of the <code>com_example</code> component for the view name
        <code>item</code> are called <code>ExampleViewItem</code> how does
        Joomla figure out which one to load for the <code>html</code>,
        <code>json</code>, <code>raw</code>, <code>feed</code> etc view types?
        The trick was in the <emphasis>file name</emphasis>. Regardless of the
        name of the view class, the file name the class was stored in was
        following the naming convention
        <filename>view.<replaceable>view_type</replaceable>.php</filename>
        where the <replaceable>view_type</replaceable> is the view type in all
        lowercase (corresponds to the URL <parameter>format</parameter>
        parameter). The HTML view class would be stored in a file called
        <filename>view.html.php</filename>. This was maddening because a. the
        file name does not include even a hint to the class name and b. view
        classes cannot extend from each other. Another case of WET.</para>

        <para>With such complicated class and file naming — not to mention one
        not always being related to the other — it was impossible to write
        anything that remotely resembled a working autoloader for component
        classes. This resulted in Joomla using some ugly static calls in its
        base controller, model, view and table classes to get the MVC object
        you wanted. Whether that worked or not depended on whether they were
        called from within the same component or if you had used other badly
        documented static calls to tell these base classes where to look for
        component classes. If you wanted to mix front- and backend classes…
        let's just say the result was not pretty.</para>

        <para>Basically, the Joomla 1.5 to 3.10 MVC class and file naming was
        a rolling Dumpster fire in the sixth ring of Hell. Yet, it was still
        better than nothing, i.e. what WordPress plugin developers have to
        contend with even to this day. It's funny how literally anything is
        better than nothing and how attached people got to what is objectively
        a bad solution which was rushed out of the door.</para>

        <para>A bit of history: The MVC in Joomla 1.5 to 3.10 was never
        considered “finished” by its lead developer, Johan Janssens. He was
        aware of its shortcomings but ran out of time improving it in 2006.
        Janssens left the project shortly after Joomla 1.5 was released. The
        MVC architecture wasn't updated significantly in subsequent versions.
        Features were still added to it, e.g. Forms support in Joomla 1.6, but
        the class and file naming remained untouched until the release of
        Joomla 4 in 2020.</para>
      </section>

      <section xml:id="com-namespaces-j4">
        <title>How things work Joomla 4.0 onwards</title>

        <para>Fixing the hot mess of class and file naming in component's MVC
        was one of the priorities in Joomla 4. Having a CMS in 2020 (when
        Joomla 4 was released) still use a half-finished and proven
        problematic architecture from 2006 would just not cut it.</para>

        <para>The first step was to add <link
        linkend="concepts-namespaces">namespaces</link> and make sure that the
        <link linkend="com-dirs">folder and file names</link> follow the <link
        xlink:href="https://www.php-fig.org/psr/psr-4/">PSR-4</link>
        standard.</para>

        <para>Your component's namespace prefix is declared in the XML
        manifest of the component using a new XML element under the
        <code>&lt;extension&gt;</code> root element:</para>

        <programlisting language="xml">&lt;namespace path="src"&gt;My\Namespace\Prefix&lt;/namespace&gt;</programlisting>

        <para>The <code>path</code> attribute tells Joomla which subdirectory
        of your extension holds the PSR-4 of your extension's PHP files. It is
        best practice to name it <filename>src</filename> but <emphasis>you
        don't have to</emphasis>. I always assume you are using
        <filename>src</filename>.</para>

        <para>The text inside the XML element,
        <code>My\Namespace\Prefix</code> in our example, is the namespace
        prefix you will be using. Each component can register its own
        namespace prefix without any restrictions. It is
        <emphasis>recommended</emphasis> to use the convention
        <code>\Company\Something</code> where <code>Company</code> is your
        company name (or a shortened version thereof) and
        <code>Something</code> corresponds to the <code>com_something</code>
        extension name of your component. For example, the component
        <code>com_example</code> by Acme, Inc could have a namespace prefix of
        <code>\Acme\Example</code> set up in its XML manifest.</para>

        <para>Note that this is the common namespace prefix for your entire
        component. Your component has a different part for each of the three
        web applications in Joomla: frontend (site), backend (administrator)
        and api (the brand-new JSON API; this is optional).</para>

        <para>Here is how namespace prefixes work across different types of
        extensions, assuming a common namespace prefix
        <code>Acme\Example</code>:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Component, frontend</emphasis>. The
            frontend classes MUST be under the namespace
            <code>\Acme\Example\Site</code>. The folder
            <filename>components/com_example/src</filename> is the root of the
            <code>\Acme\Example\Site</code> namespace.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Component, backend</emphasis>. The
            backend classes MUST be under the namespace
            <code>\Acme\Example\Administrator</code>. The folder
            <filename>administrator/components/com_example/src</filename> is
            the root of the <code>\Acme\Example\Administrator</code>
            namespace.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Component, API application</emphasis>.
            The API application classes MUST be under the namespace
            <code>\Acme\Example\Api</code>. The folder
            <filename>api/components/com_example/src</filename> is the root of
            the <code>\Acme\Example\Api</code> namespace.</para>
          </listitem>
        </itemizedlist>

        <para>As for the class naming, it's not a big departure from Joomla 3.
        It's just a more normalised version which takes namespaces into
        account.</para>

        <para>In Joomla 4 and beyond the naming convention for controllers,
        models and tables is
        <code>\<replaceable>NamespacePrefix</replaceable>\<replaceable>ApplicationType</replaceable>\<replaceable>Type</replaceable>\<replaceable>Name</replaceable><replaceable>Type</replaceable></code>
        where:</para>

        <itemizedlist>
          <listitem>
            <para><replaceable>NamespacePrefix</replaceable> is your common
            namespace prefix, e.g. <code>\Acme\Example</code>.</para>
          </listitem>

          <listitem>
            <para><replaceable>ApplicationType</replaceable> is the type of
            the application part of your component i.e. one of
            <code>Site</code> (frontend), <code>Administrator</code>
            (backend), or <code>Api</code> (JSON API application).</para>
          </listitem>

          <listitem>
            <para><replaceable>Name</replaceable> is the name of the specific
            MVC class with its first letter in uppercase, e.g.
            <code>Item</code>.</para>
          </listitem>

          <listitem>
            <para><code><replaceable>Type</replaceable></code> is the type of
            the class you have, i.e. one of <code>Controller</code>,
            <code>Model</code>, or <code>Table</code>. Again, the first letter
            is uppercase.</para>
          </listitem>
        </itemizedlist>

        <para>Controllers, models and tables are placed under your
        <filename>src</filename> directory following PSR-4. So, a backend
        class <code>\Acme\Example\Administrator\Model\ItemModel</code> for a
        component <code>com_example</code> whose common namespace prefix is
        <code>\Acme\Example</code> is placed in the file
        <filename>administrator/components/com_example/src/Model/ItemModel.php</filename>.</para>

        <para>Views have a very slightly different convention because we also
        have the <emphasis>view type</emphasis>. Their naming convention is
        <code>\<replaceable>NamespacePrefix</replaceable>\<replaceable>ApplicationType</replaceable>\View\<replaceable>Name</replaceable>\<replaceable>ViewType</replaceable></code>
        where:</para>

        <itemizedlist>
          <listitem>
            <para><replaceable>NamespacePrefix</replaceable> is your common
            namespace prefix, e.g. <code>\Acme\Example</code>.</para>
          </listitem>

          <listitem>
            <para><replaceable>ApplicationType</replaceable> is the type of
            the application part of your component i.e. one of
            <code>Site</code> (frontend), <code>Administrator</code>
            (backend), or <code>Api</code> (JSON API application).</para>
          </listitem>

          <listitem>
            <para><replaceable>Name</replaceable> is the name of the specific
            MVC class with its first letter in uppercase, e.g.
            <code>Item</code>.</para>
          </listitem>

          <listitem>
            <para><code>ViewType</code> corresponds to the format URL
            parameter with its first letter in uppercase, e.g.
            <code>Html</code>, <code>Json</code>, <code>Feed</code>,
            <code>Raw</code> and so on.</para>
          </listitem>
        </itemizedlist>

        <para>View classes are placed under your <filename>src</filename>
        directory following PSR-4. So, a backend class
        <code>\Acme\Example\Administrator\View\Item\HtmlView</code> for a
        component <code>com_example</code> whose common namespace prefix is
        <code>\Acme\Example</code> is placed in the file
        <filename>administrator/components/com_example/src/View/Item/HtmlView.php</filename>.</para>

        <para>Right away you can see how namespaces are benefiting us. A
        controller, model, or view in the frontend, backend and api
        application have a different FQN (<link
        xlink:href="https://www.php.net/manual/en/language.namespaces.rules.php">Fully
        Qualified Name</link>). They no longer have the same name. One can
        extend the other if we want to, we <emphasis>can</emphasis> mix
        front-, backend and api MVC objects if we need to and all of these
        classes can be autoloaded without having to use weird static calls.
        Cool!</para>
      </section>
    </section>

    <section xml:id="com-mvcfactory">
      <title>The MVCFactory</title>

      <para>In Joomla 3 you had to make a static call to the base MVC class
      included in Joomla itself to get an instance of an MVC object. For
      example, getting your ExampleModelItem model object you had to do
      something like the following.</para>

      <programlisting language="php">$model = \Joomla\CMS\MVC\Model\BaseDatabaseModel::getInstance('Item', 'ExampleModel');</programlisting>

      <para>If you were to do that in the frontend of the site you'd get the
      frontend <code>ExampleModelItem</code> class stored in
      <filename>components/com_example/models/item.php</filename>. If you were
      to do that in the backend of the site you'd get the backend
      <code>ExampleModelItem</code> class stored in
      <filename>administrator/components/com_example/models/item.php</filename>.
      If you did that from outside the <code>com_example</code> component,
      e.g. in a module or plugin, it would fail unless either the class was
      already loaded beforehand OR you had done something like</para>

      <programlisting language="php">\Joomla\CMS\MVC\Model\BaseDatabaseModel::addIncludePath(
  'components/com_example/models', 'ExampleModel'
);</programlisting>

      <para>Having to call a static method to get an object is bad
      architecture since the superclass where the static method lives in
      becomes a God Object — it knows way too much about how everything works
      in the entire CMS! Moreover, having the ability to auto-load classes
      only under certain circumstances, and having the object returned depend
      on both the application running under and magic configuration supplied
      by static method calls made it impossible to know what will be returned
      every time. The fact that backend and frontend classes had the exact
      same Fully Qualified Name made it impossible to double-check something
      didn't go awry. This loopy behaviour was a constant source of
      bugs.</para>

      <para>Joomla 4 addressed this source of endless frustration by
      introducing the MVCFactory service in the <link
      linkend="concepts-container">component's DI container</link>. The
      MVCFactory object implements the <link
      xlink:href="https://en.wikipedia.org/wiki/Factory_method_pattern">Factory
      method pattern</link> which means it can create instances of our MVC
      objects: controllers, models, views and tables.</para>

      <important>
        <para>Each MVCFactory object instance can only create MVC objects for
        a <emphasis role="bold">specific</emphasis> component! This is in
        stark contrast with the static calls in Joomla 3 which could create an
        MVC object for just about any component.</para>

        <para>This is actually a good thing! It is implementing the
        fundamental computer science principle called <link
        xlink:href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation
        of Concerns</link>. Put another way, if I get the MVCFactory object
        for <code>com_example</code> I know that it can create any MVC object
        I need for <code>com_example</code> and only that components. It won't
        be “polluted” by any other component. Every time I call an MVCFactory
        method <emphasis role="bold">I AM 100% CONFIDENT</emphasis> I am
        getting the object I asked for and expected, not something potentially
        random I have no way of checking. Therefore, the MVCFactory object
        solves the single biggest source of frustration in Joomla component
        development. Hallelujah!</para>
      </important>

      <para>When you are writing code in a Controller or Model class you can
      get your own component's MVCFactory instance using the
      <code>$this-&gt;getMVCFactory()</code> method.</para>

      <para>If you are outside a component — a module, plugin, template or a
      different component — you can <emphasis>still</emphasis> get the
      MVCFactory of any installed and enabled component on the site as we saw
      in <link linkend="com-lifetime">the lifetime of a
      component</link>:</para>

      <programlisting language="php">$comContentMVCFactory = \Joomla\CMS\Factory::getApplication()
  -&gt;bootComponent('com_content')
  -&gt;getMVCFactory();</programlisting>

      <tip>
        <para>Before trying to boot a component you are supposed to check the
        component is installed <emphasis>and</emphasis> enabled. You can do
        that very simply, e.g. for <code>com_content</code>, with this
        code</para>

        <programlisting language="php">\Joomla\CMS\Component\ComponentHelper::isEnabled('com_content')</programlisting>
      </tip>

      <para>The MVCFactory has four public methods corresponding to the MVC
      objects we can create:</para>

      <variablelist>
        <varlistentry>
          <term>createController</term>

          <listitem>
            <para>Loads and creates a controller object.</para>

            <programlisting language="php">$myController = $this-&gt;getMVCFactory()
  -&gt;createController('Item', 'Administrator');</programlisting>

            <para>The first argument is the name of the controller. The second
            argument is the application type (<code>Site</code>,
            <code>Administrator</code>, or <code>Api</code>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>createModel</term>

          <listitem>
            <para>Loads and creates a model object.</para>

            <programlisting language="php">$myModel = $this-&gt;getMVCFactory()
  -&gt;createModel('Item', 'Administrator');</programlisting>

            <para>The first argument is the name of the model. The second
            argument is the application type (<code>Site</code>,
            <code>Administrator</code>, or <code>Api</code>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>createView</term>

          <listitem>
            <para>Loads and creates a view object.</para>

            <programlisting language="php">$myView = $this-&gt;getMVCFactory()
  -&gt;createView('Item', 'Administrator', 'Html');</programlisting>

            <para>The first argument is the name of the view. The second
            argument is the application type (<code>Site</code>,
            <code>Administrator</code>, or <code>Api</code>). The third
            argument is the view type which corresponds to the
            <parameter>format</parameter> URL parameter.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>createTable</term>

          <listitem>
            <para>Loads and creates a table object.</para>

            <programlisting language="php">$myTable = $this-&gt;getMVCFactory()
  -&gt;createTable('Item', 'Administrator');</programlisting>

            <para>The first argument is the name of the table. The second
            argument is the application type (<code>Site</code>,
            <code>Administrator</code>, or <code>Api</code>).</para>

            <warning>
              <para>Joomla table classes are only defined in the backend
              (<code>Administrator</code>) of your component. Therefore your
              second argument MUST always be
              <code>'Administrator'</code>.</para>

              <para>While you could conceivably define table classes in the
              site or api parts of your component it's not recommended and you
              should not expect Joomla's core code to be able to find them.
              Think of that second argument as a “forwards compatibility”
              provision, in case Joomla ever fully supports creating tables in
              the site or api parts of your component.</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead>MVCFactory and Dependency Injection</bridgehead>

      <para>The MVCFactory also performs a modicum of dependency injection. It
      inspects each created MVC object and checks which interfaces it
      implements. Depending on which interfaces are implemented some basic
      objects (form factory, dispatcher, router, cache controller, database
      object) are taken from the corresponding services in the component's DI
      container and injected into the MVC object.</para>

      <para>If you want to inject additional services you will have to extend
      the MVCFactory service in your component's service provider using a
      custom MVCFactory wrapper. When registering the service extension in
      your component's <link linkend="com-services">service provider</link>
      you can push your custom service to the MVCFactory wrapper and use it in
      the overridden methods of the wrapper. We will see an example of that
      <link linkend="com-models-push-service-joomla">pushing a custom service
      into a Model</link> later in this book.</para>

      <para>While this sounds like a bit of a chore, it is actually a very
      clean architecture. If you decide to make a change in your service's
      initialisation — or swap it out with a completely different
      implementation altogether — you can do that trivially by changing one
      line of code in your service provider. No more hunting down all over
      your codebase for that elusive reference to the service you are using.
      This is just another way Dependency Injection helps you write more
      sustainable code.</para>
    </section>

    <section xml:id="com-models">
      <title>Models</title>

      <para>The bulk of the implementation logic for Joomla 4 MVC models is
      the same as in Joomla 3 MVC.</para>

      <para>The Model classes extend from one of the base Joomla MVC Model
      super-classes:</para>

      <variablelist>
        <varlistentry>
          <term>Joomla\CMS\MVC\Model\BaseModel</term>

          <listitem>
            <para>The most basic model you can get. It does not connect to a
            database and does not support form. This is the kind of model you
            may need to use if you have a static view in your component (e.g.
            a control panel not implemented with a core <link
            linkend="com-dashboard">Dashboard</link>), if your model deals
            with data outside of the database (e.g. processing images, talking
            to a third party API over HTTP, converting files, etc) or if it
            uses an external or third party library (e.g. in Akeeba Backup the
            BackupModel uses our Akeeba Engine backup engine library).</para>

            <para>The basic service it provide is model state management using
            the <code>getState</code>, <code>setState</code> and
            <code>populateState</code> methods.</para>

            <tip>
              <para>In a proper MVC implementation the only way the Controller
              would “talk” to a Model is by setting its state and then reading
              either the return value of the method it called or inspecting
              the Model's state.</para>

              <para>In Joomla MVC the model state is a weird beast. It is
              ‘normally’ set by reading it from the session and overriding it
              from the request parameters using the application's
              <code>getUserStateFromRequest</code> method.</para>

              <para>While this is mostly okay for simple administrator pages
              listing and editing records you may find yourself in situations
              where you need to “talk” to the model from the Controller.
              Instead of passing this information around as HTTP GET/POST
              parameters — which can be inspected and
              <emphasis>overridden</emphasis> by a curious or malicious user —
              I urge you to instead override the <code>display</code> method
              of your Controller and set the Model's state after instantiating
              it. This is something you will not see anywhere in the Joomla
              core code but something you SHOULD be doing in your more complex
              components to avoid embarrassing and easily preventable security
              vulnerabilities.</para>

              <para>Speaking of which, <emphasis>always</emphasis> validate
              the data type and values of your model state in your code.
              Writing secure code requires you to adopt a “trust no-one”
              stance against any data which is not hard-coded into your
              extension's code! Do not assume that the data will be safe
              because (you think that) only a Super User can access a specific
              view. First of all, your assumption may be wrong. Moreover, your
              Model may be used outside the View you have in mind, even by
              third party components, plugins and modules integrating with
              your extension. Trust no-one, not even your own
              assumptions!</para>
            </tip>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Joomla\CMS\MVC\Model\BaseDatabaseModel</term>

          <listitem>
            <para>This is an extension to BaseModel primarily adding database
            support. You can get the applicable database object with
            <code>$this-&gt;getDbo()</code> (Joomla 4.0 or later 4.x version)
            or <code>$this-&gt;getDatabase()</code> (Joomla 4.2 and later
            versions, including 5.0 and later).</para>

            <para>Beyond that, it lets you dispatch events using the global
            Event Dispatcher you get with
            <code>$this-&gt;getDispatcher()</code> (Joomla 4.2 and later), get
            the Joomla user object of the currently logged in user with
            <code>$this-&gt;getCurrentUser()</code> (Joomla 4.2 and later),
            and get the CacheControllerFactory to talk to Joomla's cache with
            <code>$this-&gt;getCacheControllerFactory()</code> (Joomla 4.2 and
            later).</para>

            <para>This is the most used type of model super-class, either
            having your models directly extend it or indirectly extend it by
            using one of its descendant classes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Joomla\CMS\MVC\Model\FormModel</term>

          <listitem>
            <para>This is an extension to the BaseDatabaseModel which
            additionally implements Form handling.</para>

            <important>
              <para>This IS NOT the class you want to extend in pages which
              edit existing or create new records! What you are looking for in
              this case is Joomla\CMS\MVC\Model\AdminModel (yes, even in the
              frontend!).</para>
            </important>

            <para>This is the kind of Model you are going to use on pages
            which render a Form using an XML file for collecting information
            from the user BUT NOT for the purpose of editing or creating a
            record.</para>

            <para>A practical example of this is the Joomla Global
            Configuration page's model
            (<code>Joomla\Component\Config\Administrator\Model\ApplicationModel</code>)
            which does render an XML form with the Global Configuration
            option. Compare this to the article edit page's model
            (<code>Joomla\Component\Content\Administrator\Model\ArticleModel</code>)
            and the difference becomes evident right away!</para>

            <para>In your components you might want to use this type of Model
            in custom configuration pages. For example, you may have a
            component which post new articles automatically on social media.
            You may want to create different configurations for Facebook,
            Twitter, Reddit and whatnot. The page managing each of these
            configurations, each one using its own XML form file, would very
            likely use a Model class extending from <code>FormModel</code>
            instead of <code>AdminModel</code>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Joomla\CMS\MVC\Model\AdminModel</term>

          <listitem>
            <para>This is an extension to the <code>FormModel</code> which is
            designed specifically for creating new and editing existing
            records.</para>

            <para>What is the difference? Whereas <code>FormModel</code> is
            made to deal with the collection of arbitrary data, the
            <code>AdminModel</code> is made to create and edit records having
            the same data shape, defined in a database table. As a result, it
            works together with a <link linkend="com-tables">Table
            object</link>. Most of its methods will be talking to the Table
            object.</para>

            <para>It also supports automatic integration with content plugins
            and implements the methods you need to save new/existing records,
            reorder records, change record associations, batch process
            records, check-in and check-out records to the database, change
            the publish / trash state, and permanently delete records. Yup,
            this type of Model basically handles nearly everything you need to
            manage records in the backend of a site
            <emphasis>except</emphasis> listing records.</para>

            <note>
              <para>I had personally found it extremely confusing that the
              <code>AdminModel</code> (and the corresponding
              <code>FormController</code>) is responsible for handling all the
              actions you see available in the toolbar of a records list page.
              When you think about architecture it does make sense. When you
              are new to Joomla you might wonder why this is not handled by
              <code>ListModel</code> (and its corresponding
              <code>AdminController</code>). This is unfortunately a case of
              “you do this just because”, not a case of using what you'd
              intuitively think is the right thing to use. I know,
              right?!</para>

              <para>You may also get confused by the fact that an
              AdminController has a ListModel whereas a FormController has an
              AdminModel. It looks like someone had a stroke trying to name
              things.</para>

              <para>Thankfully, no, nobody had a stroke — the weird naming
              comes from the fact that when forms were introduced in Joomla
              1.6 we had to maintain backwards compatibility to Joomla 1.5,
              thereby causing a class naming mayhem. You know what are the two
              hardest things in software development? Handling dates, managing
              backwards compatibility and off-by-one errors!</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Joomla\CMS\MVC\Model\ItemModel</term>

          <listitem>
            <para>This is an extension of the BaseDatabaseModel, designed to
            <emphasis>display</emphasis> a single record in the
            frontend.</para>

            <para>This is something you will use probably a lot in the
            frontend of your application when you want to show a single record
            which cannot be edited. Unlike the FormModel and the AdminModel,
            this Model class does not have any kind of management code for the
            records. It just displays them and that's it.</para>

            <tip>
              <para>Practically speaking, you might just end up extending your
              frontend Model from your backend Model which in turn extends
              from Joomla's AdminModel if you need to provide any kind of
              frontend administration of your component. There is no point
              creating two models to talk to the same data, one just to show
              it and one just to modify it. It also makes no sense to have
              your frontend Model extend from AdminModel and duplicate your
              code (WET code) when you can simply extend your backend model
              and refrain from repeating yourself (DRY code).</para>
            </tip>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Joomla\CMS\MVC\Model\ListModel</term>

          <listitem>
            <para>This class extends from the BaseDatabaseModel and has the
            ability to manage forms (you need them for Search Tools a.k.a.
            list filters) and, crucially, to provide pagination-aware list of
            records from a database table.</para>

            <para>You know how the main Joomla backend user interface pattern
            is a list of records? Yup, this is the Model which implements
            it.</para>

            <tip>
              <para>In the frontend of your component you will very frequently
              find yourself needing to list a bunch of items in
              pagination-aware lists. The traditional Joomla code pattern was
              to create a frontend Model which extended from BaseDatabaseModel
              and have the same code to list items copied over from the
              backend.</para>

              <para>Don't do that. It's WET code and I've already mentioned
              that it's the source of many a bug.</para>

              <para>What you will practically find yourself doing is extending
              the frontend Model from the backend Model. Unlike Joomla 3, this
              is now possible!</para>

              <para>You need to be acutely aware, though, that you will need
              to override the <code>populateState</code> method in the
              frontend model. By default, this method will accept any kind of
              user input for filtering the list of records which could indeed
              be used by a malicious user to display items they are not
              supposed to access!</para>

              <para>An even better approach is what I hinted to earlier.
              Override the <code>display</code> method of your Controller. In
              there, first do a <code>getState</code> on your model (to run
              the <code>populateState</code> and be done with it), then
              explicitly set the Model state using its <code>setState</code>
              method before passing it to your View object. When you do that,
              the state set by your Controller's code overrides whatever
              <code>populateState</code> did, thereby mitigating any security
              risks.</para>
            </tip>
          </listitem>
        </varlistentry>
      </variablelist>

      <section xml:id="com-models-interfaces-traits">
        <title>Interfaces and Traits</title>

        <para>In Joomla 3 each Model type tried to do everything under the sun
        and even implement features which might have nothing to do with your
        component, like tags and versioning.</para>

        <para>In Joomla 4 and later versions the default Model classes don't
        do any of that. That's a good thing because it promotes the computer
        science principle called Separation of Concerns. If you need
        additional features you will be doing a bit of <emphasis>object
        composition</emphasis>.</para>

        <para>For those with a Computer Science background, you may wonder how
        you can do object composition in a language like PHP which, unlike C
        for example, does not allow classes to inherit (extend) from multiple
        classes. The answer is by using Traits provided by Joomla.</para>

        <variablelist>
          <varlistentry>
            <term>\Joomla\CMS\Versioning\VersionableModelTrait</term>

            <listitem>
              <para>Implements support for Versions (record history).</para>

              <para>Only applicable to models extending from
              <code>AdminModel</code>. This requires the <guilabel>Behaviour -
              Versionable</guilabel> plugin to be published. The corresponding
              Table must implement the
              <code>\Joomla\CMS\Versioning\VersionableTableInterface</code>
              interface and the corresponding Controller must use the
              <code>\Joomla\CMS\Versioning\VersionableControllerTrait</code>
              trait.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>\Joomla\CMS\MVC\Model\WorkflowBehaviorTrait</term>

            <listitem>
              <para>Implements support for Workflows (prescribed steps for
              state changes in records).</para>

              <para>Only applicable to models extending from
              <code>AdminModel</code>. The model must implement the
              <code>\Joomla\CMS\MVC\Model\WorkflowModelInterface</code>
              interface.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="com-models-push-service-joomla">
        <title>Pushing services to the Model: the Joomla Way</title>

        <note>
          <para>This way only applies to Joomla 4.3 and later. If you want
          your component to support earlier Joomla versions you will have to
          use the alternative method outlined towards the end of this
          section.</para>
        </note>

        <para>TODO — This section is pending the submission and acceptance of
        a Pull Request to the Joomla Project.</para>
      </section>

      <section xml:id="com-models-push-service-alt">
        <title>Pushing services to the Model: an alternative</title>

        <para>While Joomla 4.3 and later allows you to push services into the
        Model using an MVCFactory wrapper which extends the MVC service,
        necessary parts of this architecture did not exist in previous Joomla
        versions. We will have to use a slightly less “architecturally clean”
        solution.</para>

        <para>We will <emphasis role="bold">pull</emphasis> the custom service
        <emphasis role="bold">from</emphasis> the component's DIC.</para>

        <para>First, you need to make sure that you register a service
        provider in <link linkend="com-services">your component's service
        provider</link> implementation:</para>

        <programlisting language="php">$container-&gt;set(
    \Acme\Example\Administrator\Service\FacebookPublish::class,
    function (Container $container) {
        return new \Acme\Example\Administrator\Service\FacebookPublish();
    }
);</programlisting>

        <para>Then, you need to modify your <link
        linkend="com-extension">component's extension class section</link> as
        we saw on that section's “Getting access to the component's DIC
        anytime, anywhere” to be able to statically return the component's DI
        Container anytime, anywhere:</para>

        <programlisting language="php">	protected static $dic;

    public function boot(ContainerInterface $container)
    {
        self::$dic = $container;
    }

    public static function getContainer()
    {
        if (empty(self::$dic))
        {
            Factory::getApplication()
                   -&gt;bootComponent('com_example');
        }

        return self::$dic;
    }</programlisting>

        <para>Now your Model can simply pull the service from the Component's
        DIC in its constructor:</para>

        <programlisting language="php">&lt;?php

namespace Acme\Example\Administrator\Model;

use Acme\Example\Administrator\Extension\ExampleComponent;
use Acme\Example\Administrator\Service\FacebookPublish;
use Joomla\CMS\Form\FormFactoryInterface;
use Joomla\CMS\MVC\Factory\MVCFactoryInterface;
use Joomla\CMS\MVC\Model\AdminModel;

class ItemModel extends AdminModel
{
    private $fbPublish;

    public function __construct($config = [], MVCFactoryInterface $factory = null,
                                FormFactoryInterface $formFactory = null)
    {
        parent::__construct($config, $factory, $formFactory);

        $exampleDIC      = ExampleComponent::getContainer();
        $this-&gt;fbPublish = $exampleDIC-&gt;get(FacebookPublish::class);
    }

    protected function getFacebookPublish(): FacebookPublish
    {
        return $this-&gt;fbPublish;
    }

    // The rest of your model's code goes here…
}</programlisting>

        <para>For completeness' sake, here are there are two (minor) downsides
        to this approach:</para>

        <itemizedlist>
          <listitem>
            <para>The Model now has a direct hard dependency on the
            component's extension class. For real world use inside Joomla this
            is not a big deal; the only recommended way to create instances of
            a component's Models is through its MVCFactory object which
            necessarily goes through the component's extension object. If you
            are writing Unit Tests, though, you can no longer isolate the
            Model. You will need to inject a dependency injection container
            with your custom service in the component's extension
            class.</para>
          </listitem>

          <listitem>
            <para>The extension class has a static method to fetch the DIC. If
            this is not already set up it will try to go through the global
            application object to boot the component. If you are writing Unit
            Tests this is a problem, hence why I said that you need to inject
            a DIC to your component's extension class.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="com-controllers">
      <title>Controllers</title>

      <para>The bulk of the implementation logic for Joomla 4 MVC Controllers
      is the same as in Joomla 3 MVC.</para>

      <para>The logic is that most views are displayed using the component's
      <code>DisplayController</code> which extends from Joomla's
      <code>Joomla\CMS\MVC\Controller\BaseController</code>. You only write
      custom controllers when there's an action needed or when you need access
      to a Form object.</para>

      <tip>
        <para>The kind of MVC practiced by Joomla and described above is a bit
        “dirty”; all views share a common DisplayController for displaying.
        This is fine with Joomla's one-trick-pony components, only able to
        display one kind of information.</para>

        <para>When you have something more complex this may not be at all
        convenient. For example, a document management system might need
        separate views to display nested categories, available items
        (including the actual <emphasis>downloading</emphasis> part!) and
        uploading items, as well as viewing, adding and managing comments per
        document. In these cases it's typically much more efficient to have a
        separate controller per view. In components like that each view
        consists of a Controller, Model and View class (an MVC triad) which is
        more in line with how the normative MVC coding pattern is meant to
        work. This is perfectly possible in Joomla <emphasis>as long as you
        have a custom Dispatcher</emphasis>. You can see how I am doing that
        <link
        xlink:href="https://github.com/akeeba/release-system/blob/development/component/backend/src/Dispatcher/Dispatcher.php">in
        the Dispatcher of Akeeba Release System</link>, the software downloads
        management software used by Joomla's official Downloads site.</para>
      </tip>

      <para>The Controller classes extend from one of the base Joomla MVC
      Controller super-classes:</para>

      <variablelist>
        <varlistentry>
          <term>Joomla\CMS\MVC\Controller\BaseController</term>

          <listitem>
            <para>The most basic controller you can get. It is mainly used to
            power the <code>DisplayController</code> of the component or
            whenever you want to create custom controllers to display stuff
            and perform non-administrative actions (e.g. in the
            frontend).</para>

            <warning>
              <para>Heads up! In Joomla 3 the default display controller was
              in the root of the component as the file
              <filename>controller.php</filename> e.g.
              <filename>administrator/components/com_example/controller.php</filename>.
              This is no longer the case in Joomla 4 and later. All
              controllers are under the <filename>src/Controller</filename>
              folder and the default controller is named
              <code>DisplayController</code> which means that in the above
              example it would be located in
              <filename>administrator/components/com_example/srs/Controller/DisplayController.php</filename>.</para>

              <para>In Joomla 4 and later the <code>DisplayController</code>
              is mostly empty except for a line like this:</para>

              <programlisting language="php">protected $default_view = 'foobar';</programlisting>

              <para>This is the name of the “default view”. That's the view
              which will be displayed if the <parameter>view</parameter> URL
              parameter is not provided in the request.</para>
            </warning>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\Controller\AdminController</term>

          <listitem>
            <para>This is an extension to BaseController. It is meant for
            displaying list views in the backend of your site, e.g. a list of
            articles.</para>

            <tip>
              <para>This is the controller you will be typically using for
              controllers whose name is <emphasis
              role="bold">plural</emphasis> such as
              <code>\Acme\Example\Administrator\Controller\ItemsController</code>.
              Since this is the Items controller and “items” is plural it
              gives us a hint that it will be displaying multiple items which,
              in the Joomla backend, is very likely to be a list.</para>

              <para>A mnemonic way to remember this is PASiFIC (yes, with the
              misspelling and all) "Plural Admin Singular Form Identifies the
              Controller".</para>
            </tip>

            <para>It also handles <emphasis role="bold">some</emphasis> of the
            admin tasks you will have to perform on records in a Joomla list
            view: publish, unpulish, archive, trash, report, orderup,
            orderdown, delete, reorder, saveorder, checkin, checkout,
            saveOrderAjax and runTransition. Everything else has to be handled
            by a singular named Controller which extends FormController. Yes,
            that's confusing and yes, it's the source of many bugs — but
            that's the same as Joomla 3 and earlier so at least it's
            <emphasis>consistently confusing</emphasis>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\Controller\FormController</term>

          <listitem>
            <para>This is an extension to the BaseController which
            additionally implements Form handling. This is meant to be used in
            views which add or edit a database record. Additionally, it will
            be used in views which handle an XML Form e.g. a configuration
            page.</para>

            <tip>
              <para>This is the controller you will be typically using for
              controllers whose name is <emphasis
              role="bold">singular</emphasis> such as
              <code>\Acme\Example\Administrator\Controller\ItemController</code>.
              Since this is the Item controller and “item” is singular it
              gives us a hint that it will be displaying a single item which,
              in the Joomla backend, is very likely to be an add / edit record
              page.</para>

              <para>In the frontend of the site you may have <emphasis
              role="bold">two</emphasis> controllers for the same data type.
              One DisplayController extending from BaseController to display
              the item and one singular name controller extending from
              FormController to add or edit an item. It
              <emphasis>is</emphasis> possible to have a single controller,
              extending from FormController. You see, FormController itself
              extends from BaseController which has the display method which
              is used to display stuff, i.e. it already contains the
              functionality of the typical DisplayController.</para>
            </tip>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\Controller\ApiController</term>

          <listitem>
            <para>This is a very special kind of controller which is only used
            in the <link linkend="com-api">JSON API application part of your
            component</link> e.g. the code under
            <filename>api/components/com_example</filename>.</para>

            <para>This type of controller does not have a direct equivalent in
            the other controllers. It can do everything. Produce a list of
            records, return a single record, create a new record and modify or
            delete an existing record.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <section xml:id="com-controllers-basic-services">
        <title>Basic services in your Controller</title>

        <para>A Controller object created by Joomla has a few basic services.
        In the olden days before Joomla 4 we had to use static methods in
        <code>\Joomla\CMS\Factory</code> (formerly <code>JFactory</code>) or
        the base MVC objects themselves to get access to these services. You
        are no longer supposed to do that, you are supposed to use the
        services provided in the Controller object itself.</para>

        <bridgehead>Application</bridgehead>

        <para>In Joomla 3 and earlier we would get the currently active
        application object through
        <code>\Joomla\CMS\Factory::getApplication()</code>. Do NOT do
        that.</para>

        <para>In Joomla 4 and later you can get the currently active
        application object through <code>$this-&gt;app</code>.</para>

        <para>Please remember that the application you are getting is not
        necessarily a <code>SiteApplication</code> or
        <code>AdministratorApplication</code>. It may very well be an
        <code>ApiApplication</code> (JSON API), a
        <code>ConsoleApplication</code> (Joomla CLI app) or even a custom
        application extending from
        <code>\Joomla\CMS\Application\CMSApplication</code>.</para>

        <bridgehead>Dispatcher</bridgehead>

        <para>In Joomla 3 and earlier you'd run plugin events by doing
        something like this:</para>

        <programlisting language="php">$results = \Joomla\CMS\Factory::getApplication()
  -&gt;triggerEvent('onSomething', [$param1, $param2]);</programlisting>

        <para>In Joomla 4 and later there are two ways to call plugin
        events.</para>

        <para>The first method is the legacy method, going through the
        application's <code>triggerEvent</code> method, which is discouraged
        and will eventually go away.</para>

        <programlisting language="php">$results = $this-&gt;app-&gt;triggerEvent('onSomething', [$param1, $param2]);</programlisting>

        <para>The second and recommended method is going through the Joomla
        events dispatcher and using real events.</para>

        <programlisting language="php">$event = \Joomla\CMS\Event\GenericEvent::create('onSomething', [$param1, $param2]);
$this-&gt;getDispatcher()-&gt;dispatch($event-&gt;getName(), $event);
$results = $event-&gt;getArgument('result', []);</programlisting>

        <para>While this looks a bit more complicated it has some
        benefits.</para>

        <para>Using Events to access plugins means that you get access to a
        <link linkend="plg-concrete-events">concrete event object</link>. All
        core Joomla events will correspond to concrete event objects in Joomla
        5.0, meaning that you will be able to add typehinting and have your
        IDE (e.g. phpStorm, Visual Studio Code, NetBeans, Eclipse, ...)
        auto-complete the argument names when manipulating an event.</para>

        <para>The real Events implemented in Joomla 4 and later, unlike plain
        old plugin handlers we had in Joomla 1.0 to 3.10, can prevent some of
        their arguments to be modified, prescribe exactly
        <emphasis>what</emphasis> can be modified and even allow plugins to
        stop the processing of an event when we reach a point that further
        processing is unnecessary. If you slowly move from just using custom
        event names to concrete event classes you can implement far more
        complex features in your code with much less code — believe me, I've
        been there and done that! Event handling is one of those fundamental
        things which you are <emphasis>really</emphasis> upset it's changed
        but once you start getting the idea of how the new system works you
        start wondering how you could have ever written software without
        it.</para>

        <bridgehead>Input</bridgehead>

        <para>Back in the olden days we'd get the user's input by doing one of
        these (the more of these you remember the older you are — some date
        back to the early 00s!):</para>

        <programlisting language="php">// Joomla 1.0
$foo = \JRequest::getCmd('foo');
// Joomla 1.5
$input = new \Joomla\CMS\Input\Input();
$foo = $input-&gt;getCmd('foo');
// Joomla 1.6
$foo = Joomla\CMS\Factory::getApplication()-&gt;input-&gt;getCmd('foo');</programlisting>

        <para>This had always been a bad idea because our Controller had to
        <emphasis>know</emphasis> about the global application object and its
        request variables. This meant, for example, that we could not reuse
        our component to display a view <link linkend="com-hmvc">using
        HMVC</link>.</para>

        <para>Since Joomla 3.0 the Controller object has an <code>input</code>
        property which holds its own <code>\Joomla\CMS\Input\Input</code>
        object. In Joomla 3 this was typically just the application's input
        object unless you were manually constructing a controller (with a lot
        of effort).</para>

        <para>In Joomla 4.0 and later the input property contains its own
        \Joomla\CMS\Input\Input object <emphasis>which comes from the DI
        Container of the component</emphasis>. Remember that when booting a
        component we get access to its <link linkend="com-extension">component
        extension object</link> which has access to the component's <link
        linkend="concepts-container">DI Container</link>. This of course means
        that we can add <link linkend="com-extension-dic-proxy">a method to
        that object to access the DI Container</link> and set a custom input
        object, thereby implementing HMVC very easily — something that Joomla
        core maintainers didn't think was possible with the core architecture
        a few years ago! This means that whenever we want to create a module
        which displays the same information an existing view of our component
        already does, albeit in a slightly different format, all we need to do
        is create a new view template or layout and use HMVC, without having
        to rewrite our business logic in the module. We can write less code to
        do more. That's awesome!</para>

        <para>That is (one of the many reasons) why you should
        <emphasis>always</emphasis> be accessing the input as
        <code>$this-&gt;input</code> in your controllers. Now you know.</para>

        <bridgehead>MVCFactory</bridgehead>

        <para>Back in Joomla 1.0 to 3.10 creating an MVC object such as a
        Model, View, Table, or even another Controller from inside our
        Controller required calling static methods in the base MVC objects or
        proxy methods in the controller, like so:</para>

        <programlisting language="php">$someController = \Joomla\CMS\MVC\Controller\BaseController::getInstance('Some');
$someModel = \Joomla\CMS\MVC\Model\BaseDatabaseModel::getInstance('Some', 'ExampleModel');
// or
$someModel = $this-&gt;createModel('Some', 'ExampleModel');
$someView = $this-&gt;createView('Some', 'ExampleView', 'Html');
$someTable = \Joomla\CMS\Table\Table::getInstance('Some', 'ExampleTable');</programlisting>

        <para>There are two things which strike us as suboptimal:</para>

        <itemizedlist>
          <listitem>
            <para>There is no consistency in how you create MVC objects. Some
            are static calls, some are method calls to proxy functions.</para>
          </listitem>

          <listitem>
            <para>There is no consistency in the arguments you provide.
            Creating a controller only needs its name (and requires the magic
            configuration array key <code>base_path</code> if you want to get
            a controller from a component other than the current one),
            creating anything else requires us to give it the prefix of the
            MVC class name (not just the component name).</para>
          </listitem>
        </itemizedlist>

        <para>This is what we'd call “sanity came here to die”.</para>

        <para>Joomla 3.10 introduced the MVCFactory for creating models, views
        and tables and Joomla 4.0 extended it by also letting it create
        controllers. See how easier and more consistent everything is
        now:</para>

        <programlisting language="php">// Only on Joomla 4.0 and later
$someController = $this-&gt;getMVCFactory()-&gt;createController('Some', 'Administrator');
// Joomla 3.10 and later
$someModel = $this-&gt;getMVCFactory()-&gt;createModel('Some', 'Administrator');
$someView = $this-&gt;getMVCFactory()-&gt;createView('Some', 'Administrator', 'Html');
$someTable = $this-&gt;getMVCFactory()-&gt;createTable('Some', 'Administrator');
// Inside the Controller I can still do this (4.0 and later):
$someModel = $this-&gt;getModel('Some', 'Administrator');
$someView = $this-&gt;getView('Some', 'Administrator', 'Html');</programlisting>

        <para>First of all, we see that creating MVC objects is now very
        consistent and easier.</para>

        <para>Second, we notice that the <code>$prefix</code> argument is no
        longer something component-specific (such as
        <code>ExampleModel</code>) but simply the side of the application
        (Site, Administrator or Api) that we want to get the MVC object
        from.</para>

        <note>
          <para>Tables are only available in the Administrator side of the
          application. While you can theoretically define different Table
          classes in the frontend (Site) or JSON API (Api) side it's not a
          good idea as you will very likely run into issues where the “wrong”
          table class is being used. As a result, it's advisable to always
          call <code>createTable</code> with two parameters and set the second
          parameter to <option>Administrator</option>).</para>
        </note>

        <para>Legacy Joomla 3 components still work despite the apparent
        backwards compatibility (b/c) break in the <code>getModel</code> and
        <code>getView</code> methods. Why is that? Well, it's because Joomla 4
        uses the <code>\Joomla\CMS\MVC\Factory\LegacyFactory</code> instead of
        <code>\Joomla\CMS\MVC\Factory\MVCFactory</code> for these components.
        The LegacyFactory is aware of the b/c break and acts accordingly so
        you, the extensions developer, do not suffer. This is possible because
        each component has its own DI Container. So that's another way how
        using a DI Container allowed Joomla to create an updated, richer MVC
        API without breaking backwards compatibility with Joomla 3 — at least
        until Joomla 6.0. Neat, huh?</para>

        <para>As a developer, you should remember this when you are inside a
        Controller writing code:</para>

        <itemizedlist>
          <listitem>
            <para>If you want to get a Model or View use the controller's
            <code>getModel</code> and <code>getView</code> methods.</para>
          </listitem>

          <listitem>
            <para>If you want to get another <code>Controller</code> or a
            <code>Table</code> do not instantiate them directly! Always go
            through the MVCFactory.</para>
          </listitem>

          <listitem>
            <para>The second argument to all these methods is the application
            side you are getting an object from. Leave it empty to use the
            <emphasis>current</emphasis> application side or pass an explicit
            value. If you leave it empty keep in mind that, for example, your
            backend controller may be running in the frontend. In this case,
            do you <emphasis>really</emphasis> want to get the frontend
            model?</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="com-views">
      <title>Views</title>

      <para>Views, in Joomla 3, referred to two different things: the View
      classes and the view templates. In fact, the view templates were placed
      in a <code>tmpl</code> folder under each View's folder which was a bad
      idea: you had the output rendering in a subdirectory of the business
      logic, making it hard to discern when one ends and the other
      begins.</para>

      <para>In Joomla 4 there is a separation of these two very different
      types of code. The view classes (which we will call Views) are placed in
      the <filename>src/View</filename> folder with one subdirectory for each
      view in <code>Uppercasefirst</code> format. The view templates are
      placed in the <filename>tmpl</filename> folder in your component's
      folder with one subdirectory for each view they correspond to in
      <code>lowercase</code> format.</para>

      <warning>
        <para><emphasis role="bold">Folder and file name case
        matters</emphasis>. You may not notice it when developing on a Windows
        or macOS machine with a case-insensitive filesystem but you will
        <emphasis>definitely</emphasis> suffer if you mix it up when deploying
        your component on a Linux-based server where the filesystem is
        virtually guaranteed to be case-sensitive.</para>

        <para>Let's say you have a view which is called Foobar.</para>

        <para>Your HTML View class file path relative to your component's root
        MUST be <filename>src/View/Foobar/HtmlView.php</filename>. It can NOT
        be <filename>src/View/FooBar/HtmlView.php</filename> (mixed case in
        the subdirectory) or <filename>src/View/Foobar/HTMLVIEW.php</filename>
        (wrong case for the filename)!</para>

        <para>Your view <filename>default.php</filename> view template file
        path relative to your component's root MUST be
        <filename>tmpl/foobar/default.php</filename>. It cannot be
        <filename>tmpl/Foobar/default.php</filename> (wrong case for the
        subdirectory)!</para>

        <para>Knowing this will save you hours of “fun” hitting your head
        against a brick wall, wondering why it works on your computer but not
        on your server.</para>
      </warning>

      <para>The bulk of the implementation logic for Joomla 4 MVC Views is the
      same as in Joomla 3 MVC.</para>

      <para>The View classes extend from one of the base Joomla MVC View
      super-classes:</para>

      <variablelist>
        <varlistentry>
          <term>\Joomla\CMS\MVC\View\AbstractView</term>

          <listitem>
            <para>This is the base class all views extend from. You will have
            to implement the <code>display</code> method yourself.</para>

            <para>It is very rare that you are going to extend from this view.
            Typically, this is something you will do when you are rendering a
            non-HTML document, without using a view template file. Do note
            that if you are outputting JSON you may want to use
            <code>\Joomla\CMS\MVC\View\JsonView</code> instead.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\View\HtmlView</term>

          <listitem>
            <para>This is the most common view type, used whenever you want to
            display HTML output in the front- or backend.</para>

            <note>
              <para>Even though Joomla defines the
              <code>\Joomla\CMS\MVC\View\ListView</code> class for
              administrator list views and
              <code>\Joomla\CMS\MVC\View\FormView</code> for add/edit views,
              these view classes are no longer used in Joomla 4. Both types of
              pages use the HtmlView instead. As a result, the two more
              specialised view types will not be mentioned again in this
              book.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\View\JsonView</term>

          <listitem>
            <para>This view type is used to output a JSON document. You set
            its <code>_output</code> property and that's all there is to it.
            This is rarely used on its own.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\View\JsonApiView</term>

          <listitem>
            <para>This view type is used exclusively in the Api (JSON API)
            application. It's used to output data from the JSON API in JSON
            format (what else?).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\View\CategoriesView</term>

          <listitem>
            <para>This view type is used in the frontend (site) application to
            display a list of categories. You are supposed to use this if you
            are using Joomla's core categories in your component.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\View\CategoryView</term>

          <listitem>
            <para>This view type is used in the frontend (site) application to
            display a single category, typically with a list of its
            subcategories and items. You are supposed to use this if you are
            using Joomla's core categories in your component.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\MVC\View\CategoryFeedView</term>

          <listitem>
            <para>This view type is used in the frontend (site) application to
            display an RSS / Atom feed of a category's objects. You are
            supposed to use this if you are using Joomla's core categories in
            your component.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Since Joomla 4.2.0 you can use
      <code>$this-&gt;getCurrentUser()</code> in a view to get the Joomla User
      object for the currently logged in user.</para>

      <para>Since Joomla 4.0.0 you can get the Joomla event dispatcher with
      <code>$this-&gt;getDispatcher()</code> to run plugin events as explained
      <link linkend="com-controllers-basic-services">in the Controller
      documentation</link>.</para>
    </section>

    <section xml:id="com-tables">
      <title>Tables</title>

      <para>Tables, or rather Table classes, in Joomla's MVC are an
      abstraction to a row of an actual database table. They are used
      internally by Models to create new records, modify existing records and
      delete old records. It's not exactly an <link
      xlink:href="https://en.wikipedia.org/wiki/Active_record_pattern">Active
      Record</link> pattern as it does not really participate in the R (Read)
      of the <link
      xlink:href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</link>
      operations — Joomla's models query the database directly for listing
      multiple records and returning a single record. It also does not handle
      relationships. Like, at all.</para>

      <para>The logic of how Table classes work has not changed between Joomla
      3 and 4. They are namespaced and they have the familiar superclasses
      they extend from:</para>

      <variablelist>
        <varlistentry>
          <term>\Joomla\CMS\Table\Table</term>

          <listitem>
            <para>A plain old record in a database table.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\Joomla\CMS\Table\Nested</term>

          <listitem>
            <para>A record in a database table which supports <link
            xlink:href="https://en.wikipedia.org/wiki/Nested_set_model">Nested
            Sets</link> (think how categories work, where categories can be
            placed under other categories and so on).</para>

            <para>The table MUST have the following columns:</para>

            <itemizedlist>
              <listitem>
                <para><code>parent_id</code>. The primary key of the parent
                node. Provides adjacency list data for nodes.</para>
              </listitem>

              <listitem>
                <para><code>level</code>. The depth level of the node in the
                tree.</para>
              </listitem>

              <listitem>
                <para><code>lft</code>. The left value of the node for
                managing its placement in the nested sets tree.</para>
              </listitem>

              <listitem>
                <para><code>rgt</code>. The right value of the node for
                managing its placement in the nested sets tree.</para>
              </listitem>

              <listitem>
                <para><code>alias</code>. The alias of this node used to
                construct the full text path, forward-slash delimited.</para>
              </listitem>
            </itemizedlist>

            <note>
              <para>Nested Sets are very slow when you need to add, remove,
              and reorder records. It's not necessary to use a Nested table to
              create a nested structure. In some use cases where writing is
              very common and the number of items in each nested structure
              rather limited (e.g. nested comments) it may actually be easier
              to only store the parent ID of each node and calculate the tree
              structure in PHP code. The read performance is comparable within
              a few dozen milliseconds but the write performance can be over
              100 times(!!!) faster when you have more than a couple thousand
              records.</para>

              <para>On that note, do remember that Joomla uses a Nested table
              for the <database>#__assets</database> records. Everything that
              has its own permissions such as categories, articles, banners,
              contacts, extensions, custom data types you add with an asset
              ID, etc also has a record in that table. That's why as a site
              grows in size operations against these records become
              increasingly slow.</para>

              <para>Unfortunately, this cannot be (easily) solved in Joomla;
              nested assets are a cornerstone of Joomla access control since
              version 1.6. The only real solution would be using a graph
              database which is impractical; neither MySQL nor PostgreSQL, the
              two database server technologies supported by Joomla and widely
              found on commercial hosting, have graph features (they are
              relational databases a.k.a. <link
              xlink:href="https://en.wikipedia.org/wiki/Relational_database#RDBMS">RDBMS</link>).</para>

              <para>So, if you find yourself in a situation where you need
              nested sets but can't afford the performance hit after adding
              thousands or millions of records and calculating the tree in
              memory using PHP code is impractical (and cannot be cached in a
              sensible manner) ask yourself: am I actually developing for the
              right database server and platform? Not all software can be
              written for Joomla and MySQL / PostgreSQL and that's alright. We
              are software engineers; our job is to find the right tool for
              the job and use it in the most efficient way possible to make
              something new and functional.</para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The rest of this section is mostly tips and tricks for using
      Tables the way Joomla intended — and even more efficiently!</para>

      <section xml:id="com-tables-get-object">
        <title>Getting the table object</title>

        <para>As noted in the <link linkend="com-mvcfactory">MVCFactory</link>
        section, you are no longer meant to instantiate Table objects using
        static method calls. You are meant to go through MVCFactory's
        <code>createTable</code> method.</para>

        <para>In the olden days we'd do something like this:</para>

        <programlisting language="php">// Returns the Item table from com_example (ExampleTableItem)
$table = \Joomla\CMS\Table\Table::getInstance('Item', 'ExampleTable');</programlisting>

        <para>While this still works for old components written with the
        Joomla 3 MVC, it's part of the backwards compatibility with legacy
        component code and will eventually be removed. In fact, the
        <emphasis>only</emphasis> time you are supposed to use this in Joomla
        4 is when interfacing an old component which has not been migrated to
        the Joomla 4 architecture yet.</para>

        <para>For components based on the Joomla 4+ MVC this won't work at
        all! You need to go through the MVCFactory of the extension.</para>

        <para>If you are inside a Controller or Model and need to get a Table
        object instance for a Table class which belongs <emphasis>to your own
        component</emphasis> you must do:</para>

        <programlisting language="php">/**
 * Gets a NEW table object for the Item table in the Administrator section of the component, e.g.
 * \Acme\Example\Administrator\Table\ItemTable
 */
$table = $this-&gt;getMVCFactory()-&gt;createTable('Item', 'Administrator');</programlisting>

        <para>In any other case you will need to boot the component through
        the application object to get its MVCFactory to create the table
        instance. For example:</para>

        <programlisting language="php">// It's best to have the application object injected to your code instead of using this...
$app = \Joomla\CMS\Factory::getApplication();
// Get the table
$table = $app-&gt;bootComponent('com_example')
  -&gt;getMVCFactory()
  -&gt;createTable('Item', 'Administrator');</programlisting>

        <para>Going through the MVCFactory makes sure that the table is
        constructed correctly. Remember, as we saw <link
        linkend="com-models-push-service-joomla">in the Model section</link>,
        you can push custom services into any MVC object — including Tables —
        through a custom MVCFactory decorator. This means that the only
        forwards compatible method of getting a Table object which will always
        work is going through the MVCFactory of its component.</para>
      </section>

      <section xml:id="com-tables-check">
        <title>Customising the validation</title>

        <para>One of the many jobs of a Table object is to validate the data
        before it's written to the database. This is done in its
        <code>check()</code> method.</para>

        <para>You can override that method in your custom Table classes to add
        custom validation. At the very least you should validate the data type
        and that the data is within an accepted range of values. The latter is
        domain-specific, i.e. you need to know how your database table and
        component work to write that code. That's why Joomla doesn't offer
        much in the way of automatic data validation.</para>
      </section>

      <section xml:id="com-tables-events">
        <title>Using plugin events</title>

        <para>Table classes can call plugin events. For example, Joomla's
        default <code>Table::check()</code> implementation goes through the
        <code>onTableCheck</code> plugin event to let plugins perform
        additional data validation before data is written to the
        database.</para>

        <para>The Table superclasses offer a <code>getDispatcher()</code>
        method to get a reference to Joomla's Events Dispatcher object. As we
        noted in the <link
        linkend="com-controllers-basic-services">Controllers</link> section
        this is the preferred way to use plugins in Joomla 4 and
        beyond.</para>
      </section>

      <section xml:id="com-tables-docblocks">
        <title>Add type hints with phpDoc DocBlocks and @property</title>

        <para>The Table classes do NOT declare concrete public properties for
        most of the database table columns. Instead, they use implied public
        properties — and eventually the magic <code>__get()</code> and
        <code>__set()</code> PHP methods as PHP 9 will remove support for
        implied public properties in objects which do not extend directly from
        <code>\stdClass</code>.</para>

        <para>This means that when you get a Table object and type-hint it
        correctly, like the example below, your IDE will not offer any
        auto-completion suggestions or type hints for the database table
        columns supported by your table class.</para>

        <programlisting language="php">/** @var \Acme\Example\Administrator\Table\ItemTable **/
$table = $this-&gt;getMVCFactory()-&gt;createTable('Item', 'Administrator');</programlisting>

        <para>I find this annoying. The whole reason we're using an IDE is so
        we don't have to remember a large number of little things, like how
        the table columns are named in every table of every table the core CMS
        or our component is using.</para>

        <para>Luckily, this is trivial to fix.</para>

        <para>Given the following table definition:</para>

        <programlisting language="mysql">CREATE TABLE IF NOT EXISTS `#__example_items` (
    `id`          bigint(20) unsigned NOT NULL AUTO_INCREMENT,
    `catid`       bigint(20)          NOT NULL,
    `fromname`    varchar(255)        NOT NULL,
    `fromemail`   varchar(255)        NOT NULL DEFAULT '',
    `subject`     varchar(255)        NOT NULL DEFAULT '',
    `body`        mediumtext          NOT NULL,
    `enabled`     tinyint(3)          NOT NULL DEFAULT 1,
    `token`       char(32)                     DEFAULT NULL,
    `created_on`  datetime            NULL     DEFAULT NULL,
    `created_by`  bigint(20)          NOT NULL DEFAULT '0',
    `modified_on` datetime            NULL     DEFAULT NULL,
    `modified_by` bigint(20)          NOT NULL DEFAULT '0',
    `locked_on`   datetime            NULL     DEFAULT NULL,
    `locked_by`   bigint(20)          NOT NULL DEFAULT '0',
    PRIMARY KEY (`id`)
) ENGINE = InnoDB
  DEFAULT COLLATE = utf8mb4_unicode_ci;</programlisting>

        <para>You can add the following phpDoc DocBlock at the top of your
        class:</para>

        <programlisting language="php">/**
 * @property int    $id            The primary key
 * @property int    $catid         The category ID, foreign key to #__categories
 * @property string $fromname      Name of the sender
 * @property string $fromemail     Email address of the sender
 * @property string $subject       Subject line of this contact item
 * @property string $body          Body text of this contact item
 * @property int    $enabled       Is it published?
 * @property string $token         Reply token
 * @property string $created_on    Date and time the record was created
 * @property int    $created_by    ID of the user who created the record
 * @property string $modified_on   Date and time the record was last modified
 * @property int    $modified_by   ID of the user who last modified the record
 * @property string $locked_on     Date and time the record was locked
 * @property int    $locked_by     ID of the user who locked the record
 */</programlisting>

        <para>Now you get full auto-completion, type hinting and inline
        documentation for your table columns. You're welcome!</para>
      </section>

      <section xml:id="com-tables-relations">
        <title>Basic relation management with getters and setters</title>

        <para>As noted earlier in this section, Joomla does not really offer a
        full implementation of the Active Record pattern — at least, not yet.
        One of the biggest omissions is relationships.</para>

        <para>Let's say that we have a helpdesk ticket system. Each support
        ticket has one or more posts. Conversely, each post has exactly one
        ticket. Posts and tickets are database tables with corresponding Table
        classes. I actually wrote such a component and found myself too often
        having to get the ticket a post belongs to, usually many times within
        the same request. Sure I can instantiate a TicketTable object and have
        it load the data off the database but if I'm doing that several times
        in a request it's slow and unhelpful. So, how about we “upgrade” our
        PostTable to return our ticket object? It's quite easy, really!</para>

        <programlisting language="php">&lt;?php

use Acme\Example\Administrator\Table\TicketTable;

class PostTable extends \Joomla\CMS\Table\Table
{
    /**
     * Ticket this post belongs to
     *
     * @var   TicketTable|null
     */
    private $ticket;

    /**
     * Get the ticket this post belongs to
     *
     * @return  TicketTable|null
     */
    public function getTicket(): ?TicketTable
    {
        if (is_null($this-&gt;ticket))
        {
            $this-&gt;ticket = new TicketTable($this-&gt;getDbo(), $this-&gt;getDispatcher());

            if ($this-&gt;ticket-&gt;load($this-&gt;ticket_id) === false)
            {
                throw new RuntimeException('There is no such ticket');
            }
        }

        return $this-&gt;ticket;
    }

    /**
     * Set the ticket this post belongs to.
     *
     * @param   TicketTable|null  $ticket  The ticket to set. NULL to make ATS reload the ticket on the next getTicket()
     *                                     method call.
     * @param   bool              $force   True to reset $this-&gt;ticket_id to the $ticket ID (or NULL, if no ticket).
     *
     * @return  self
     */
    public function setTicket(?TicketTable $ticket, bool $force = false): self
    {
        $this-&gt;ticket = $ticket;

        if ($force)
        {
            $this-&gt;ticket_id = empty($ticket) ? null : $ticket-&gt;getId();

            return $this;
        }

        if (empty($ticket) &amp;&amp; $this-&gt;ticket-&gt;getId() != $this-&gt;ticket_id)
        {
            throw new InvalidArgumentException('Ticket ID does not correspond to the loaded post');
        }

        return $this;
    }

    /**
     * Remember to remove the loaded relationship when resetting the table.
     */
    public function reset()
    {
        $this-&gt;ticket = null;

        parent::reset();
    }
}</programlisting>

        <note>
          <para>I am instantiating the TicketTable directly because, in this
          case, I know I can safely do so. If my TicketTable had dependencies
          on other tables I should be going through the MVCFactory. I decided
          to keep it simple here because there's already a lot going
          on.</para>
        </note>

        <para>The idea can be broken down in the following steps:</para>

        <itemizedlist>
          <listitem>
            <para>Create a private property to hold our related object, in
            this case the ticket the post belongs to.</para>
          </listitem>

          <listitem>
            <para>Reset that property back to NULL in the <code>reset()</code>
            method.</para>
          </listitem>

          <listitem>
            <para>Create a setter which sets the relationship <emphasis>if and
            only if</emphasis> the TicketTable object we're passing matches
            the post table's <code>ticket_id</code> column value. The setter
            is optional; it makes it easier for us when creating both a new
            post and a new ticket i.e. when a client submits a new helpdesk
            item.</para>
          </listitem>

          <listitem>
            <para>Create a getter which returns the already saved relationship
            object. If none is specified, we load it from the database.</para>
          </listitem>
        </itemizedlist>

        <para>This is very naive, late-bound relationship handling (lazy
        loading) but it's better than nothing.</para>

        <para>If you'd like to do eager relationship loading (when loading a
        big list of posts) you'd have to implement it yourself. For starters,
        you'd need something like that in your PostTable:</para>

        <programlisting language="php">	/**
     * @param   self[]  $postTables
     */
    public function eagerLoad(array &amp;$postTables): void
    {
        // Get the unique ticket IDs
        $ticketIDs = array_map(
            function (PostTable $x) {
                return $x-&gt;ticket_id;
            },
            $postTables
        );
        $ticketIDs = array_unique($ticketIDs);

        // Get the raw ticket data, keyed by ticket ID
        $db = $this-&gt;getDbo();
        $query = $db-&gt;getQuery(true)
            -&gt;select('*')
            -&gt;from('#__example_tickets')
            -&gt;whereIn($db-&gt;quoteName('id'), $ticketIDs);
        $tickets = $db-&gt;setQuery($query)-&gt;loadObjectList('id') ?: [];

        // Convert the raw ticket data into TicketTable objects
        $tickets = array_map(
            function (object $rawData): TicketTable
            {
                $ticket = new TicketTable($this-&gt;getDbo(), $this-&gt;getDispatcher());
                $ticket-&gt;bind($rawData);

                return $ticket;
            },
            $tickets
        );

        // Set the TicketTable objects to each PostTable object
        foreach ($postTables as $postTable)
        {
            $postTable-&gt;setTicket($tickets[$postTable-&gt;ticket_id]);
        }
    }
</programlisting>

        <para>Now, whenever you write code which returns an array of PostTable
        objects just run the resulting through that method and it set the
        related TicketObject instances to each member of the array of
        PostTable objects.</para>

        <para>Why do eager loading? With eager loading you only need 2
        queries: one to get the list of posts data, one to get the list of
        tickets data. With lazy loading you'd need N + 1 database queries: one
        to get the list of posts data, one per post (N queries in total) to
        get each post's ticket data.</para>

        <para>Eager loading only makes sense if you are going to process a
        large number of records all at once and you are definitely going to
        need access to their related objects.</para>
      </section>

      <section xml:id="com-tables-assets">
        <title>Asset management</title>

        <para>In some cases you want your database records to have a special
        set of permissions which can override those set for the entire
        component in its Options. This is especially important if you are
        using the Joomla Categories, in which case your items may belong to a
        category, which belongs in another category, which belongs in another
        category… This cascading of permissions is made easy with Joomla's
        assets management.</para>

        <para>To enabled assets management in your table you need to have an
        <code>asset_id</code> column in your database table. This sets
        <code>$this-&gt;_trackAssets = true</code> when your table object is
        constructed (no need to do it manually).</para>

        <para>Moreover, you MAY have to override the
        _<code>getAssetParentId</code>, <code>_getAssetName</code> and
        <code>_getAssetTitle</code> methods if your items described by this
        table class belong in categories. Look at
        <code>\Joomla\CMS\Table\Content</code> to understand what is going
        on.</para>

        <para>Finally, your <code>bind()</code> method needs to be overwritten
        so you can call the <code>$this-&gt;setRules()</code> method against
        the raw, JSON-encoded permissions data stored in the database table.
        Saving rules is automatic; you don't have to handle it
        yourself.</para>
      </section>

      <section xml:id="com-tables-arrays-and-json">
        <title>Working with arrays and JSON data</title>

        <para>Sometimes you need to work with arrays of values or data which
        is stored as JSON but needs to be accessed as an object or array.
        Don't worry, this is possible with Joomla's Table class, albeit not
        immediately obvious.</para>

        <para>Let's say you want to work with array data in a column called
        <database>params</database>, stored in the database as a JSON-encoded
        string. You will need to think about three things:</para>

        <itemizedlist>
          <listitem>
            <para>Resetting a table. By default, Joomla uses the default value
            you have for the same named column in your database table. You
            want to change that to an empty array.</para>
          </listitem>

          <listitem>
            <para>Binding data. When Joomla loads a record and when we call
            the table object's <code>save()</code> method to create or modify
            a record, Joomla always calls the <code>bind()</code> method to
            set up the object's properties in way which makes sense for use in
            the code. In there we will need to convert our encoded field into
            an array.</para>
          </listitem>

          <listitem>
            <para>Storing data. The store() method needs the data in the
            record to be in a format which can be stored in the database table
            as-is. The plan here is to convert the array data to JSON before
            this method executes and convert out data back to array data right
            before this method returns.</para>
          </listitem>
        </itemizedlist>

        <programlisting language="php">class ItemTable extends \Joomla\CMS\Table\Table
{
    public function bind($src, $ignore = [])
    {
        $src           = (array) $src;
        $src['params'] = @json_decode($src['params']);

        return parent::bind($src, $ignore);
    }

    public function store($updateNulls = false)
    {
        $this-&gt;params = @json_decode($this-&gt;params ?? '{}', true) ?? [];

        $result = parent::store($updateNulls);

        $this-&gt;params = @json_encode($this-&gt;params) ?? '{}';

        return $result;
    }

    public function reset()
    {
        parent::reset();

        $this-&gt;params = [];
    }
}</programlisting>

        <para>Nothing stops you from using a
        <code>\Joomla\Registry\Registry</code> object instead of a plain
        array; in fact, it may be easier to manage. You may also have multiple
        fields in need of this kind of conversion.</para>

        <para>Another practical example is multi-select form fields, e.g.
        selecting one or more usergroups. The resulting array of integers can
        be easily converted to a comma-separated string for saving in the
        database.</para>
      </section>
    </section>

    <section xml:id="com-html">
      <title>HTML helper service</title>

      <para>Joomla has long provided a mechanism for creating your own HTML
      helper classes. These are meant to provide relatively short methods
      which return HTML snippets based on data which requires more than a line
      or two of PHP code to be processed and/or is called frequently enough
      throughout your component that it makes no sense having to the same
      thing over and over again. For example, you could have methods which
      return item associations, format dates, load a layout for presenting
      user information in backend grid views etc.</para>

      <para>Joomla 4 continues to offer this possibility and further enhances
      it. Your key take-aways are:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Joomla 4 HTML helpers are services
          registered through your extension class</emphasis> instead of pure
          static classes which had to be registered with
          <code>\Joomla\CMS\HTML\HTMLHelper::addIncludePath</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Joomla 4 HTML helpers have non-static
          methods</emphasis> whereas Joomla 3 HTML helpers had static
          methods.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">In Joomla 4 you can register whichever
          prefix you want</emphasis>, not necessarily the same as the name of
          the class(es) providing your HTML helper service(s).</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">You still call your HTML helpers through
          the <code>\Joomla\CMS\HTML\HTMLHelper::_()</code>
          method</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <bridgehead>How we did things in Joomla 3</bridgehead>

      <para>Back in Joomla 3 we'd create a class file in our
      <filename>helpers/html</filename> folder, e.g.
      <filename>administrator/components/helpers/html/example.php</filename>.
      It would contain a pure static class with a name starting with
      <code>JHtml</code>, e.g <code>JHtmlExample</code>. Here's a trivial
      example:</para>

      <programlisting language="php">&lt;?php

class JHtmlExample {
  public static function hello($who) {
    $who = htmlspecialchars($who);
    return "&lt;p&gt;Hello, {$who}!&lt;/p&gt;";
  }
}</programlisting>

      <para>Within our component the helper was automatically registered and
      we could use it like this:</para>

      <programlisting language="php">&lt;?php echo \Joomla\CMS\HTML\HTMLHelper::_('example.hello', 'world') ?&gt;</programlisting>

      <para>This would result in</para>

      <screen>&lt;p&gt;Hello, world!&lt;/p&gt;</screen>

      <para>Outside our component we'd have to remember to register this
      helper manually:</para>

      <programlisting language="php">\Joomla\CMS\HTML\HTMLHelper::addIncludePath(JPATH_ADMINISTRATOR . 
  '/components/com_example/helpers/html');</programlisting>

      <para>When we forgot to do that, e.g. in a module of ours? Hilarity
      ensued…</para>

      <para>This approach also had other problems. What if there are two
      helpers, one of ours and one of another component, using the same class
      name? PHP Fatal Error! What happens if we use a name for our helper
      which “shades” a name used by Joomla itself? We break things! What
      happens if the service we need to use is not available as a static
      method? Ugly workarounds! Generally speaking, it was a bad idea but,
      like most things in older versions of Joomla, was better than nothing
      which made it good enough.</para>

      <bridgehead>The way to do it in Joomla 4</bridgehead>

      <para>In Joomla 4 we will create a <emphasis>service</emphasis>. It
      sounds big and scary but... let me tell you a secret. We are just going
      to create a regular PHP class. It does not extend from anything, it does
      not have any special requirements. That's right, we are writing the
      simplest possible PHP class.</para>

      <programlisting language="php">&lt;?php
namespace Acme\Example\Administrator\Service\Html;

class Example {
  public function hello($who) {
    $who = htmlspecialchars($who);
    return "&lt;p&gt;Hello, {$who}!&lt;/p&gt;";
  }
}</programlisting>

      <para>Now we can instantiate it in our component's extension class's
      boot method.</para>

      <programlisting language="php">&lt;?php
namespace Acme\Example\Administrator\Extension;

use Acme\Example\Administrator\Service\Html\Example;

class Example extends MVCComponent implements BootableExtensionInterface {
    public function boot(ContainerInterface $container)
    {
        $this-&gt;getRegistry()-&gt;register('example', new Example());
    }
}</programlisting>

      <bridgehead>Pushing services</bridgehead>

      <para>In the Joomla 3 paradigm the HTML helper class was static, meaning
      that any services it needs would have to be fetched with static or
      otherwise global calls as well. For example, getting the database driver
      object would require doing <code>\Joomla\CMS\Factory::getDbo()</code>.
      In Joomla 4 this kind of static calls is deprecated. So, how do you do
      it?</para>

      <para>The trick is that you can push services using the HTML helper
      class's constructor. For example, pushing the database:</para>

      <para><programlisting language="php">&lt;?php
namespace Acme\Example\Administrator\Service\Html;

class Example {
  <emphasis role="bold">private $db;</emphasis>

  <emphasis role="bold">public function __construct(\Joomla\Database\DatabaseDriver $db) {
    $this-&gt;db = $db;
  }</emphasis>

  public function hello($who) {
    $who = htmlspecialchars($who);
    return "&lt;p&gt;Hello, {$who}!&lt;/p&gt;";
  }
}</programlisting>We also need to change the initialisation of our HTML
      service:</para>

      <programlisting language="php">&lt;?php
namespace Acme\Example\Administrator\Extension;

use Acme\Example\Administrator\Service\Html\Example;

class Example extends MVCComponent implements BootableExtensionInterface {
    public function boot(ContainerInterface $container)
    {
        <emphasis role="bold">$db = $container-&gt;get('DatabaseDriver');</emphasis>
        $this-&gt;getRegistry()-&gt;register('example', new Example(<emphasis
          role="bold">$db</emphasis>));
    }
}</programlisting>

      <para>You can push any service, including your component's MVCFactory
      service which means that you can get instances of any Model of your
      component to retrieve database data in your HTML helper. Or, maybe,
      Joomla's UserFactory service so you can create instances of any user
      given their ID or username to get and present information about them.
      You get the idea!</para>
    </section>

    <section xml:id="com-categories">
      <title>Categories</title>

      <para>Sometimes your components may need to use Joomla's Categories
      feature. I am not talking about using content categories, where articles
      are placed in. I am talking about having Joomla manage categories for
      your own items. This is what Joomla itself is doing for its core
      components like Contacts and Banners.</para>

      <para>Using Joomla's categories instead of inventing your own
      categorisation has many benefits. The obvious benefit is that users are
      exposed to a familiar and consistent category management interface.
      Beyond the obvious, this is the only way you can have nice things such
      as <link linkend="com-fields">integration with custom
      fields</link>.</para>

      <section xml:id="com-categories-db">
        <title>Database schema changes</title>

        <para>Your table which contains the <emphasis>items</emphasis> which
        go into each category needs to have a few columns:</para>

        <programlisting language="mysql">`id`          BIGINT(20)    NOT NULL AUTO_INCREMENT COMMENT 'Item unique ID',
`catid`       BIGINT(20)    NOT NULL COMMENT 'Category ID',
`state`       TINYINT(3)    NOT NULL DEFAULT '1' COMMENT 'Publish status',</programlisting>

        <para>These fields don't necessarily need to have these names; we can
        change them in the code. However, these column names are the default
        used in Joomla and it makes it easier for you to follow third party
        tutorials and for other people to follow what you are doing with your
        code.</para>
      </section>

      <section xml:id="com-categories-manifest">
        <title>Changes to your XML manifest and forms</title>

        <para>A lot of this integration is, in fact, smoke and mirrors. Users
        are taken to the core <code>com_categories</code> component to manage
        categories. <code>com_categories</code> uses a form in our component,
        in the file
        <filename>administrator/components/<replaceable>com_example</replaceable>/forms/category.xml</filename>
        where <replaceable>com_example</replaceable> is our component, to add
        sections to the category configuration beyond the standard Joomla
        stuff. The way Joomla's main menu works along with a small change in
        our XML manifest will make the user think they are still in our
        component while they are using Joomla's com_categories.</para>

        <para>For the user to have a way to manage categories and maintain the
        illusion they remain in our extension you have to add the following
        code in your XML manifest under &lt;extension&gt;,
        &lt;administration&gt;, &lt;submenu&gt;:</para>

        <programlisting language="xml">&lt;menu link="option=com_categories&amp;amp;extension=<replaceable>com_example</replaceable>"&gt;JCATEGORIES&lt;/menu&gt;</programlisting>

        <para>where <replaceable>com_example</replaceable> is the name of your
        component.</para>

        <para>By default, you'll get a rather barren category edit page with
        just the bare minimum of information Joomla needs to store about a
        category (a title, alias and description are required — you can't hide
        them or remove them in any way). The basic tabs you get in the
        category editor are Category, Options, Publishing, Fields (if any
        custom Fields are set up for the category) and Permissions.</para>

        <para>You can display additional tabs with component-specific
        configuration options by creating the file
        <filename>administrator/components/<replaceable>com_example</replaceable>/forms/category.xml</filename>
        where <replaceable>com_example</replaceable> is the name of your
        component. This is a regular Joomla XML form file. Just remember,
        every <code>&lt;fieldset&gt;</code> you add becomes a tab in the
        Category edit page. Neat, huh?</para>
      </section>

      <section xml:id="com-categories-service">
        <title>The Category service</title>

        <para>Categories are great and all, but if you need to get their
        parameters or create SEF routes for nested categories you need to
        somehow get information on categories. This is what the category
        service does for us.</para>

        <para>It is customary — or at least I have not found a concrete reason
        to not be able to do otherwise — that the Category Service is created
        in the <emphasis>frontend</emphasis> part of your site.</para>

        <para>Assuming our <code>com_example</code> component with the
        namespace prefix <code>Acme\Example</code>, you need to create the
        class <classname>Acme\Example\Site\Service\Category</classname> in the
        file
        <filename>components/com_example/src/Service/Category.php</filename>
        like this:</para>

        <programlisting language="php">&lt;?php

namespace Acme\Example\Site\Service;

defined('_JEXEC') or die;

use Joomla\CMS\Categories\Categories;

class Category extends Categories
{
    public function __construct($options)
    {
        $options = array_merge($options, [
            'extension'  =&gt; 'com_example',
            'table'      =&gt; '#__example_items',
            'field'      =&gt; 'catid',
            'key'        =&gt; 'id',
            'statefield' =&gt; 'state',
        ]);

        parent::__construct($options);
    }

}</programlisting>

        <para>The array in the <methodname>__construct</methodname> method is
        all you need to customise and it's fairly self-explanatory.</para>

        <variablelist>
          <varlistentry>
            <term>extension</term>

            <listitem>
              <para>The name of your component e.g.
              <code>com_example</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>table</term>

            <listitem>
              <para>The name of the table holding the category
              <emphasis>items</emphasis>. As customary in Joomla you use
              <database>#__</database> to denote the common table name
              prefix.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>field</term>

            <listitem>
              <para>The name of the database column which contains the numeric
              category ID. The default is <code>catid</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>key</term>

            <listitem>
              <para>The name of the database column which contains the item's
              primary key. The default is <code>id</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>statefield</term>

            <listitem>
              <para>The name of the database column which contains the item's
              publish state. The default is <code>state</code>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Now you see why I told you to use the database table field names
        customarily used by Joomla; they minimise the code you need to write
        down to two array keys: <code>extension</code> and
        <code>table</code>.</para>

        <para>Unlike other services provided by your component, the category
        service is instantiated directly:</para>

        <programlisting language="php">$catService = new Acme\Example\Site\Service\Category([]);</programlisting>

        <para>The array in the constructor arguments is not just for show. It
        can help you narrow down the list of categories to be returned with
        the following keys:</para>

        <variablelist>
          <varlistentry>
            <term>access</term>

            <listitem>
              <para>Boolean. When true, Joomla will only return the categories
              visible to the current user. It does that by only getting from
              the database the categories whole <database>access</database>
              field is one of the Joomla viewing access levels the current
              user has access to.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>published</term>

            <listitem>
              <para>Integer 0 or 1. When it's 1 it will only return categories
              which are published. When 0 it will return published,
              unpublished <emphasis>and trashed</emphasis> categories.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>countItems</term>

            <listitem>
              <para>Integer 0 or 1. Note the weird capitalisation in the
              middle of this key's name! When it's 1, Joomla will return the
              number of items contained in each category at the expense of
              performance. Use this sparingly and only when you absolutely
              need it e.g. when displaying paginated views.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Also keep in mind that Joomla tries to be smart. A bit
        <emphasis>too</emphasis> smart, maybe. When you are on a multilingual
        site it will only return categories whose language is either the
        currently selected language or “All” (denoted by a <code>*</code> in
        the language column of the <database>#__categories</database> table).
        If you want to override this behaviour you will need to change your
        Categories Service constructor like so:</para>

        <programlisting language="php">	public function __construct($options)
    {
        $options = array_merge($options, [
            'extension'  =&gt; 'com_example',
            'table'      =&gt; '#__example_items',
            'field'      =&gt; 'catid',
            'key'        =&gt; 'id',
            'statefield' =&gt; 'state',
        ]);

        parent::__construct($options);

        $this-&gt;_options['currentlang'] = $options['currentlang'] ?? $this-&gt;_options['currentlang'];
    }</programlisting>

        <para>If you want the instance of the Categories Service to return all
        categories regardless of the current language in a multilingual site
        you can now do:</para>

        <programlisting language="php">$catService = new Acme\Example\Site\Service\Category([
  'currentlang' =&gt; 0
]);</programlisting>
      </section>
    </section>

    <section xml:id="com-router">
      <title>Router</title>

      <para>Most components have a backend and a frontend part. The backend
      part is used by the site administrators to set up the content being
      managed by the component and the frontend part is used to display said
      content to the visitors of the site.</para>

      <section xml:id="com-router-routing-overview">
        <title>The case for URL routing</title>

        <para>By default, Joomla's frontend URLs look something like
        this:</para>

        <para><uri>https://www.example.com/index.php?option=com_example&amp;view=item&amp;id=123&amp;Itemid=456</uri></para>

        <para>This is called a regular or non-SEF URL. The SEF URL — what
        other CMS may call a “permalink” or a “<emphasis>route</emphasis>” —
        could be something like</para>

        <para><uri>https://www.example.com/acme-shop/roadrunner-hunting/explosives/tnt-crate.html</uri></para>

        <note>
          <para><acronym>SEF</acronym> is an acronym which stands for Search
          Engine Friendly and is called like that for historical reasons —
          back in 2001 when Joomla's predecessor, Mambo, introduced this
          feature a human-understandable URL was also helping the primitive
          search engines of that era to get better context of what the page is
          about. This stopped being true by the time Joomla emerged as its own
          software, in 2005.</para>

          <para>Joomla co-founder Brian Teeman coined a better, if not much
          more British, term: Pub Ear Friendly. The idea being that when you
          try to give the URL of a page to your mate while downing pints at
          your local, rather lively, local it's easier to give them a few
          words they can understand than a long string of alphanumeric
          characters. For some reason this alternate term never stuck…</para>
        </note>

        <para>The transformation of the ugly, incomprehensible (at least to
        non-developers), non-SEF URL into the SEF URL and of the SEF URL back
        to the ugly non-SEF version (so Joomla can figure out which component
        to load and what to tell it to do) is called <emphasis role="bold">SEF
        routing</emphasis> in the Joomla vernacular. Most everywhere else you
        will see it being called <emphasis role="bold">URL routing</emphasis>.
        Well, the Joomla vernacular is full of certain historical quirks which
        makes it harder for newcomers to figure out what is what, but this is
        neither here nor there.</para>

        <para>URL routing in Joomla is implemented in the core. However, the
        core code cannot <emphasis>possibly</emphasis> know how your component
        is supposed to logically structure its content so as to convert this
        into a human and machine understandable URL. Therefore it delegates
        that responsibility to the component, namely to our component's
        Router.</para>
      </section>

      <section xml:id="com-router-abandon-all-hope">
        <title>Intermission: abandon all hope ye who enter here</title>

        <para>Before we go on, let's discuss a little bit how Joomla URL
        routing works. It's long, it's a bit depressing, but read to the end —
        as you'll see, all problems with the URL routing in Joomla are
        ultimately <emphasis role="bold">a user education issue</emphasis>,
        not a coding issue.</para>

        <para>You would expect web software to have have absolutely
        deterministic, clear routing for URLs. Given a set of URL parameters
        (the “non-SEF URL”) the URL router (“SEF router”) will spit out the
        same route (“SEF URL”). In this ideal world we already have nuclear
        fusion and world peace, we have solved poverty and hunger and… I
        digress.</para>

        <para>In the imperfect world we live in, web software has to choose
        one of two evils. URL routing is either extremely technical and
        inflexible but robust, or it is is user-friendly and flexible but can
        result in some very weird situations. Joomla chose the latter. It's
        what allows modules to work the way they do which is one of the many
        reasons Joomla is an insanely powerful but still user-friendly CMS.
        But which part of its soul did it have to sell to you-know-who to do
        that? Let's see…</para>

        <para>URL routing in Joomla operates in two axes. On one hand we have
        the user-defined menu structure which operates as the first pass of
        URL routing and is defined by users, who are humans and not very good
        at managing hierarchies (make that
        <emphasis>doubleplusungood</emphasis>, Winston). Then you have the SEF
        router of our component which, unlike users, works in a perfectly
        logical, orderly fashion.</para>

        <para>The thing is, they are both working at the same time to do URL
        routing and this can cause some… uh…
        <emphasis>complications</emphasis>.</para>

        <para>Let's say you have the following data hierarchy:</para>

        <itemizedlist>
          <listitem>
            <para>Category A, alias <code>alpha</code>.</para>

            <itemizedlist>
              <listitem>
                <para>Category B, alias <code>bravo</code>.</para>

                <itemizedlist>
                  <listitem>
                    <para>Article C, alias <code>charlie</code></para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>And you have the following menu structure (as to why the user
        chose this seemingly bonkers menu structure, no, they are not trying
        to sabotage your code, they have a good reason but we'll get back to
        that later):</para>

        <itemizedlist>
          <listitem>
            <para>Category item list for Category B, alias <code>bravo</code>.
            Item ID 123.</para>

            <itemizedlist>
              <listitem>
                <para>Single article view for Article C, alias
                <code>charlie</code>. Item ID 234.</para>

                <itemizedlist>
                  <listitem>
                    <para>Category A, alias <code>alpha</code>. Item ID
                    345.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>You would expect that the URL for category A is
        https://www.example.com/alpha, category B's is
        https://www.example.com/alpha/bravo and article C's is
        https://www.example.com/alpha/bravo/charlie.</para>

        <para>Nope.</para>

        <para>The URL for category A is
        <uri>https://www.example.com/bravo/charlie/alpha</uri> per the menu
        structure.</para>

        <para>The URL for category B is
        <uri>https://www.example.com/bravo</uri> per the menu
        structure.</para>

        <para>The URL for article C is
        <uri>https://www.example.com/bravo/charlie</uri> per BOTH the menu
        structure AND the SEF router of com_content.</para>

        <para>However, it's perfectly possible to access article C as
        https://www.example.com/bravo/charlie/alpha/charlie. The first three
        parts of the route (/bravo/charlie/alpha) are the menu structure to
        category A. The rest (bravo/charlie) is handled by the SEF router of
        com_content.</para>

        <para>*record scratch*</para>

        <para>But, wait, wait a second! How does Joomla know when to use each
        URL?! I am glad you asked, the answer is the <code>Itemid</code> URL
        parameter, i.e. the menu item ID for which we are going to be
        generating a URL for our… something!</para>

        <para>If we are routing the URL to article C using a URL with
        Itemid=123 Joomla will first figure out that we have a menu item to
        Article C's parent category (Category B). It will then ask our URL
        router to route this item in this category which will make our
        com_content router return <code>charlie</code>. Therefore Joomla will
        return the relative URL <code>bravo/charlie</code>.</para>

        <para>If we are routing the URL to article C using a URL with
        Itemid=234 Joomla sees that the Itemid matches exactly what we need to
        route, therefore it will return the menu structure up to this point,
        i.e. the relative URL <code>bravo/charlie</code>.</para>

        <para>HOLD ON A SECOND! Both of these methods returned… THE SAME URL!
        Ah, keen eyed reader, you are right! I can see you despairing. Oh,
        please, not yet! It's about to get <emphasis>worse</emphasis>. You
        see, when Joomla parses the URL it prioritises the menu structure over
        the SEF router of each component. Since <code>bravo/charlie</code> is,
        indeed, a valid menu structure it will simply return the non-SEF URL
        index.php?Itemid=234 — in both cases.</para>

        <para>But, but, but… Isn't the Itemid how we tell modules when to
        display? Why, yes, it is! Oh, you had different modules displaying in
        menu items 123 and 234? Too bad! You don't get to choose.
        Sorry.</para>

        <para>Back to routing non-SEF to SEF URLs. If you route article C
        using a URL with Itemid=345 Joomla tells you that you are on category
        A. So your SEF route has to find a full path to your article which
        would be bravo/charlie and this is added to Category A, menu item
        345's URL of bravo/charlie/alpha to make the entirely confusing URL
        bravo/charlie/alpha/bravo/charlie which works perfectly.</para>

        <para>What about trying to route article C without an Itemid? Now
        things get a bit tastier and testier. Joomla will try to find the most
        relevant route using the segments returned by your SEF router and
        trying to match them with the menu structure… Which one it is?
        Frankly, I don't have the foggiest off the top of my head. I'd have to
        build that site to figure it out. I would think it's the same as using
        Itemid=345. If all else fails, Joomla will use the Home item's Itemid
        and all bets are off.</para>

        <para>Of course, this means that the same article can have three URLs,
        two of which are identical and one of them does not resolve to what
        you'd expect. But this is normal! And no, forget about getting a
        canonical URL for article C because there's none.</para>

        <para>This insanity cannot be addressed because it would require
        decoupling URL routing from Joomla's menu system. However, this would
        mean that all published modules appear in all pages as there is no
        longer a way to know which menu item you're in. Of course it's the
        solution to this problem which broke module display in our example
        above but this is what you get when the users are “crazy”.</para>

        <para>Or are they?</para>

        <para>While it sounds convoluted and problematic, this method is not
        the least bit more convoluted and problematic than any other given CMS
        <emphasis>when you take into account all the possible<footnote>
            <para>For any given, singular use case and a set of routing
            algorithms it is very easy to find the one algorithm which is most
            suitable, meaning the rest are unsuitable. However, every single
            use case has a different most suitable algorithm. Given a very
            large number of use cases, like the near infinite uses cases a CMS
            is called to address, any given routing algorithm would be just as
            unsuitable for most use cases as every other. Therefore the task
            of finding the “best” algorithm is reduced to finding an algorithm
            which fulfils some secondary or tertiary business goals such as
            making it possible for an end user to easily configure with a GUI
            or support our vision of having different modules show up in each
            page. The primary business goal of the “best” routing for the
            generic use case is, by definition, a bust unless we are willing
            to drastically reduce the use cases we are willing to
            support.</para>
          </footnote>, almost infinite use cases it's called to work
        with</emphasis>. It works great insofar the user can be trusted to not
        create psychopathic menu structures which work against the data
        structure, reusing the same aliases for a good measure of
        insanity.</para>

        <para>But why would any user even create such a menu structure to
        begin with?!</para>

        <para>As a matter of fact, the menu structure I presented <emphasis
        role="bold">is the wrong way to use Joomla</emphasis>. I confess I
        misdirected you but I did so for a noble reason. What the user most
        likely wanted was the menu item's <emphasis>visual</emphasis>
        structure to be what we presented for user experience reasons. They
        most likely don't care or not even <emphasis>want</emphasis> the crazy
        URL structure. They would very likely be spending hundreds of Euros
        every year in various SEF / SEO tools to try and fix their mistake…
        when they could just be told how to use Joomla the way Joomla was
        intended to be used to begin with.</para>

        <para>The One True Joomla Way™ is to use a “hidden” menu (a menu
        without a module to display it) to generate the URL structure in a way
        that's mostly following the data structure and a shown menu with Alias
        menu items for the visual display.</para>

        <para>So, in our example, the hidden menu would be:</para>

        <itemizedlist>
          <listitem>
            <para>Category A, alias <code>alpha</code>. Item ID 345.</para>

            <itemizedlist>
              <listitem>
                <para>Category item list for Category B, alias
                <code>bravo</code>. Item ID 123.</para>

                <itemizedlist>
                  <listitem>
                    <para>Single article view for Article C, alias
                    <code>charlie</code>. Item ID 234.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>And the visible menu:</para>

        <itemizedlist>
          <listitem>
            <para>Category item list for Category B, alias to menu item
            123.</para>

            <itemizedlist>
              <listitem>
                <para>Single article view for Article C, alias to menu item
                234.</para>

                <itemizedlist>
                  <listitem>
                    <para>Category A, alias <code>alpha</code>, alias to menu
                    item 345.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>That's the reason I went through this intentionally
        provocatively named section. When you are doing end user support you
        <emphasis role="bold">WILL</emphasis> come up with the atrocious menu
        structures like the one I presented above.</para>

        <para>Do NOT try to address this in your router code; you will lose
        your mind and you will never make it work for all of your users.
        Remember, there is no routing method which is suitable for every use
        case and you cannot possibly address infinite use cases. Value your
        sanity as a developer! Learn when to say “no” to users.</para>

        <para>Instead, ask your user what is their <emphasis>use
        case</emphasis> and is <emphasis>their intention</emphasis> with their
        menu structure: are they trying to shape the URL structure or just the
        way things are presented on their site? In 99 out of 100 cases the
        user intended to affect only the visual presentation of the menu; they
        have no idea they are shooting their feet by affecting the URL
        structure. Patiently explain them the trick about hidden menus. You'll
        get grateful clients for life.</para>
      </section>

      <section xml:id="com-router-j3-vs-j4">
        <title>Joomla 3 vs Joomla 4</title>

        <para>In Joomla 3 we would create a router as a
        <filename>router.php</filename> file in the root of our component's
        frontend, e.g. <filename>components/com_example/router.php</filename>.
        That file had two ways to implement a router:</para>

        <itemizedlist>
          <listitem>
            <para>Two separate functions whose names consisted of the name of
            the component without the <code>com_</code> prefix and the
            suffixes <code>BuildRoute</code> and <code>ParseRoute</code>, e.g.
            <function>exampleBuildRoute</function> and
            <function>exampleParseRoute</function>. This was the very old way
            which was deprecated since Joomla 3.3 released in 2014.</para>
          </listitem>

          <listitem>
            <para>As a class extending
            <classname>JComponentRouterBase</classname> (renamed to
            <classname>Joomla\CMS\Component\Router\RouterBase</classname> in
            later Joomla versions) or, more usually,
            <classname>JComponentRouterView</classname> (introduced in Joomla
            3.5 and renamed to
            <classname>Joomla\CMS\Component\Router\RouterView</classname> in
            later Joomla versions).</para>
          </listitem>
        </itemizedlist>

        <para>If you are using the former method you have a lot of work ahead
        of you to convert it to a Joomla 4 compatible router. If you are using
        the latter method you are virtually ready, with minimal
        changes!</para>

        <para>In Joomla 4 the router is implemented as the class
        <code>Service\Router</code> in the frontend part of our component. So,
        with a component <code>com_example</code> that has a namespace prefix
        <code>Acme\Example</code> that would be the class
        <classname>Acme\Example\Site\Service\Router</classname> in the file
        <filename>components/com_example/src/Service/Router.php</filename>.
        That class needs to extend from
        <classname>Joomla\CMS\Component\Router\RouterBase</classname> or, more
        typically
        <classname>Joomla\CMS\Component\Router\RouterView</classname>, just
        like in Joomla 3.5<footnote>
            <para>The entire concept of routing using the RouterView has not
            changed since Joomla 3.5 which was released in 2016. You see, at
            this point in time development of Joomla 4 had already started and
            Joomla introduced the new routing to help developers migrate their
            extensions to the new router before Joomla 4 is released.</para>
          </footnote> and later versions.</para>

        <para>There is one more difference in Joomla 4 and later versions. By
        default, the component does not know that it needs to use a
        router.</para>

        <para>To understand what and why we need to do, let's go backwards.
        Joomla only knows it needs to use a router factory when the
        component's extension class implements the
        <interfacename>\Joomla\CMS\Component\Router\RouterServiceInterface</interfacename>.
        When this is the case, Joomla knows that it can ask the extension
        class to return a Router Factory object using the
        <methodname>createRouter</methodname> method defined in said
        interface. The component's extension class does not know how to find
        the router factory object; it is injected into it by the component
        service provider (<filename>services/provider.php</filename>). In its
        turn, it asks the component's DI Container for that Router Factory
        object. The DI Container will only know how to get a Router Factory
        object is we register a Router Factory service provider in the service
        provider (<filename>services/provider.php</filename>).</para>

        <para>Unraveling these chained dependencies we see that we need to
        make changes in just two files.</para>

        <para>Your component's extension class must implement the
        <interfacename>\Joomla\CMS\Component\Router\RouterServiceInterface</interfacename>
        interface. The easiest way to provide its implementation is having it
        use the
        <classname>\Joomla\CMS\Component\Router\RouterServiceTrait</classname>
        trait.</para>

        <para>That trait requires your component service provider (e.g.
        <filename>administrator/components/com_example/services/provider.php</filename>)
        to do two things. First, it needs to register a Router Factory service
        provider before trying to create the component object:</para>

        <programlisting language="php">$container-&gt;registerServiceProvider(
  new \Joomla\CMS\Extension\Service\Provider\RouterFactory
  (
    '\\Acme\\Example'
  )
);</programlisting>

        <para>The
        <classname>\Joomla\CMS\Extension\Service\Provider\RouterFactory</classname>
        class is the default Joomla implementation of a component router
        factory. It needs exactly one configuration parameter in its
        constructor, the namespace of your component
        <emphasis>without</emphasis> the <code>Site</code> or
        <code>Administrator</code> suffix.</para>

        <para>Then, after having created our component extension class'
        object, we need to inject the Router Factory object into it:</para>

        <programlisting language="php">$container-&gt;set(
  ComponentInterface::class,
  function (Container $container) {
    $component = new ExampleComponent(
      $container-&gt;get(ComponentDispatcherFactoryInterface::class)
    );

    // ... other initialisation goes here ...

    // Inject the router factory object
    <emphasis role="bold">$component-&gt;setRouterFactory(
      $container-&gt;get(
         \Joomla\CMS\Component\Router\RouterFactoryInterface::class
      )
    );</emphasis>
   }
);</programlisting>

        <para>While it looks a bit verbose, it accomplishes two things. First,
        it's not possible to be surprised by Joomla magically implementing a
        feature in your component you did not expect. Second, in the case of a
        router, it allows us to <link
        linkend="com-router-push-dependencies">push dependencies (services)
        into our router object</link>.</para>
      </section>

      <section xml:id="com-router-routerview">
        <title>Using RouterView</title>

        <para>If you are using a router class extending from
        <classname>Joomla\CMS\Component\Router\RouterView</classname> it is
        fairly easy to create a router for most components.</para>

        <para>The constructor of your class tells Joomla which views of your
        component can be routed in the frontend and the relation to each
        other. For example:</para>

        <programlisting language="php">public function __construct(SiteApplication $app = null, AbstractMenu $menu = null)
{
  $welcome = new \Joomla\CMS\Component\Router\RouterViewConfiguration('welcome');
  $this-&gt;registerView($welcome);

  $item = (new \Joomla\CMS\Component\Router\RouterViewConfiguration('item'))
    -&gt;setKey('id')
    -&gt;addLayout('default')
    -&gt;addLayout('fancy');
  $this-&gt;registerView($item);

  $detail = (new \Joomla\CMS\Component\Router\RouterViewConfiguration('detail'))
    -&gt;setKey('id')
    -&gt;setParent($item, 'itemid');
  $this-&gt;registerView($detail);

  parent::__construct($app, $menu);

  $this-&gt;attachRule(new \Joomla\CMS\Component\Router\Rules\MenuRules($this));
  $this-&gt;attachRule(new \Joomla\CMS\Component\Router\Rules\StandardRules($this));
  $this-&gt;attachRule(new \Joomla\CMS\Component\Router\Rules\NomenuRules($this));
}</programlisting>

        <para>This tells Joomla that we have three routable views called
        <code>welcome</code>, <code>item</code> and <code>detail</code>. The
        <code>detail</code> view is a child of <code>item</code>.</para>

        <para>How would Joomla know about which detail is under a specific
        item? We told it that the <code>detail</code>'s <code>itemid</code>
        property must match the key of the <code>item</code> and the key of
        the <code>item</code> is called <code>id</code>.</para>

        <para>The last three lines tell Joomla which routing rules to
        register:</para>

        <itemizedlist>
          <listitem>
            <para><classname>MenuRules</classname>. Tries to detect the
            correct Itemid for a view if none was provided in the non-SEF URL.
            You should keep that unless you want to implement the
            <methodname>preprocess</methodname> method yourself.</para>

            <note>
              <para>The <methodname>preprocess</methodname> method is called
              before the SEF URL is built and, crucially, before Joomla tries
              to figure out the <code>format</code> and <code>Itemid</code>
              URL parameters to send to your component's Router's build
              method.</para>

              <para>In Joomla 3 you could get away with trying to figure out
              and change the <code>format</code> and <code>Itemid</code>
              parameters in your router's <methodname>build</methodname>
              method. While this was necessary for compatibility with legacy
              <filename>router.php</filename> files (those using the two
              distinct functions), <emphasis>this “hack” will no longer work
              in Joomla 4</emphasis>. You must move that code into the
              <methodname>preprocess</methodname> method. If you fail to do
              so, your SEF URLs will not work properly; from your perspective,
              it will be as if your <code>format</code> and
              <code>Itemid</code> values overridden in the built method were
              never taken into account. That's <emphasis>exactly</emphasis>
              what happens.</para>

              <para>This is actually a good change. It makes the core routing
              code more efficient and keeps us third party developers in the
              habit of applying separation of concerns in our code.</para>
            </note>
          </listitem>

          <listitem>
            <para><classname>StandardRules</classname>. Standard non-SEF to
            SEF URL (and vice-versa) routing. If you omit this you will not
            get any SEF URL routing which beats the purpose of having a
            router.</para>
          </listitem>

          <listitem>
            <para><classname>NomenuRules</classname>. Process URLs when no
            Itemid exists for the component. This is necessary to route URLs
            when no published menu items exist for your component and Joomla
            needs to create or parse URLs in the format
            <uri>/component/example/foo/bar.html</uri>.</para>
          </listitem>
        </itemizedlist>

        <para>At this point Joomla knows the logical hierarchy of our
        component's views but it does not know how to convert an id in the
        non-SEF URL to a SEF URL segment when building the SEF URL (e.g.
        convert an item ID to its alias) or how to convert a SEF URL segment
        back to a non-SEF URL's numeric ID when it's parsing the SEF URL (e.g.
        convert an item alias to its ID). This is up to us.</para>

        <para>We need to provide two methods for each
        <classname>RouterViewConfiguration</classname> objects we created:
        <methodname>get<replaceable>Something</replaceable>Segment</methodname>
        and <methodname>get<replaceable>Something</replaceable>Id</methodname>
        where <replaceable>Something</replaceable> is the name of the view
        with its first letter capitalised. Here's what the code for the Item
        view would look like in our example:</para>

        <programlisting language="php">public function getItemId(string $segment, array $query): bool|int
{
  $db = \Joomla\CMS\Factory::getContainer()-&gt;get('DatabaseDriver');
  $dbQuery = $db-&gt;getQuery(true)
    -&gt;select($db-&gt;quoteName('id'))
    -&gt;from($db-&gt;quoteName('#__example_items'))
    -&gt;where($db-&gt;quoteName('alias') . ' = :alias')
    -&gt;bind(':alias', $segment);

  return  $db-&gt;setQuery($dbQuery)-&gt;loadResult() ?: false;
}

public function getItemSegment(int $id, array $query): array
{
  $db = \Joomla\CMS\Factory::getContainer()-&gt;get('DatabaseDriver');
  $dbQuery = $db-&gt;getQuery(true)
    -&gt;select($db-&gt;quoteName('alias'))
    -&gt;from($db-&gt;quoteName('#__example_items'))
    -&gt;where($db-&gt;quoteName('id') . ' = :id')
    -&gt;bind(':id', $id);
  
  $segment = $db-&gt;setQuery($dbQuery)-&gt;loadResult() ?: null;

  if ($segment === null) {
    return [];
  }

  return [$segment];
}</programlisting>

        <para>There is something worth noting here. The
        <methodname>get<replaceable>Something</replaceable>Segment</methodname>
        method can return an array with more than one segments. This is useful
        if you want to somehow return a more complex structure e.g.
        <uri>item/foo/detail/bar</uri> where <code>item</code> and
        <code>detail</code> are fixed strings. However, if you do that, you
        will need to override the <methodname>parse</methodname> method to
        handle multi-segment views. The default implementation in
        <classname>StandardRules</classname> assumes that you are using
        exactly one segment per view and that's why
        <methodname>get<replaceable>Something</replaceable>Id</methodname>
        accepts a string, not an array, as its first argument.</para>

        <para>You may wonder, what about our <code>welcome</code> view? Don't
        we need to create methods for it? No, we don't. Views which do not
        have a key set for them use the name of the view as the (only) segment
        for SEF URLs. If there is a naming clash between such a view and an
        alias of a top-level view (or category, as we will see below) the
        first <classname>RouterViewConfiguration</classname> object registered
        “wins” in determining how that segment should be parsed. As a result,
        you should keep this kind of top-level views to a minimum and either
        inform users that they cannot use these aliases or actively prevent
        them with validation rules whenever possible.</para>
      </section>

      <section xml:id="com-router-push-dependencies">
        <title>Pushing dependencies to the Router</title>

        <para>You may have noticed that in the sample code above I got the
        database driver object using the
        <methodname>Factory::getContainer</methodname> static method. This is
        not ideal. It's even worse if I'd need to get access to MVC objects
        such as Models and Tables — having to boot the entire component just
        to get its MVCFactory is something to use only if there is no other
        way, not something to do by default.</para>

        <para>Fortunately, Joomla gives us the option to push any services we
        need — such as the database driver object and the component's
        MVCFactory — into the router. Unfortunately, it's a bit
        non-obvious.</para>

        <para>To inject services into the Router service object they need to
        be injected into the object after it is created by the Router Factory
        object. The Router Factory object needs to have access to these
        services to inject them. This means injecting these services to the
        Router Factory object from the Router Factory Service Provider. The
        Router Factory Service Provider can get any of the dependencies
        (services) it needs since it has access to the component's service
        provider.</para>

        <para>Therefore we need to create the two missing pieces of the puzzle
        (Router Factory and its service provider) and register the latter with
        our component's service provider.</para>

        <important>
          <para>The component's service provider
          (<filename>services/provider.php</filename>) lives in the backend
          portion of your component. Therefore. it makes sense that the Router
          Factory and the Router Factory Service Provider also live in the
          backend of your component <emphasis>even though the Router is only
          used in the frontend of the site</emphasis>.</para>

          <para>Yup. It sounds backwards. You can definitely create them in
          the frontend but, if you do, <emphasis>you</emphasis> and everyone
          else reading your code might get confused. Don't over-think it, just
          do what I tell you to do. There's method in this madness, I
          promise.</para>
        </important>

        <para>First, let's make our router MVCFactory-aware (it's already
        database-aware).</para>

        <programlisting language="php">&lt;?php
namespace Acme\Example\Site\Service;

use Joomla\CMS\Component\Router\RouterView;
use Joomla\CMS\MVC\Factory\MVCFactoryAwareTrait;

class Router extends RouterView
{<emphasis role="bold">
    use MVCFactoryAwareTrait;
</emphasis>	
    // ... the rest of the router implementation goes here ...
}</programlisting>

        <para>Now, let's create a Router Factory
        (<classname>\Acme\Example\Administrator\Service\RouterFactory</classname>).
        The default Joomla implementation is already database-aware. I am just
        extending it to also know about the MVCFactory so we can inject it to
        our router.</para>

        <programlisting language="php">&lt;?php
namespace Acme\Example\Administrator\Service;

use Joomla\CMS\Application\CMSApplicationInterface;
use Joomla\CMS\Component\Router\RouterInterface;
use Joomla\CMS\Menu\AbstractMenu;
use Joomla\CMS\MVC\Factory\MVCFactoryAwareTrait;

class RouterFactory extends \Joomla\CMS\Component\Router\RouterFactory
{
    use MVCFactoryAwareTrait;

    public function createRouter(CMSApplicationInterface $application, AbstractMenu $menu): RouterInterface
    {
        $router = parent::createRouter($application, $menu);

        $router-&gt;setMVCFactory($this-&gt;getMVCFactory());

        return $router;
    }
}</programlisting>

        <para>Now, we need to create a RouterFactory service provider.
        Unfortunately, Joomla has a bad habit of registering factory objects
        in the DI container even though they are only going to return exactly
        one object with no initialisation, like a router. This complicates
        thing because we cannot extend the DI container definition. We have to
        do something stupid: copy Joomla's default implementation of the
        Router Factory Service Provider just so we can change the returned
        object type and register dependencies on it. Well... I guess it could
        be worse?</para>

        <para>Anyway. Let's create our router factory service provider
        <classname>\Acme\Example\Administrator\Service\Provider\RouterFactoryProvider</classname>.</para>

        <programlisting language="php">&lt;?php

namespace \Acme\Example\Administrator\Service\Provider;

<emphasis role="bold">use Acme\Example\Administrator\Service\RouterFactory;</emphasis>
use Joomla\CMS\Categories\CategoryFactoryInterface;
use Joomla\CMS\Component\Router\RouterFactoryInterface;
use Joomla\CMS\MVC\Factory\MVCFactoryInterface;
use Joomla\Database\DatabaseInterface;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;

class RouterFactoryProvider implements ServiceProviderInterface
{
/**
     * The module namespace
     *
     * @since   4.0.0
     * @var  string
     *
     */
    private $namespace;

    /**
     * DispatcherFactory constructor.
     *
     * @param   string  $namespace  The namespace
     *
     * @since   4.0.0
     */
    public function __construct(string $namespace)
    {
        $this-&gt;namespace = $namespace;
    }

    /**
     * Registers the service provider with a DI container.
     *
     * @param   Container  $container  The DI container.
     *
     * @return  void
     *
     * @since   4.0.0
     */
    public function register(Container $container)
    {
        $container-&gt;set(
            RouterFactoryInterface::class,
            function (Container $container) {
                $categoryFactory = null;

                if ($container-&gt;has(CategoryFactoryInterface::class))
                {
                    $categoryFactory = $container-&gt;get(CategoryFactoryInterface::class);
                }

                $routerFactory = new <emphasis role="bold">RouterFactory</emphasis>(
                    $this-&gt;namespace,
                    $categoryFactory,
                    $container-&gt;get(DatabaseInterface::class)
                );

                <emphasis role="bold">$routerFactory-&gt;setMVCFactory($container-&gt;get(MVCFactoryInterface::class));</emphasis>

                return $routerFactory;
            }
        );
    }
}
</programlisting>

        <para>Our changes to the core code in Joomla are highlighted in bold
        type.</para>

        <para>Finally, we need to register this router factory service
        provider in our component's <code>services/provider.php</code>
        file.</para>

        <programlisting language="php">$container-&gt;registerServiceProvider(
  new \Acme\Example\Administrator\Service\Provider\RouterFactoryProvider(
    '\\Acme\\Example'
  )
);</programlisting>
      </section>
    </section>

    <section xml:id="com-dashboard">
      <title>Dashboard</title>

      <para>There is a new feature starting with Joomla 4: Dashboards.</para>

      <para>Dashboards are sort of virtual pages, displayed by means of the
      com_cpanel core component, <link
      xlink:href="https://magazine.joomla.org/all-issues/april-2021/joomla-4-customising-admin-dashboards">which
      allow the developer and the site owners to publish modules to customise
      them</link>.</para>

      <bridgehead>Define a dashboard</bridgehead>

      <para>You can define one or more dashboards in your component's XML
      manifest file:</para>

      <programlisting language="xml">&lt;dashboards&gt;
  &lt;dashboard title="COM_EXAMPLE_DASHBOARD_TITLE" icon="none fa fa-beer"&gt;com_example.something&lt;/dashboard&gt;
&lt;/dashboards&gt;</programlisting>

      <note>
        <para><code>&lt;dashboards&gt;</code> is a top-level tag, directly
        under the <code>&lt;extension&gt;</code> root tag. Yes, even though it
        only applies in the component's administration (backend) section. If
        your Dashboard does not work first check that you have not
        accidentally put that tag under <code>&lt;administration&gt;</code>.
        It's the most common mistake!</para>
      </note>

      <para>The <code>title</code> attribute's value is a language string
      defined in your extension's backend INI language file. It's customary
      for its string to end with the word “Dashboard”, e.g.</para>

      <programlisting language="ini">COM_EXAMPLE_DASHBOARD_TITLE="Example Dashboard"</programlisting>

      <para>The value of the <code>icon</code> attribute is a CSS class which
      gives the dashboard page its icon. Joomla 4 loads FontAwesome 5 Free so
      you can use <link
      xlink:href="https://fontawesome.com/v5/search?o=r&amp;m=free">any of its
      icons</link>. Please remember that Joomla prefixes the value of the
      <code>icon</code> attribute with the string literal <code>icon-</code>.
      This does not let you use all FontAwesome icons. To work around that I
      use the value <code>none fa fa-beer</code> which results in the HTML
      attribute and value <code>class="icon-none fa fa-beer"</code>. Since
      <code>icon-none</code> does not display anything, the browser falls back
      to the next two CSS classes which render FontAwesome's beer mug
      icon.</para>

      <warning>
        <para>The Dashboard is not part of your component. It does not load
        any custom backend CSS you may have. As a result, you cannot display
        your logo or any custom image in the Dashboard. While you could do
        that by loading custom CSS in a module you set up in the dashboard, do
        keep in mind that the user can easily disable (unpublish) that module
        and then your CSS won't load anymore. If you opt for this trick it's a
        good idea to provide a fallback to a Joomla system icon class or a
        FontAwesome icon class to make sure that
        <emphasis>something</emphasis> is displayed as the Dashboard's title
        icon.</para>
      </warning>

      <para>The value inside the tag <emphasis>must</emphasis> be in the
      format <code>component.something</code> where component is the name of
      your component (e.g. <code>com_example</code>) and something is a unique
      identifier for the dashboard among all dashboards defined in your
      component. For example, we could have the dashboard
      <code>com_example.something</code>.</para>

      <important>
        <para>Your component manifest MUST ALSO follow the naming convention
        <filename>bareComponent.xml</filename> and be placed in the backend
        folder of your component. For example, <code>com_example</code>'s XML
        manifest MUST be called <filename>example.xml</filename> and be found
        in
        administrator/components/com_example/<filename>example.xml</filename>.</para>

        <para>Keep in mind that Joomla automatically copies your component's
        XML manifest to the backend of your site when installing the
        component. You will only ever have to do it manually — if ever — when
        developing a component locally.</para>
      </important>

      <para>The value of the tag after the dot is also important. All modules
      published to the module position
      <code>cpanel-<replaceable>com_example</replaceable>-<replaceable>something</replaceable></code>
      will appear in this dashboard <code>com_example.something</code>.</para>

      <bridgehead>Display a link to your dashboard in the component's
      submenu</bridgehead>

      <para>The dashboard is cool… but how do you even display it? As it turns
      out there are exactly two ways:</para>

      <itemizedlist>
        <listitem>
          <para>Put a link (e.g. a Toolbar link button) in your extension
          pointing the browser to
          <uri>index.php?index.php?option=com_cpanel&amp;view=cpanel&amp;dashboard=<replaceable>com_example.something</replaceable></uri>
          where <replaceable>com_example.something</replaceable> is your
          custom dashboard.</para>
        </listitem>

        <listitem>
          <para>Add a submenu item in your XML manifest, e.g.</para>

          <programlisting language="xml">&lt;menu&gt;COM_EXAMPLE&lt;/menu&gt;

&lt;submenu&gt;
  <emphasis role="bold">&lt;menu
    link="index.php?option=com_cpanel&amp;amp;view=cpanel&amp;amp;dashboard=<replaceable>com_example.something</replaceable>"&gt;
<replaceable>    COM_EXAMPLE_MENU_TITLE_DASHBOARD</replaceable>
  &lt;/menu&gt;</emphasis>

  &lt;!-- more submenu items --&gt;
&lt;/submenu&gt;</programlisting>

          <important>
            <para>Remember that the
            <replaceable>COM_EXAMPLE_MENU_TITLE_DASHBOARD</replaceable>
            language string must be defined in your component's
            <filename>.sys.ini</filename> language file.</para>
          </important>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Super ultra secret stuff!</emphasis>
          Tell Joomla to display a Dashboard link next to your component's
          top-level menu entry. In your XML manifest you need to modify your
          top level menu item like so:</para>

          <programlisting language="xml">&lt;menu&gt;
  <emphasis role="bold">&lt;params&gt;
    &lt;dashboard&gt;com_example.something&lt;/dashboard&gt;
  &lt;/params&gt;</emphasis>
  COM_EXAMPLE
&lt;/menu&gt;

&lt;submenu&gt;
  &lt;!-- your submenu items here… --&gt;
&lt;/submenu&gt;</programlisting>

          <para>The contents of the <code>params</code> menu subkey in the XML
          manifest goes through Joomla's Registry object and ends up,
          serialised as JSON, in the <database>#__menu</database> table
          record's <database>params</database> column. The
          <code>dashboard</code> key tells Joomla to display a dashboard link
          next to the menu item's text. Its value tells Joomla
          <emphasis>which</emphasis> dashboard to link to.</para>
        </listitem>
      </itemizedlist>

      <para>It is actually a good idea using a combination of the methods
      above. The toolbar link can help lost users find their way back to the
      dashboard. While the <code>params</code> trick is cool, it only works in
      the default components side menu. If the user has customised the menu,
      uses an alternative presentation or simply visits the Components
      Dashboard they won't see the link to your component's custom dashboard,
      therefore you may need the second method (the submenu link to your
      dashboard) to cater for these use cases. What can I say? Joomla is
      customisable. Maybe even a bit <emphasis>too</emphasis>
      customisable.</para>

      <bridgehead>A custom menu preset for your dashboard</bridgehead>

      <para>You may have noticed that all core dashboards seem to have an
      “immutable” area at the top. This is not immutable; it's just a plain
      old module of the type <code>mod_submenu</code> set to display in the
      module style <code>none</code> (that's why you don't see the cogs button
      to edit it in the dashboard). You can of course edit this module like
      any other module in Content, Administrator Modules.</para>

      <para>It's useful that we can also do the same for our own component and
      its dashboard. However, you may notice that mod_submenu only has presets
      for core components. What about our custom component? Well, as it turns
      out, there are no hardcoded presets! Everything you see available in
      mod_submenu is, in fact, file on your site and yes, we can do the same
      thing for our own component!</para>

      <para>We need to create a custom menu preset for our component by
      creating an XML file under the
      <filename>administrator/components/com_example/presets</filename>
      folder. To get an idea of what you can do, take a look at a core preset
      such as
      <filename>administrator/components/com_users/presets/users.xml</filename>.</para>

      <para>The name of your menu preset XML file MUST be unique across all
      components installed in Joomla. For this reason it's recommended to name
      it after your extension. For example, com_example's menu preset would be
      <filename>administrator/components/com_example/presets/example.xml</filename>.</para>

      <para>If you need multiple presets in your component it's strongly
      recommended that their file names follow the pattern
      <filename>component_something.xml</filename>, e.g.
      <filename>administrator/components/com_example/presets/example_alternate.xml</filename>.</para>

      <tip>
        <para>Per-component menu presets can be overridden in the same way as
        view templates. For example, if you want to override the default core
        Users menu preset
        (<filename>administrator/components/com_users/presets/users.xml</filename>),
        copy it to
        <filename>administrator/templates/atum/html/com_menus/presets/users.xml</filename>
        and edit away!</para>

        <para>Since all overrides live under the same
        <filename>com_menus/presets</filename> override folder you now
        understand why their name needs to be unique across all components
        installed on your site.</para>
      </tip>

      <para>Here is a sample preset, let's say it's
      <filename>administrator/components/com_example/presets/example.xml</filename>
      (this means the preset name is <code>example</code>) .</para>

      <programlisting language="xml">&lt;?xml version="1.0"?&gt;
&lt;menu
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:joomla.org"
        xsi:schemaLocation="urn:joomla.org menu.xsd"
&gt;
    &lt;menuitem
            title="COM_EXAMPLE_MENUS_CONTENT"
            type="heading"
            icon="none fa-feather-alt"
    &gt;
        &lt;menuitem
                title="JCATEGORIES"
                type="component"
                element="com_categories"
                link="index.php?option=com_categories&amp;amp;view=categories&amp;amp;extension=com_example"
                quicktask="index.php?option=com_categories&amp;amp;extension=com_example&amp;amp;task=category.add"
                quicktask-title="COM_EXAMPLE_MENUS_NEW_CATEGORY"
        /&gt;

        &lt;menuitem
                title="COM_EXAMPLE_MENUS_ITEMS"
                type="component"
                element="com_example"
                link="index.php?option=com_example&amp;amp;view=items"
                quicktask="index.php?option=com_example&amp;amp;task=item.add"
                quicktask-title="COM_EXAMPLE_MENUS_NEW_ITEM"
        /&gt;
    &lt;/menuitem&gt;
&lt;/menu&gt;</programlisting>

      <para>Here are some <emphasis role="bold">practical</emphasis>
      tips:</para>

      <itemizedlist>
        <listitem>
          <para>The icon attribute sets the CSS class for the heading by
          combining the literal string <code>icon-</code> with the value of
          the attribute. The number of icons available that way is minuscule
          compared to the plethora of icons available in FontAwesome 5 Free.
          This is why I use values for this attribute in the form <code>none
          fa-something</code>. This results in the CSS class being set to
          <code>icon-none fa-something</code>. There is no such thing as an
          <code>icon-none</code> CSS class, so that part does nothing. The
          next part, the <code>fa-something</code>, is where I tell the
          browser to use one of the available FontAwesome icons.</para>
        </listitem>

        <listitem>
          <para>The <code>quicktask</code> and <code>quicktask-title</code>
          attributes set up the little quick action icon next to the menu item
          text. By default, this is a plus icon, implying that you can add an
          item. You can customise that icon using the attribute
          <code>menu-quicktask-icon</code> which works in the exact same way
          as a heading's <code>icon</code> attribute.</para>

          <para>Why would you want to customise it? Well, let's say you have a
          security component with a view called Automatically Blocked IP
          Addresses. It would not make sense to manually add a new entry —
          since they are <emphasis>automatically</emphasis> blocked — but it
          would totally make sense to have a quick action to
          <emphasis>unblock</emphasis> an accidentally blocked IP address. In
          this case a more appropriate icon would be
          <code>fa-unlock</code>.</para>
        </listitem>
      </itemizedlist>

      <bridgehead>Creating and publishing the custom dashboard menu module,
      automatically</bridgehead>

      <para>All right. We have a dashboard. We have a menu item to access it.
      We have a custom menu to display in a mod_submenu module inside the
      dashboard. But how exactly do we get to create this kind of module? We
      can't possibly ask our users to create it manually, that would
      suck!</para>

      <para>The answer is that Joomla gives us ALMOST everything we need to
      create that module in our component's installation script.</para>

      <para>First, let's make sure our component does use an installation
      script. In the XML manifest we need to add a line like this, as we're
      familiar from Joomla 3:</para>

      <programlisting language="xml">&lt;scriptfile&gt;script.example.php&lt;/scriptfile&gt;</programlisting>

      <para>The <code>script.example.php</code> will contain our component
      installation script. You are familiar with that; it's been around since
      Joomla 1.0.</para>

      <para>What you may not have picked up is that since Joomla 3.6 there's a
      superclass our installation script can extend from. In Joomla 3 it was
      called <classname>JInstallerScript</classname>, in Joomla 4 it's
      <classname>Joomla\CMS\Installer\InstallerScript</classname> (the old
      name will work up to and including Joomla 5.3). We'll get into more
      detail on it <link linkend="com-installation-script">in the installation
      script section</link>.</para>

      <para>Joomla's InstallerScript provides a handy method called
      <methodname>addDashboardMenu</methodname> which creates a
      <code>mod_submenu</code> module to a specific dashboard using a specific
      menu preset. However, the way it is written it assumes that it will only
      ever be executed once, the first time you install a component. What
      about hundreds of third party components which have been around long
      before Joomla 4? Don't worry, we have a solution! We will install the
      module if and only if it's missing, regardless of whether this is a new
      installation or an update.</para>

      <para>Here's how to do that:</para>

      <programlisting language="php">&lt;?php
defined('_JEXEC') || die;

use Joomla\CMS\Factory;
use Joomla\CMS\Installer\Adapter\PackageAdapter;
use Joomla\CMS\Installer\InstallerScript;

class <emphasis role="bold">Com_ExampleInstallerScript</emphasis> extends InstallerScript
{
    /**
     * Called after any type of installation / uninstallation action.
     *
     * @param   string          $type    Which action is happening (install|uninstall|discover_install|update)
     * @param   PackageAdapter  $parent  The object responsible for running this script
     *
     * @return  bool
     * @since   1.0.0
     */
    public function postflight(string $type, PackageAdapter $parent): bool
    {
        // Do not run on uninstall.
        if ($type === 'uninstall')
        {
            return true;
        }

        // Install the dashboard module if necessary
        $this-&gt;conditionalInstallDashboard(<emphasis role="bold">'com-example-example', 'example'</emphasis>);

        return true;
    }

    private function conditionalInstallDashboard(string $dashboard, string $preset): void
    {
        $position = 'cpanel-' . $dashboard;

        /** @var \Joomla\Database\DatabaseDriver $db */
        $db = Factory::getContainer()-&gt;get('DatabaseDriver');
        $query = $db-&gt;getQuery(true)
                    -&gt;select('COUNT(*)')
                    -&gt;from($db-&gt;quoteName('#__modules'))
                    -&gt;where([
                        $db-&gt;quoteName('module') . ' = ' . $db-&gt;quote('mod_submenu'),
                        $db-&gt;quoteName('client_id') . ' = ' . $db-&gt;quote(1),
                        $db-&gt;quoteName('position') . ' = :position',
                    ])
                    -&gt;bind(':position', $position);

        $modules = $db-&gt;setQuery($query)-&gt;loadResult() ?: 0;

        if ($modules == 0)
        {
            $this-&gt;addDashboardMenu($dashboard, $preset);
        }
    }

}</programlisting>

      <para>The <methodname>postflight</methodname> method is called whenever
      Joomla has finished trying to install <emphasis>or uninstall</emphasis>
      (in Joomla 3 it was only after installation!) our component and before
      it cleans up. At this point we can check if there is a module already
      installed. If not, we let Joomla's code install it.</para>

      <para>The only two things you need to change above are the parts in bold
      type: the class name to match your component's name and the parameters
      to the <methodname>conditionalInstallDashboard</methodname> method. The
      parameters are fairly obvious: the name of the dashboard (replacing the
      underscore and dot with a dash!) and the name of your menu preset which
      typically is the same as your component's name without the
      <code>com_</code> prefix.</para>

      <tip>
        <para>You can publish modules to your Dashboards by assigning them to
        a module position named something like
        <code>cpanel-com-<replaceable>example</replaceable>-<replaceable>something</replaceable></code>
        where <replaceable>example</replaceable> is the name of your component
        without <code>com_</code> and <replaceable>something</replaceable> is
        the name of your custom dashboard without the component prefix. The
        aforementioned example module corresponds to the dashboard
        <code>com_example.something</code>.</para>

        <para>Likewise, Quick Icon modules can be assigned to a custom
        dashboard by publishing them to the module position
        <code>icon-com-<replaceable>example</replaceable>-<replaceable>something</replaceable></code>
        following the same convention as above (you just replace
        <code>cpanel</code> with <code>icon</code>). Remember that Quick Icon
        modules are displayed <emphasis>above</emphasis> the other dashboard
        modules.</para>
      </tip>
    </section>

    <section xml:id="com-installation-script">
      <title>The installation script</title>

      <para>We touched a bit on the installation script when talking about
      <link linkend="com-dashboard">Dashboards</link>. But what is an
      installation script?</para>

      <para>When Joomla is installing an extension it gives us, the developers
      of the extension, the opportunity to run some custom PHP code at
      different phases of the installer execution using the different methods
      provided in our installer script (you can see all available methods in
      the
      <interfacename>\Joomla\CMS\Installer\InstallerScriptInterface</interfacename>
      interface):</para>

      <variablelist>
        <varlistentry>
          <term>public function preflight(string $type, InstallerAdapter
          $adapter): bool;</term>

          <listitem>
            <para>Runs before the component is installed, updated or
            uninstalled.</para>

            <para>This is where you make basic environment checks and make
            sure that the installer can proceed. Return boolean false to stop
            the installer, causing to display an error like “Extension
            <replaceable>something</replaceable>: Custom install routine
            failure.”</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>public function install(InstallerAdapter $adapter):
          bool;</term>

          <listitem>
            <para>Runs after your extension has been installed. This only
            happens on a clean installation, i.e. your extension was not
            previously installed.</para>

            <para>This is where you can run code which only applies to a clean
            installation, e.g. publishing modules and plugins necessary for
            your component to work.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>public function update(InstallerAdapter $adapter):
          bool;</term>

          <listitem>
            <para>Runs after your extension has been updated.</para>

            <warning>
              <para>“Updated” is a term used <emphasis>very loosely</emphasis>
              by Joomla. It merely means that a different version than the one
              which was previously installed on the site has been installed.
              It might be <emphasis>the same</emphasis> version (refresh) or
              even an earlier version (downgrade).</para>
            </warning>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>public function uninstall(InstallerAdapter $adapter):
          bool;</term>

          <listitem>
            <para>Runs after your extension has been successfully
            uninstalled.</para>

            <para>Use this to perform any necessary cleanup which could not be
            performed by Joomla removing the files and folders of your
            extension and running the uninstallation SQL files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>public function postflight(string $type, InstallerAdapter
          $adapter): bool;</term>

          <listitem>
            <para>This runs at the very last end, before Joomla cleans up. It
            runs after the extension has been installed, updated or
            uninstalled.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In the above methods you can see one or two parameters:</para>

      <variablelist>
        <varlistentry>
          <term>string $type</term>

          <listitem>
            <para>Whenever present it tells us which kind of operation is
            taking place:</para>

            <itemizedlist>
              <listitem>
                <para><code>install</code>. The extension is being installed
                from a package uploaded via the browser, a package downloaded
                from an HTTP/HTTPS source, the Install via Web feature or from
                a directory. This is a normal installation from scratch. The
                extension had not been previously installed.</para>
              </listitem>

              <listitem>
                <para><code>discover_install</code>. The extension is being
                installed using the Discover feature. This means that the
                files are already placed on the site but there's no guarantee
                that some files are not missing! Also note that you cannot
                install a package extension like that. If your component is
                part of a package it should return <code>false</code> in the
                preflight method to prevent a broken, non-updatable
                installation of your component to persist on the site.</para>
              </listitem>

              <listitem>
                <para><code>update</code>. Another version of your extension
                (NOT necessarily older!) was already installed on the site and
                the user is trying to install a different version.</para>
              </listitem>

              <listitem>
                <para><code>uninstall</code>. Your extension is being
                uninstalled.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>InstallerAdapter $adapter</term>

          <listitem>
            <para>This is an instance of the
            <classname>\Joomla\CMS\Installer\InstallerAdapter</classname>
            subclass handling the installation, update or uninstallation of
            your extension. For components, that's actually an instance of the
            <classname>\Joomla\CMS\Installer\Adapter\ComponentAdapter</classname>
            class.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>To use an installation script you have to declare it in your
      extension's XML manifest. For example:</para>

      <programlisting language="xml">&lt;scriptfile&gt;script.example.php&lt;/scriptfile&gt;</programlisting>

      <para>The file must be included with your extension's XML manifest at
      the archive's root.</para>

      <para>The <code>script.example.php</code> file will contain our
      extension installation script. You are familiar with that; it's been
      around since Joomla 1.0.</para>

      <para>Since Joomla 3.6 there's a superclass our installation script can
      extend from. In Joomla 3 it was called
      <classname>JInstallerScript</classname>, in Joomla 4 it's
      <classname>Joomla\CMS\Installer\InstallerScript</classname> (the old
      name will work up to and including Joomla 5.3). When your script extends
      from this class you can unlock a lot of useful functionality.</para>

      <note>
        <para>This class is actually a fork of the <link
        xlink:href="https://github.com/akeeba/fof/blob/fof-2.x/fof/utils/installscript/installscript.php">F0FUtilsInstallscript
        class</link> I had introduced in FOF since 2014 and maintained until
        2021, when FOF officially became obsolete and I moved all my
        development to Joomla core MVC. The fork was contributed by George
        Wilson in 2016 — he had already asked me for permission to fork some
        useful bits of FOF 2 as it was going to be EOL in June that year. Just
        an aside, so that you know that Joomla and 3PDs have a symbiotic
        relationship; <emphasis>we help each other survive</emphasis>.</para>
      </note>

      <bridgehead>Minimum Joomla and PHP versions</bridgehead>

      <para>The installation script can automatically enforce a minimum Joomla
      and / or PHP version for your extension. If the minimum requirements are
      not met the installation or upgrade will abort with the aforementioned
      error. You can do that by setting the relevant properties in your
      class:</para>

      <programlisting language="php">// The extension will only install on PHP 8.0.0 or later
protected $minimumPhp = '8.0.0';

// The extension will only install on Joomla 4.2.0 or later
protected $minimumJoomla = '4.2.0';</programlisting>

      <bridgehead>Handling downgrades</bridgehead>

      <para>As mentioned earlier, Joomla uses the term “upgrade” very loosely.
      If you install any version of your extension while another (or the
      same!) version is already installed Joomla will happily oblige and call
      it an “upgrade”. However, most extensions cannot
      <emphasis>downgrade</emphasis> cleanly, i.e. going from version 2.0.0 to
      version 1.9.3 may not work at all. This makes perfect sense. You cannot
      possibly travel back in time to update the installation script of your
      extension's older versions to make a downgrade possible — if it's even
      at all possible. Therefore, <emphasis role="bold">by default, the
      installation script will prevent downgrades</emphasis>. Users can only
      install the same or a newer version of your software.</para>

      <warning>
        <para>Preventing downgrades will only work properly if your extension
        uses <link xlink:href="https://semver.org">Semantic Versioning
        (SemVer)</link>. Your development / nightly releases must additionally
        follow <link
        xlink:href="https://www.php.net/manual/en/function.version-compare.php">PHP's
        versioning rules</link>. That is to say, a development / nightly
        release coming after the official release of version 1.2.3 must be
        named something like 1.2.<emphasis
        role="bold">4</emphasis>-dev-20220914.</para>
      </warning>

      <para>There are cases where you might not want to do that. Simpler
      extensions may support downgrades, or you may have implemented some
      solution which allows you to perform downgrades (e.g. you may have added
      a custom file in every new release to handle downgrades to a previous
      version). Or you may just not use semantic versioning and you'd rather
      implement your custom logic to determine when something is a downgrade
      or not. In this case set this in your installer class:</para>

      <programlisting language="php">protected $allowDowngrades = true;</programlisting>

      <bridgehead>Removing obsolete folders and files</bridgehead>

      <para>As we progress through versions of our software we have to contend
      with the fact that some code becomes obsolete and needs to be removed,
      Joomla has changed leading to moved files, or we might even need to
      refactor code and move things around. This means that we have files and
      folders which need to be removed on upgrade.</para>

      <para>Joomla will automatically remove folders and files explicitly
      listed in the XML manifest of the installed version but not on the new
      version's XML manifest. This means that only, for example, top level
      component folders are removed on update. If you have a few specific
      files, e.g. some obsolete view template files, or folders deeper inside
      the directory structure they will not be automatically removed.</para>

      <para>The $deleteFiles and $deleteFolders properties allow you to
      specify which files and folders need to be removed, if they exist, on
      update. For example:</para>

      <programlisting language="php">protected $deleteFiles = [
  JPATH_SITE . '/components/com_example/tmpl/welcome/default_donate.php',
  JPATH_ADMINISTRATOR . '/components/com_example/tmpl/item/default_phpwarning.php',
];

protected $deleteFolders = [
  JPATH_SITE . '/media/com_example/icons',
];</programlisting>
    </section>

    <section xml:id="com-menus">
      <title>Component menus</title>

      <para>When we are talking about component menus, what comes in mind?
      Usually it's just the user's ability to create menu items to specific
      views of your component in the frontend of the site.</para>

      <para>Joomla components are much more than that. To begin with, the XML
      manifest defines the default component menu and its submenu items. As
      we've already learned, this can be augmented with customisable
      Dashboards (introduced in Joomla 4.0) to help site integrators tailor
      the backend experience of their clients as they wish. Ever <link
      xlink:href="https://www.joomla.org/announcements/release-news/5664-joomla-3-6-is-here.html">since
      Joomla 3.6</link> it's possible to apply permissions (ACL rules) to
      backend menu items to modify the submenu items in a way which makes more
      sense depending on who is logged in.</para>

      <para>Moreover, ever <link
      xlink:href="https://www.joomla.org/announcements/release-news/5703-joomla-3-7-is-here.html">since
      Joomla 3.7</link>, it is possible to have a custom backend menus. This
      is one more way for site integrators to fully customise the backend
      experience of their clients, using menu titles which make sense in the
      business context they are going to be used instead of the much drier,
      purely functional and very technical language core Joomla and us third
      party developers use.</para>

      <para>All these features are linked to and defined by the components
      installed on the site, core and third party. Let's see how you can make
      the magic happen.</para>

      <section xml:id="com-menus-component">
        <title>The default component menu</title>

        <para>The default component menu is what appears in Joomla's main menu
        (the sidebar) under the Components menu item. You define this menu in
        your component's XML manifest, under the
        <code>&lt;administration&gt;</code> section. Joomla <link
        xlink:href="https://docs.joomla.org/Manifest_files#Menu_Links_and_Submenus">has
        some partial documentation</link> on how that works.</para>

        <para>At the very least, every component needs to have the top level
        item, a <code>&lt;menu&gt;</code> tag directly under the
        <code>&lt;administration&gt;</code> section. This controls how your
        component will appear in the <guimenu>Components</guimenu>
        menu.</para>

        <para>If you want a sub-menu under your top level item you need to
        also add a <code>&lt;submenu&gt;</code> tag at the same level as the
        <code>&lt;menu&gt;</code> tag. Unlike the menu tag, this one does not
        have any attributes. However, it can contain one or more
        <code>&lt;menu&gt;</code> tags, one per sub-menu item.</para>

        <important>
          <para>If you define a sub-menu then the top level menu item becomes
          a toggle for the sub-menu and cannot be clicked. For this reason you
          will have to duplicate the top level link as a sub-menu item.</para>
        </important>

        <note>
          <para>It is possible to have third (or more) level sub-menus by
          nesting <code>&lt;menu&gt;</code> tags. <emphasis>Just because you
          can doesn't mean you should</emphasis>. Multi-level menus are
          user-hostile, especially when the available width to display their
          label is ever shrinking the deeper you go into the menu
          structure.</para>

          <para>If you find yourself even considering a multi-level menu,
          you're doing something wrong. Try creating a dashboard instead or
          otherwise group the functionality of your component so it doesn't
          rely on a byzantine menu structure.</para>
        </note>

        <para>A very simple extension menu would look like this in your XML
        manifest (as per the Joomla documentation):</para>

        <programlisting language="xml">	&lt;menu&gt;COM_EXAMPLE&lt;/menu&gt;
    &lt;submenu&gt;
        &lt;!--
            Note that all &amp; must be escaped to &amp;amp; for the file to be valid
            XML and be parsed by the installer
        --&gt;
        &lt;menu link="anoption=avalue&amp;amp;anoption1=avalue1"&gt;COM_EXAMPLE_SUBMENU_ANOPTION&lt;/menu&gt;
        &lt;menu view="viewname"&gt;COM_EXAMPLE_SUBMENU_VIEWNAME&lt;/menu&gt;
    &lt;/submenu&gt;</programlisting>

        <para>This does not tell you the whole truth and is actually a
        partial, confusing and harmful representation of what Joomla can do.
        Here is a more realistic example:</para>

        <programlisting language="xml">&lt;menu&gt;
  &lt;params&gt;
    &lt;dashboard&gt;com_example.something&lt;/dashboard&gt;
  &lt;/params&gt;
  COM_EXAMPLE
&lt;/menu&gt;

&lt;submenu&gt;
&lt;!--
  Note that all &amp; must be escaped to &amp;amp; for the file to be valid
  XML and be parsed by the installer
--&gt;
  &lt;menu view="welcome"&gt;COM_EXAMPLE_MENUS_WELCOME&lt;/menu&gt;

  &lt;menu link="index.php?option=com_categories&amp;amp;extension=com_example"&gt;
    &lt;params&gt;
      &lt;menu-permission&gt;core.manage;com_categories&lt;/menu-permission&gt;
      &lt;menu-quicktask&gt;index.php?option=com_categories&amp;amp;task=category.add&amp;amp;extension=com_example&lt;/menu-quicktask&gt;
      &lt;menu-quicktask-title&gt;COM_EXAMPLE_MENUS_ADD_CATEGORY&lt;/menu-quicktask-title&gt;
      &lt;menu-quicktask-permission&gt;core.create;com_categories&lt;/menu-quicktask-permission&gt;
    &lt;/params&gt;
    JCATEGORIES
  &lt;/menu&gt;

  &lt;menu view="items"&gt;
    &lt;params&gt;
      &lt;menu-permission&gt;core.manage;com_example&lt;/menu-permission&gt;
      &lt;menu-quicktask&gt;index.php?option=com_example&amp;amp;task=item.add&lt;/menu-quicktask&gt;
      &lt;menu-quicktask-title&gt;COM_EXAMPLE_MENUS_ADD_ITEM&lt;/menu-quicktask-title&gt;
      &lt;menu-quicktask-permission&gt;core.create;com_example&lt;/menu-quicktask-permission&gt;
    &lt;/params&gt;
    COM_EXAMPLE_MENUS_ITEMS
  &lt;/menu&gt;
&lt;/submenu&gt;</programlisting>

        <para>Woah! It's pretty substantially different. This is a better
        example because it shows you all the interesting and insanely powerful
        things you can do with the humble component menu. Let's take it easy,
        break it down to individual bits and pieces and it will all become
        crystal clear, I promise!</para>

        <bridgehead>An x-ray of the <code>&lt;menu&gt;</code> tag</bridgehead>

        <para>Every <code>&lt;menu&gt;</code> tag consist of:</para>

        <itemizedlist>
          <listitem>
            <para>Zero or more attributes. These determine what kind of link
            the rendered menu item will produce.</para>
          </listitem>

          <listitem>
            <para>A single, but optional ,<code>&lt;params&gt;</code> element
            with one or more child elements. These are menu parameters which
            are used to define menu item access (ACL permissions), whether the
            menu item should display a Dashboard link and whether the menu
            item should display a quick action button next to it.</para>
          </listitem>

          <listitem>
            <para>Text content, e.g. <code>COM_EXAMPLE_MENUS_WELCOME</code>.
            This is a language string which is used to translate the menu
            item's title in the user's language.</para>

            <note>
              <para>The language strings for the component menu items' titles
              are in the backend system language file, i.e.
              <filename>com_example.sys.ini</filename> for a
              <code>com_example</code> component.</para>
            </note>

            <warning>
              <para>Do <emphasis role="bold">not</emphasis> use
              <code>&lt;img&gt;</code> or <code>&lt;span&gt;</code> tags in
              your language strings to display icons. <emphasis>Some major
              Joomla extension developers should know better than do that, and
              yet…</emphasis></para>

              <para>There are the <code>menu_icon</code> and
              <code>menu_image</code> parameters to do that correctly, if you
              really need to. Using a tag at the beginning of your language
              string breaks alphabetical sorting of the Components menu,
              making it much harder for end users to navigate it. Finally, as
              we will see further below, using iconography in menus is a bad
              idea anyway.</para>
            </warning>
          </listitem>
        </itemizedlist>

        <bridgehead>The <code>&lt;menu&gt;</code> attributes</bridgehead>

        <para>Each menu tag can have a combination of the following
        attributes:</para>

        <variablelist>
          <varlistentry>
            <term>type</term>

            <listitem>
              <para>Normally not set. You can set it to
              <code>separator</code>. In this case do <emphasis
              role="bold">not</emphasis> set a <code>link</code> or
              <code>view</code> attribute; the text content of the menu item
              will be rendered as a non-linked header in the menu
              structure.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>target</term>

            <listitem>
              <para>Only applies if you are using the <code>link</code>
              attribute. Corresponds to the <code>&lt;a&gt;</code> HTML tag's
              <code>target</code> attribute. Useful if you want to create a
              menu item linking to an external site and you'd like to open it
              in a new tab / window; in this case set
              <code>target="_blank"</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>link</term>

            <listitem>
              <para>A link the browser will navigate to. You should ideally
              only use this to point to pages of components other than yours,
              e.g.
              <uri>index.php?option=com_categories&amp;extension=com_example</uri>
              to display the categories management interface through Joomla's
              <code>com_categories</code> core component.</para>

              <para>Note that a link pointing to another page in the site's
              backend is relative to <uri>/administrator</uri>. <emphasis>Do
              not</emphasis> put <uri>/administrator</uri> in front, though;
              this would break the menu for sites which are installed in
              subdirectories.</para>

              <para>This attribute is mutually exclusive with
              <code>view</code>. If both are set, <code>link</code> will be
              applied.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>view</term>

            <listitem>
              <para>The view of the current component you want to link
              to.</para>

              <para>For example, if we are in the XML manifest of the
              <code>com_example</code> component and you set
              <code>view="welcome"</code> it's the same as if you had used
              <code>link="index.php?option=com_example&amp;view=welcome"</code>.</para>

              <para>This attribute is mutually exclusive with
              <code>link</code>. If both are set, <code>link</code> will be
              applied.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>ajaxbadge</term>

            <listitem>
              <para>While you will normally only see that in menu presets used
              in Dashboards, this is perfectly supported in the component's
              menu as well.</para>

              <para>When set, a badge will appear next to the title. Joomla
              will perform an AJAX request to the URL provided in the value of
              this attribute. This URL is supposed to return a JSON document
              with the following keys:</para>

              <programlisting language="json">{
  "success": true,
  "error": "",
  "data": "something"
}</programlisting>

              <para>If the <code>success</code> key is true Joomla will take
              the <code>data</code> key's value, sanitise its HTML (only
              allowing a subset of tags and attributes you can find in the
              <filename>build/media_source/system/js/core.es6.js</filename>
              file in Joomla's repository) and put that sanitised HTML in the
              badge.</para>

              <para>This is typically used to display the number of items
              which require attention.</para>

              <warning>
                <para>Do not go overboard with this feature! This AJAX request
                will run on every page of your site's backend, slowing
                everything down. I have not yet seen a
                <emphasis>practical</emphasis> use case where this is even
                remotely acceptable.</para>
              </warning>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Despite what the Joomla documentation wants you to believe,
        there is neither an <code>alt</code> nor an <code>img</code>
        attribute; these existed in Joomla 2.5 and earlier. But there are so
        many more attributes not mentioned in there.</para>

        <bridgehead>The &lt;menu&gt; parameters</bridgehead>

        <para>As we mentioned earlier, the <code>&lt;menu&gt;</code> tag can
        include an optional <code>&lt;params&gt;</code> tag which, in its
        turn, contains a number of tags. Everything under
        <code>&lt;params&gt;</code> is parsed as parameters to the menu item.
        The tag name is the parameter key and its contents is the parameter's
        value.</para>

        <para>Here are the supported tag names I've discovered by
        reverse-engineering the code of the backend <code>mod_menu</code>
        module:</para>

        <variablelist>
          <varlistentry>
            <term>dashboard</term>

            <listitem>
              <para>If set, it creates a dashboard icon next to the menu
              item's title, linking to the named dashboard.</para>

              <para>Example:
              <code>&lt;dashboard&gt;com_example.example&lt;/dashboard&gt;</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu-permission</term>

            <listitem>
              <para>The Joomla ACL permission the user needs to have to see
              this menu item (and all its sub-items, if any).</para>

              <para>To use global permissions (set in the Permissions tab of
              Global Configuration) use the format
              <code>&lt;menu-permission&gt;core.manage&lt;/menu-permission&gt;</code></para>

              <para>To use component-level permissions (set in the Permissions
              tab of a component) use the format
              <code>&lt;menu-permission&gt;core.manage;com_example&lt;/menu-permission&gt;</code></para>

              <para>You can NOT ask Joomla to combine multiple permissions
              i.e. you cannot ask it to only display a menu item if two or
              more permissions are simultaneously granted; or if one of
              several permissions is granted. The reason for that can be found
              in the code of
              <code>\Joomla\Module\Submenu\Administrator\Menu\Menu::preprocess</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu-quicktask</term>

            <listitem>
              <para>Menu items can have an optional “quick task” shown next to
              them. This is a small button with an icon and no visible text
              (the text is only made available to users of assistive
              technologies for accessibility reasons). The value of this
              parameter is the URL to visit when the quick task button is
              used. It follows the same rules as the <code>link</code>
              attribute.</para>

              <para>Example:
              <code>&lt;menu-quicktask&gt;index.php?option=com_example&amp;amp;task=item.add&lt;/menu-quicktask&gt;</code></para>

              <note>
                <para>While this is <emphasis>typically</emphasis> used to
                render a [+] icon button to add new items, this is not
                necessary. You can use whatever action feels right in context
                and whichever icon you think is appropriate for the
                action.</para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu-quicktask-icon</term>

            <listitem>
              <para>The icon class for the quick task. If it's not specified
              it will default to <code>plus</code>.</para>

              <para>The contents of this parameter are prefixed with the
              string literal <code>icon-</code> to create the HTML
              <code>class</code> attribute. For example,
              <code>&lt;menu-quicktask-icon&gt;cog&lt;/menu-quicktask-icon&gt;</code>
              will result in <code>class="icon-cog"</code> which displays a
              cog wheel icon.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu-quicktask-title</term>

            <listitem>
              <para>A language string which describes the quick task to users
              of assistive technologies (e.g. screen readers, Braille
              displays, …). If not defined, the language string
              <code>MOD_MENU_QUICKTASK_NEW</code> (New Item) will be
              used.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu-quicktask-permission</term>

            <listitem>
              <para>Equivalent to menu-permission but applies to the quick
              task instead. Use this to limit who should be able to view the
              quick task icon.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu_image</term>

            <listitem>
              <para>The (relative) URL to an image file to use for the menu
              item.</para>

              <para>This is mutually exclusive with the <code>menu-icon</code>
              parameter.</para>

              <note>
                <para>It is generally bad form using images for menu
                items.</para>

                <para>Images, especially raster (bitmap) images, may not
                display very well and make the backend of the site look cheap
                and unprofessional.</para>

                <para>Images, unlike language strings, are untranslatable and
                cannot be replaced for different languages and cultures.
                Iconography with vector images may have radically different
                meanings depending on the cultural context and personal
                circumstances. For example, an open palm facing the user with
                fingers spread out means "stop" in the USA but is a vulgar
                gesture in Greece and Cyprus (it literally means “I spread
                feces on your face”). A beer mug is a relatively inoffensive
                icon unless you're putting that in front of Muslims who are
                required to abstain from alcohol per their religion or
                recovering alcoholics (or those who've lost a loved one to a
                DUI fatal accident) who may find that iconography
                triggering.</para>

                <para>You <emphasis role="bold">MUST NOT</emphasis> use an
                icon instead of human-readable text content for the title of
                the menu item. This is inaccessible to people with
                disabilities such as hard-of-seeing or blind people, people
                with cognitive disabilities etc.</para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>menu_icon</term>

            <listitem>
              <para>When provided it will set the menu item's icon class to
              the string literal <code>class-</code> followed by the contents
              of this parameter. For example,
              <code>&lt;menu-image&gt;cog&lt;menu-image&gt;</code> will result
              in <code>class="icon-cog"</code> being applied to the menu
              item's icon <code>&lt;span&gt;</code> tag.</para>

              <para>This is mutually exclusive with the
              <code>menu_image</code> parameter.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>text_separator</term>

            <listitem>
              <para>Only applies when the <code>type="separator"</code>
              attribute is used. When set to 1 it will render the separator as
              an <code>&lt;hr&gt;</code> tag instead of text.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="com-menus-backend">
        <title>Backend menu items</title>

        <para>Joomla 3.7 and later allow site integrators to create custom
        backend menus. This lets them fully customise the backend experience
        of Joomla for their clients, e.g. using terms which are more in-line
        with the purpose the menu items will be used instead of the more
        functional and technical terms the Joomla core and us third party
        developers use.</para>

        <para>If you do not do anything else, Joomla will simply list all of
        your <link linkend="com-menus-component">component's default menu
        items</link>, as they are defined in your XML manifest. This is the
        simplest way to do things, but it's not very configurable. Menu items
        created like that just take the user to the relevant view of your
        component.</para>

        <para>The other option you have is to create menu item configuration
        XML files in your backend <filename>tmpl</filename> folder's
        sub-folders. This is a lot like managing <link
        linkend="com-menus-frontend">frontend menu items</link>, with a few
        extra features.</para>

        <bridgehead>View XML files location and name</bridgehead>

        <para>Your view XML files are placed in the sub-folders of your
        <filename>tmpl</filename> folder and they are named after the view
        template file. For example, if you have a component
        <code>com_example</code>, a view named <code>welcome</code> and a view
        template for that view named <code>default</code> the view XML file
        would be
        <filename>administrator/components/com_example/tmpl/welcome/default.xml</filename>.</para>

        <bridgehead>View XML file structure</bridgehead>

        <para>A view XML file has the following overall structure:</para>

        <programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;metadata&gt;
    &lt;layout title="COM_EXAMPLE_WELCOME_VIEW_DEFAULT_TITLE"&gt;
        &lt;message&gt;COM_EXAMPLE_WELCOME_VIEW_DEFAULT_DESC&lt;/message&gt;
    &lt;/layout&gt;
    &lt;!-- Add fields to the request variables for the layout. --&gt;
    &lt;fields name="request"&gt;
        &lt;fieldset
                name="request"
        &gt;
            &lt;field
                name="something"
                type="text"
                label="COM_EXAMPLE_WELCOME_VIEW_OPTION_SOMETHING_LABEL"
                description="COM_EXAMPLE_WELCOME_VIEW_OPTION_SOMETHING_DESC"
            /&gt;
        &lt;/fieldset&gt;
    &lt;/fields&gt;
    &lt;fields name="params"&gt;
        &lt;fieldset name="basic"&gt;
            &lt;field
                    name="menu-quicktask"
                    type="radio"
                    label="MOD_MENU_FIELD_SHOWNEW"
                    layout="joomla.form.field.radio.switcher"
            &gt;
                &lt;option value=""&gt;JHIDE&lt;/option&gt;
                &lt;option value="index.php?option=com_example&amp;amp;task=item.add"&gt;JSHOW&lt;/option&gt;
            &lt;/field&gt;

            &lt;field
                    name="menu-quicktask-title"
                    type="hidden"
                    default="COM_EXAMPLE_MENUS_NEW_ITEM"
            /&gt;
        &lt;/fieldset&gt;
    &lt;/fields&gt;
&lt;/metadata&gt;
</programlisting>

        <para>The root tag of the XML document is always
        <code>&lt;metadata&gt;</code>. The <code>&lt;layout&gt;</code> section
        is mandatory. The <code>&lt;fields&gt;</code> sections are
        optional.</para>

        <bridgehead>The <code>&lt;layout&gt;</code> section</bridgehead>

        <para>This section tells Joomla how to display the available menu item
        type to the site integrator when they are creating a custom backend
        menu item.</para>

        <para>The <code>title</code> attribute contains a language string
        which appears as the title of the menu type selector and in the
        <guilabel>Menu Item Type</guilabel> option of the menu item's edit
        page. Keep it short and to the point. Do not include the component's
        name in it unless it's absolutely necessary for disambiguation. In
        this case, you may want to use something like “Clear Cache (Example)”,
        i.e. put the component's name in parentheses after the view
        title.</para>

        <note>
          <para>When writing messages keep in mind the constraints of the
          human working memory. Short, to the point messages work best.
          There's less for the human operator to keep in their working memory.
          Put the important part first (message front-loading). That's why it
          makes sense to put the component name in parentheses at the end of
          the title; it's not as important as <emphasis>what the menu item
          does</emphasis>.</para>
        </note>

        <para>The content of the <code>&lt;layout&gt;</code> tag can either be
        empty or contain exactly one <code>&lt;message&gt;</code> tag with a
        text content which is also a language string key<footnote>
            <para>Core components put the language string key inside a
            <code>&lt;![CDATA[…]]&gt;</code> wrapper. This is not necessary
            since Joomla 1.6. Language string keys are meant to only consist
            of uppercase, unaccented Latin letters without diacritics and
            underscores. These characters are allowed as the text value of an
            XML node. The CDATA wrapper is a leftover from Joomla 1.5 when the
            language string key was an entire English phrase, possibly
            containing characters not allowed in an XML document without being
            converted to entities.</para>
          </footnote>. This is a slightly longer description of what the view
        does. It is displayed in the view type selector right under the title.
        If you need to provide a description keep it short and do not repeat
        what can already be obviously inferred by reading the view
        title.</para>

        <bridgehead>The request &lt;fields&gt; section</bridgehead>

        <para>The XML file can have one or more <code>&lt;fields&gt;</code>
        sections. The first section we see in the example above are the
        request fields, wrapped in a <code>&lt;fields
        name="request"&gt;</code> tag. These define configuration parameters
        which will be present in the menu item's URL as GET parameters (i.e.
        part of the URL itself). The name of the URL parameter is the
        <code>name</code> attribute of the field tag and its value will be the
        URL parameter's value as well.</para>

        <para>This section contains exactly one <code>&lt;fieldset&gt;</code>
        tag with <code>name="request"</code>. The fields in this set will be
        displayed in the <guilabel>Details</guilabel> tab of the menu item
        edit page.</para>

        <para>Remember that if you do not define any fields or omit this
        section altogether the resulting link will be
        <uri>index.php?option=com_example&amp;view=something&amp;layout=default</uri>
        where <code>com_example</code> is the name of your component,
        <code>something</code> is the name of the view (the name of the
        subfolder the XML file is in) and <code>default</code> is the name of
        the XML file without the .xml extension.</para>

        <tip>
          <para>If you want to provide GET URL parameters the user cannot
          modify use field tags with <code>type="hidden"</code>.</para>
        </tip>

        <bridgehead>The parameters &lt;fields&gt; section</bridgehead>

        <para>The next optional section is wrapped in a <code>&lt;fields
        name="params"&gt;</code> tag and has one or more
        <code>&lt;fieldset&gt;</code> tags, rendered as tabs in the menu item
        edit page. If you do not specify a title and name your field set
        <code>basic</code> it will render as a tab labelled
        <guilabel>Options</guilabel>.</para>

        <para>While the request fields modify the URL generated by the menu
        link, the parameter fields modify how Joomla will display the menu
        item itself in the backend menu. The are the same as the
        <code>&lt;params&gt;</code> tags in the component's menu and, in fact,
        have the same names — so we're not copying the documentation here
        again.</para>
      </section>

      <section xml:id="com-menus-frontend">
        <title>Frontend menu items</title>

        <para>Creating menu item types for frontend menus is pretty much the
        same <link linkend="com-menus-backend">as with backend menus</link>
        with a few key differences:</para>

        <itemizedlist>
          <listitem>
            <para>The files go into the frontend view templates' directories
            e.g.
            <filename>components/com_example/tmpl/welcome/default.xml</filename>.</para>
          </listitem>

          <listitem>
            <para>The frontend menu item parameters do not control the display
            of the menu item, they are passed to the View object and have
            component-specific meaning.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="com-data-to-frontend">
      <title>Passing data from the backend to the JavaScript on the
      page</title>

      <para>Back in the early Joomla 3 days we used to send data to the
      frontend JavaScript code using inline JavaScript fragments. For
      example:</para>

      <programlisting language="php">JFactory::getDocument()-&gt;addScriptDeclaration(&lt;&lt;&lt;JS
var comExampleSomething = "{$foobar}";
JS
);</programlisting>

      <para>On the client side (JavaScript) you'd just use this JavaScript
      variable.</para>

      <para>This is bad for a number of reasons. To begin with, the inline
      script declaration must definitely be parsed before any other code —
      including JavaScript files — which make use of it. Back when all scripts
      were loaded in the document's <code>&lt;head&gt;</code> that was a
      given. However, this code broke spectacularly when met with any plugin
      or third party solution (such as CloudFlare RocketLoader) which moved
      the scripts at the bottom of the HTML <code>&lt;body&gt;</code> or
      lazy-loaded them. There was no guaranteed script execution
      anymore.</para>

      <para>The variable being passed (in our example, <code>$foobar</code>)
      would have to be properly escaped to make it valid JavaScript or the
      client-side could break or, worse, we'd introduce a security
      vulnerability!</para>

      <para>Moreover, this solution pollutes the JavaScript global scope and
      slows down the page as the browser has to stop parsing the DOM and
      rendering the page to evaluate the JavaScript.</para>

      <para>Ever since Joomla 3.5 you had the option to instead push script
      options through the document:</para>

      <programlisting language="php">\Joomla\CMS\Factory::getDocument()-&gt;addScriptOptions(
  'com_example',
  [
    'foo' =&gt; $foobar,
    'bar' =&gt; SOME_CONSTANT,
  ]
);</programlisting>

      <para>This embeds a JSON document into the HTML which does not need to
      be parsed by the browser as JavaScript. Instead, when the core
      JavaScript loads it will parse it and make it available to our
      client-side code:</para>

      <programlisting language="javascript">var comExampleOptions = Joomla.getOptions('com_example');
var distance = comExampleOptions.foo * comExampleOptions.bar;</programlisting>

      <para>But how can we be sure that our code loads after the core Joomla
      JavaScript? Well, this is trivial in Joomla 4 and later by using the
      <link linkend="concepts-webassetmanager">WebAssetManager</link> and
      adding <code>core</code> as a dependency. We also need to set our script
      to have the option <code>"defer": true</code> in our
      <filename>joomla.asset.json</filename> file so it loads deferred, i.e.
      after the browser parses the DOM — just like the core JavaScript does.
      This way we can be sure that our file executes after
      <code>Joomla.getOptions</code> is available in JavaScript and we no
      longer need to add special code to execute our code after the page has
      finished loading; both conditions are guaranteed.</para>
    </section>

    <section xml:id="com-lang">
      <title>Language files</title>

      <para>The Joomla language files have not really changed much since
      Joomla 1.0. Joomla is using the <link
      xlink:href="https://en.wikipedia.org/wiki/INI_file">INI format</link>
      with a few twists:</para>

      <itemizedlist>
        <listitem>
          <para>The keys must always be in UPPERCASE. You cannot have keys in
          lowercase or MixedCase.</para>
        </listitem>

        <listitem>
          <para>The values to the right of the equals sign must be enclosed in
          double quotes (<code>"</code>).</para>
        </listitem>

        <listitem>
          <para>If you want to use double quotes inside your values you need
          to escape them as <code>\"</code>.</para>
        </listitem>

        <listitem>
          <para>Some language strings are used in JavaScript code using a
          legacy method. They do not support escaped double quotes. Use single
          quotes (<code>'</code>) instead, even for HTML attributes (yes, HTML
          allows you to do things like <code>&lt;a
          href='https://www.example.com'&gt;example&lt;/a&gt;</code> even
          though attribute values <emphasis>should</emphasis> use double
          quotes for compatibility with XHTML). If you want to put quotes
          around human-readable text you can also use calligraphic quotes:
          <code>“ ” ‘ ’</code> and so on.</para>
        </listitem>

        <listitem>
          <para>You can comment a line by putting a semicolon (<code>;</code>)
          as its first character. Do not put semicolons at the end of strings,
          they might be parsed as part of the value.</para>
        </listitem>
      </itemizedlist>

      <bridgehead>No more language tags in filenames</bridgehead>

      <para>There is a pretty big change for language file
      <emphasis>naming</emphasis> in Joomla 4 and beyond: <emphasis
      role="bold">you must not use the language prefix</emphasis>.</para>

      <para>In Joomla 1.5 to 3.10 inclusive language files were named like
      <filename>en-GB.com_example.ini</filename> (British English),
      <filename>de-DE.com_example.ini</filename> (German, Germany) and
      <filename>de-AT.com_example.ini</filename> (German, Austria).</para>

      <para>However, that naming was highly redundant as starting with Joomla
      1.6 in 2010 the language files had to be placed in a folder whose name
      was the language tag itself! Inside a language folder you'd have the
      relative filepaths <filename>en-GB/en-GB.com_example.ini</filename>,
      <filename>de-DE/de-DE.com_example.ini</filename> and
      <filename>de-AT/de-AT.com_example.ini</filename>. Having the same
      language tag appear twice in a pathname didn't make sense. Therefore in
      Joomla 4 and beyond we no longer use the language tag prefix!</para>

      <para>The files are now simply named similar to
      <filename>com_example.ini</filename>. The language of the file is
      inferred from the folder name it's in. For example, the filepath
      <filename>en-GB/com_example.ini</filename> obviously refers to British
      English.</para>

      <bridgehead>Component language files</bridgehead>

      <para>A component has multiple different language files. The base name
      of all files is the name of the Joomla component extension, e.g.
      <code>com_example</code>:</para>

      <itemizedlist>
        <listitem>
          <para>Backend <filename>com_example.sys.ini</filename> — System
          language file. Required. Used to render the backend menu items and
          menu item types (for both front- and backend menu items).</para>
        </listitem>

        <listitem>
          <para>Backend <filename>com_example.ini</filename> — Backend
          language file. Required. Used to render the backend interface and
          the component's Options page.</para>
        </listitem>

        <listitem>
          <para>Frontend <filename>com_example.ini</filename> — Frontend
          language file. Optional (only if your component has a frontend
          part).</para>
        </listitem>

        <listitem>
          <para>API <filename>com_example.ini</filename> — API application
          language file. Optional (only if your component has an API
          application integration).</para>
        </listitem>
      </itemizedlist>

      <para>The language files are placed in the respective application's
      <filename>language</filename> subdirectory. For example, the backend
      language files for British English are placed in
      <filename>administrator/language/en-GB</filename>. Moreover, Joomla will
      fall back to the language subdirectory under your component. For
      example, the backend language files for British English are also sought
      for in
      <filename>administrator/components/com_example/language/en-GB</filename>.
      If files exist in both locations then <emphasis>only</emphasis> the one
      in the application's directory will be loaded.</para>

      <bridgehead>Language file autoloading</bridgehead>

      <para>Unlike previous versions of Joomla, you do NOT have to load your
      language files manually. Joomla loads your component's language files
      automatically.</para>

      <para>Since Joomla 3.3 (based on my recollection, +/- 1 minor version…)
      Joomla will load language files in this order:</para>

      <itemizedlist>
        <listitem>
          <para>(Only if Debug Language is disabled). The language file for
          the site's default language (<code>en-GB</code>, unless a third
          party extension has changed it).</para>
        </listitem>

        <listitem>
          <para>The currently active language's normative INI file (e.g.
          <code>com_example.ini</code>) or legacy INI file (e.g.
          <code>en-GB.com_example.ini</code>).</para>
        </listitem>
      </itemizedlist>

      <para>Joomla will first look in the current application's language
      folder i.e. <filename>administrator/language</filename> for the backend,
      <filename>language</filename> for the frontend and
      <filename>api/language</filename> for the API application.</para>

      <para>If neither the current language's, nor the default language's
      files have been found Joomla will fall back to your component's
      <filename>language</filename> directory. That is to say, your
      component's language directory is a last resort and not guaranteed to be
      used!</para>

      <para>You may wonder: why does Joomla load both the default language
      (British English in most cases) <emphasis>and</emphasis> my current
      language (e.g. Canadian French) files? The reason is simple. All
      components are required to provide a complete language file for the
      default language which for Joomla is British English<footnote>
          <para>Joomla started as a fork of another CMS called Mambo back in
          2005. Mambo was originally developed by an Australian company.
          Australian and British English use the same spelling and are mostly
          the same, so that company chose to make British English the default
          language for Mambo. When Joomla forked off Mambo it retained the
          default language despite the fact that the majority of its
          co-founders were not even native English speakers.</para>

          <para>For the longest time Joomla's default language files were a
          mix of British, American and mangled English (most contributors are
          NOT native English speakers) but as of Joomla 3.9 a lot of effort
          has been put in British English being actually
          <emphasis>British</emphasis> English. There are separate language
          packages for US American English (for those who prefer ‘colored
          trash cans’ to ‘coloured rubbish bins’, for example) and other
          English spellings / dialects.</para>
        </footnote> (<code>en-GB</code>). Translation to other languages are
      optional and often incomplete. Sometime around 2012 we decided that it
      makes far more sense to show an English, human-readable string to
      non-English speakers they can look up in the dictionary or their
      favorite translation tool than an incomprehensible language key like
      <code>COM_EXAMPLE_ITEMS_SELECT_CATEGORY_DEFAULT_LABEL</code>. Of course
      this makes it harder for translators. That's why the Debug Language
      feature was simultaneously introduced. When enabled, the default
      language is not enabled and untranslated strings are marked clearly in
      the output.</para>

      <bridgehead>Defining language files in your XML manifest</bridgehead>

      <para>Your XML manifest needs one set of <tag>&lt;languages&gt;</tag>
      tags per target application.</para>

      <para>For the backend language files, you need to list them under the
      <tag>&lt;administration&gt;</tag> tag:</para>

      <programlisting language="xml">&lt;administration&gt;
  &lt;!-- … --&gt;
  &lt;languages folder="languages/admin"&gt;
    &lt;language tag="en-GB"&gt;en-GB/com_example.ini&lt;/language&gt;
    &lt;language tag="en-GB"&gt;en-GB/com_example.sys.ini&lt;/language&gt;
    &lt;language tag="de-DE"&gt;de-DE/com_example.ini&lt;/language&gt;
    &lt;language tag="de-DE"&gt;de-DE/com_example.sys.ini&lt;/language&gt;
  &lt;/languages&gt;
  &lt;!-- … --&gt;
&lt;/administration&gt;</programlisting>

      <para>This copies the files from the
      <filename>languages/admin</filename> folder in your package to Joomla's
      admin language folder, e.g. the
      <filename>languages/admin/en-GB/com_example.ini</filename> file in your
      package to
      <filename>administrator/language/en-GB/com_example.ini</filename> file
      on your site.</para>

      <para>For the frontend language files, if you have any, you need to list
      them directly under the <tag>&lt;extension&gt;</tag> tag:</para>

      <programlisting language="xml">&lt;extension&gt;
  &lt;!-- … --&gt;
  &lt;languages folder="languages/site"&gt;
    &lt;language tag="en-GB"&gt;en-GB/com_example.ini&lt;/language&gt;
    &lt;language tag="de-DE"&gt;de-DE/com_example.ini&lt;/language&gt;
  &lt;/languages&gt;
  &lt;!-- … --&gt;
&lt;/extension&gt;</programlisting>

      <para>This copies the files from the <filename>languages/site</filename>
      folder in your package to Joomla's site language folder, e.g. the
      <filename>languages/site/en-GB/com_example.ini</filename> file in your
      package to <filename>language/en-GB/com_example.ini</filename> file on
      your site.</para>

      <para>For the API application language files, if you have any, you need
      to list them under the <tag>&lt;api&gt;</tag> tag:</para>

      <programlisting language="xml">&lt;api&gt;
  &lt;!-- … --&gt;
  &lt;languages folder="languages/api"&gt;
    &lt;language tag="en-GB"&gt;en-GB/com_example.ini&lt;/language&gt;
    &lt;language tag="de-DE"&gt;de-DE/com_example.ini&lt;/language&gt;
  &lt;/languages&gt;
  &lt;!-- … --&gt;
&lt;/api&gt;</programlisting>

      <para>This copies the files from the <filename>languages/api</filename>
      folder in your package to Joomla's api language folder, e.g. the
      <filename>languages/api/en-GB/com_example.ini</filename> file in your
      package to <filename>api/language/en-GB/com_example.ini</filename> file
      on your site.</para>

      <bridgehead>Languages and CLI</bridgehead>

      <para>CLI commands do <emphasis>not</emphasis> load any language files
      automatically. You can either supply your language strings in the
      <code>console</code> plugin which registers the commands or, more
      commonly, include them in your backend language file and have the plugin
      load that language file when registering the commands.</para>

      <bridgehead>Custom language files</bridgehead>

      <para>Beyond the regular <filename>.ini</filename> /
      <filename>.sys.ini</filename> files you can have any other language file
      you want. For example, you could have a
      <filename>com_example.alt.ini</filename> file which is only loaded when
      a specific option is enabled in your component. You can do that in your
      component's <link linkend="com-dispatcher">Dispatcher</link>. For
      example:</para>

      <programlisting language="php">$this-&gt;app-&gt;getLanguage()-&gt;load($this-&gt;option . '.alt', JPATH_BASE)
  || $this-&gt;app-&gt;getLanguage()-&gt;load($this-&gt;option . '.alt', JPATH_COMPONENT)</programlisting>

      <bridgehead>Language overrides</bridgehead>

      <para>Language overrides are loaded <emphasis>before</emphasis> any of
      your language files, at the initialisation of the CMSApplication object,
      namely when the Language object is constructed. They are stored in the
      file
      <filename>language/overrides/<replaceable>LANGUAGE_TAG</replaceable>.override.ini</filename>
      under the application's root (site root for the frontend,
      <filename>administrator</filename> for the backend,
      <filename>api</filename> for the API application) where
      <replaceable>LANGUAGE_TAG</replaceable> is the current language's tag,
      e.g. <code>en-GB</code> for British English.</para>

      <para>The way it works is that your language file is loaded and then the
      <emphasis>overridden</emphasis> strings are replaced into the language
      file <emphasis>if and only if</emphasis> they are already defined in the
      language file.</para>

      <caution>
        <para>This means that the language overrides cannot be used for
        language keys not defined in your language files, unlike Joomla
        3.</para>

        <para>Since this was a widely popular “trick” to allow your users to
        customise the display of your components you now have to take that
        explicitly into account. For example, given an item with an alias
        <code>foobar</code> you might be looking for the language string
        <code>COM_EXAMPLE_ITEM_OVERRIDE_FOOBAR_TITLE</code> to override the
        title field of your item for display in different languages. This
        worked in Joomla 3 but will NOT work in Joomla 4 or later.</para>

        <para>You will need to provide an alternative mechanism for your users
        to provide custom translations. Remember the custom files I described
        just above? That's the alternative mechanism you can provide. DO NOT
        ship that file with your component. Just tell users to create it under
        their language folder and put their custom translations in there. It's
        far less user friendly than language overrides, unless of course you
        provide your own user interface for managing the contents of this
        file.</para>
      </caution>
    </section>

    <section xml:id="com-mailtemplates">
      <title>Mail Templates</title>

      <para>Joomla 4 introduced a new core component, Mail Templates
      (<code>com_mails</code>). You can access it from the System
      dashboard.</para>

      <para>This component allows you to manage email templates used by the
      different components which make use of Joomla's new Mail Templates
      feature. The user can choose to customise the plain text email's
      contents or even provide a full HTML email — or both. This is a much
      better user experience than language overrides, especially when it comes
      to HTML email.</para>

      <para>Using this feature is recommended, but not required. If you decide
      to use it for your components there's a bit of trouble you need to get
      through.</para>

      <bridgehead>Installing mail templates</bridgehead>

      <para>Mail templates live in the database, in the
      <database>#__mail_templates</database> table. The fields for each mail
      template are as follows:</para>

      <variablelist>
        <varlistentry>
          <term><database>template_id</database></term>

          <listitem>
            <para>The unique identifier of your mail template in the form
            <code>com_example.<replaceable>something</replaceable></code>
            where <code>com_example</code> is your component and
            <replaceable>something</replaceable> is a key consisting of just
            lowercase alphanumeric characters and underscores (a-z, 0-9 and
            _). This is a hard requirement; language string keys will be
            created using the <database>template_id</database>. This ID is
            what you will use when you want to send emails with this email
            template.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>language</database></term>

          <listitem>
            <para>The language tag of the mail template, e.g.
            <code>en-GB</code> for British English.</para>

            <important>
              <para>The default mail template should have an empty string as
              its language to apply to all languages. This is very different
              from literally everything else in Joomla which uses a
              <code>*</code> as the catch-all language.</para>
            </important>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>subject</database></term>

          <listitem>
            <para>The language string with the subject line of the email. The
            content of the language string can use variables (see
            <database>params</database> below).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>body</database></term>

          <listitem>
            <para>The language string with the body of the plain text version
            of the email. The content of the language string can use variables
            (see <database>params</database> below).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>htmlbody</database></term>

          <listitem>
            <para>The language string with the body of the HTML version of the
            email. The content of the language string can use variables (see
            <database>params</database> below).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>attachments</database></term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>extension</database></term>

          <listitem>
            <para>The name of your extension, e.g.
            <code>com_example</code>.</para>

            <note>
              <para>You may wonder, if my template_id already contains this
              why is this a separate column? You are right, it doesn't make
              sense. Joomla could have just used an index on the template_id
              column with the same performance results or, if it was actually
              concerned about performance, use the numeric extension ID in
              this column. It doesn't make anysense; it is what it is.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><database>params</database></term>

          <listitem>
            <para>A JSON-serialised object with the parameters to the mail
            template. What is most important for us is its <code>tags</code>
            property. For example, you may have this
            <database>params</database> content:</para>

            <programlisting language="json">{
  "tags": [
    "FOO", "BAR", "BAZ"
  ]
}</programlisting>

            <para>This tells Mail Templates that you can use the variables
            <code>{FOO}</code>, <code>{BAR}</code> and <code>{BAZ}</code> in
            the subject, body and HTML body of the mail templates — and let
            users know that in the user interface. When sending emails via the
            Mail Templates feature you will have to provide the values for
            these variables. The variable names MUST always consist of
            uppercase letters, dashes, underscores and colons.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Moreover, you will need to supply a few language strings in you
      backend INI language file (e.g.
      <filename>administrator/languages/en-GB/com_example.ini</filename>).</para>

      <para>You need to provide a language string whose key is the uppercase
      version of your extension name, e.g.</para>

      <programlisting language="ini">COM_EXAMPLE="Example component"</programlisting>

      <para>This is used in the Mail Templates drop-down for selecting a
      component to filter by.</para>

      <para>For each email template you will need to provide a few “magic”
      language strings <emphasis>on top of</emphasis> the language strings you
      defined in the <database>subject</database>, <database>body</database>,
      and <database>htmlbody</database> columns. Assuming a
      <database>template_id</database> <code>com_example.foo_bar</code> you
      will need to provide the following language strings:</para>

      <variablelist>
        <varlistentry>
          <term><code><replaceable>COM_EXAMPLE</replaceable>_MAIL_<replaceable>FOO_BAR</replaceable>_TITLE</code></term>

          <listitem>
            <para>A long title for your email template, displayed in the user
            interface. The content of this language string should be something
            similar to “My Component Name: When This Mail Template Is
            Sent”.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code><replaceable>COM_EXAMPLE</replaceable>_MAIL_<replaceable>FOO_BAR</replaceable>_SHORT</code></term>

          <listitem>
            <para>A short title for your email template. I am not sure when
            this is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code><replaceable>COM_EXAMPLE</replaceable>_MAIL_<replaceable>FOO_BAR</replaceable>_DESC</code></term>

          <listitem>
            <para>A short description of your email template, displayed in the
            user interface.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead>Using mail templates</bridgehead>

      <para>The Mail Templates feature does NOT send emails. It only provides
      you with a pre-configured Joomla Mailer object you will use to send
      emails with.</para>

      <para>This is how you use it:</para>

      <programlisting language="php">/**
 * @var string $templateId The template ID you want to use, e.g. com_example.foo_bar
 * @var string $langTag The language tag for your email, e.g. 'en-GB'
 */
$template = new \Joomla\CMS\Mail\MailTemplate($templateId, $langTag);

// Add the contents of your variables here
$template-&gt;addTemplateData([
    'FOO' =&gt; 'Contents of the {FOO} variable',
    'BAR' =&gt; 'Contents of the {BAR} variable',
    'BAZ' =&gt; 'Contents of the {BAZ} variable',
]);

/**
 * @var string $emailAddress The email address of the recipient, e.g. jane@example.com
 * @var string $recipientName The full name of your recipient, e.g. "Jane Doe"
 */
$template-&gt;addRecipient($emailAddress, $recipientName);

// Send the email
$template-&gt;Send();</programlisting>

      <para>If you want to customise the Joomla Mailer object used by the
      <classname>MailTemplate</classname> class —for example to set custom
      headers, add inline images or attachments which cannot be handled by
      MailTemplate, etc— you can pass it as the third parameter to its
      constructor, e.g.</para>

      <programlisting language="php">$mailer = \Joomla\CMS\Factory::getMailer();
$mailer-&gt;addCustomHeader('X-Vanity-Header', 'Joomla! Rocks');

$template = new \Joomla\CMS\Mail\MailTemplate($templateId, $langTag, $mailer);</programlisting>

      <para>Do keep in mind that each email template may have its own
      configuration about the sender address and sending method (e.g. SMTP
      information). These settings will override the same settings in your
      custom mailer object when you call
      <methodname>Send()</methodname>.</para>

      <tip>
        <para>The above will error out if MailTemplate cannot find a suitable
        template. You can check if a suitable template exists by doing this
        before any of the code above:</para>

        <programlisting language="php">$template = Joomla\CMS\Mail\MailTemplate::getTemplate($templateId, $langTag);</programlisting>

        <para>If $template is empty do NOT go through MailTemplate. You can
        simply not send the email, provide an alternative, throw an error or
        otherwise handle this condition in a way appropriate for your
        application.</para>
      </tip>

      <bridgehead>Caveats</bridgehead>

      <para>Users can, and <emphasis>will</emphasis>, mess up the Mail
      Templates. If they just mess up the subject, plain text body or HTML
      body they can recover easily by using the respective reset button in the
      user interface.</para>

      <para>If they create a specific language version of a mail template they
      cannot remove it without messing with the database.</para>

      <para>If you update a mail template, adding more tags (variables) in its
      parameters you will need to write update SQL which updates all entries
      with the relevant template_id <emphasis role="bold">BUT</emphasis> you
      should note that by overwriting the contents of the
      <database>params</database> column you will be resetting the user's
      preferences about the mailer itself (sender, sending method, credentials
      etc). Therefore updating mail templates <emphasis>actually</emphasis>
      requires writing PHP code in your extension's installation script to run
      on update, read all mail templates with the affected
      <database>template_id</database>, decode the
      <database>params</database>, update the tags and write everything back
      to the database. It's a big old pain in the posterior.</para>

      <para>A final word of caution. The MailTemplate class has some static
      methods such as <methodname>createTemplate</methodname> and
      <methodname>updateTemplate</methodname>. <emphasis role="bold">Don't use
      them</emphasis>. They will error out.</para>
    </section>

    <section xml:id="com-cli">
      <title>The CLI application</title>

      <para>In Joomla 3 we could create CLI scripts for Joomla by extending
      the <classname>JApplicationCli</classname> class (later renamed to
      <classname>Joomla\CMS\Application\CliApplication</classname>) in a new
      file which we'd place in Joomla's <filename>cli</filename> directory.
      While that was a useful way to get access to all Joomla resources and
      API from our CLI it created a problem: there were too many files in the
      <filename>cli</filename> directory and it was not always clear which
      component they belong to. It also put a burden on third party developers
      like us to provide a <code>files</code> package with these CLI scripts
      and make sure that it gets updated together with our main extension
      package. There was also a lot of boilerplate code that had to go into
      each file, potentially different for each Joomla version we
      supported.</para>

      <para>In Joomla 4 we can still do that (but it's deprecated) or we can
      use the new <emphasis role="bold">Joomla CLI Application</emphasis>.
      This lives in <filename>cli/joomla.php</filename>. It is an extensible
      application using a CMSApplication class which uses the Symfony Console
      — much like Composer, WP-CLI and Drush. Unlike the aforementioned
      applications, it is not standalone. It is part of your site, making it
      the fourth official Joomla application bundled with the Joomla CMS (the
      other three being the frontend a.k.a. site application, the backend
      a.k.a. administrator application and the API application).</para>

      <section xml:id="com-cli-commands">
        <title>Command classes</title>

        <para>Like all Symfony Console applications, the Joomla CLI
        Application is extended with Command classes. The Joomla command
        classes need to extend from the
        <classname>\Joomla\Console\Command\AbstractCommand</classname>
        class.</para>

        <para><bridgehead>Where do command classes live?</bridgehead></para>

        <para>There are no hard rules about where you should put your command
        classes. There are two possibilities which make the most sense, as far
        as I can see.</para>

        <orderedlist>
          <listitem>
            <para>Inside the <code>console</code> plugin which registers the
            commands to the Joomla CLI Application.</para>

            <para>It makes sense because the plugin contains the code to the
            commands and registers them to the CLI application. However, it is
            possible that someone may disable or uninstall your component but
            not the console plugin. This would mean that the commands, or even
            their registration, will fail due to the component no longer being
            bootable. You will need to add special code to address that.
            Furthermore, there's the small but real risk that the user ends up
            with a console plugin that's older or newer than the installed
            component version, potentially causing havoc when the CLI commands
            are used.</para>
          </listitem>

          <listitem>
            <para>Inside the backend part of your component.</para>

            <para>This is the way I prefer to do things and what I will show
            you. The commands are in the <code>CliCommand</code> leaf
            namespace of my component. For example, with a component that has
            the namespace prefix <code>Acme\Example</code> I would put my
            commands in the <code>Acme\Example\Administrator\CliCommand</code>
            namespace i.e. the folder
            <code>administrator/components/com_example/src/CliCommand</code>.</para>

            <para>The plugin does not need to check if the component is
            bootable; if it's not, the PSR-4 autoloader for its namespace
            won't be loaded and the command classes cannot be found. Therefore
            I just need to check if the command classes exist. Mixing the
            versions of the plugin and the component is not a problem either;
            the plugin will load the command classes it knows of and if some
            of them do not exist (the plugin is from a newer version) we
            simply skip it over.</para>
          </listitem>
        </orderedlist>

        <bridgehead>A sample command class</bridgehead>

        <programlisting language="php">&lt;?php
namespace Acme\Example\Administrator\CliCommand;

defined('_JEXEC') or die;

use Joomla\CMS\Language\Text;
use Joomla\CMS\MVC\Factory\MVCFactoryAwareTrait;
use Joomla\CMS\MVC\Model\DatabaseAwareTrait;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class ItemsList extends \Joomla\Console\Command\AbstractCommand
{
    use MVCFactoryAwareTrait;
    use DatabaseAwareTrait;

    /**
     * The default command name
     *
     * @var    string
     */
    protected static $defaultName = 'example:items:list';

    /**
     * @var   SymfonyStyle
     */
    private $ioStyle;

    /**
     * @var   InputInterface
     */
    private $cliInput;

    /**
     * @inheritDoc
     */
    protected function doExecute(InputInterface $input, OutputInterface $output): int
    {
        // Configure the Symfony output helper
        $this-&gt;configureSymfonyIO($input, $output);

        // Collect the options
        $search = $input-&gt;getOption('search') ?? null;

        // Get the items, using the backend model
        /** @var \Joomla\CMS\MVC\Model\BaseDatabaseModel $itemsModel */
        $itemsModel = $this-&gt;getMVCFactory()-&gt;createModel('Items', 'Administrator');

        if ($search)
        {
            $itemsModel-&gt;setState('filter.search', $search);
        }

        $items = $itemsModel-&gt;getItems();

        // If no items are found show a warning and set the exit code to 1.
        if (empty($items))
        {
            $this-&gt;ioStyle-&gt;warning('No items found matching your criteria');

            return 1;
        }

        // Reshape the items into something humans can read.
        $items = array_map(
            function (object $item): array
            {
                return [
                    $item-&gt;id,
                    $item-&gt;title,
                    $item-&gt;published ? Text::_('JYES') : Text::_('JNO')
                ];
            },
            $items
        );

        // Display the items in a table and set the exit code to 0
        $this-&gt;ioStyle-&gt;table(
            [
                Text::_('COM_EXAMPLE_FIELD_HEADER_ID'),
                Text::_('JGLOBAL_TITLE'),
                Text::_('JPUBLISHED'),
            ],
            $items
        );

        return 0;
    }

    /**
     * Configure the command.
     *
     * @return  void
     */
    protected function configure(): void
    {
        $this-&gt;setDescription(Text::_('COM_EXAMPLE_CLI_ITEMS_LIST_DESC'));
        $this-&gt;setHelp(Text::_('COM_EXAMPLE_CLI_ITEMS_LIST_HELP'));

        $this-&gt;addOption('search', 's', InputOption::VALUE_OPTIONAL, Text::_('COM_EXAMPLE_CLI_CONFIG_SEARCH'));
    }

    /**
     * Configure the IO.
     *
     * @param   InputInterface   $input   The input to inject into the command.
     * @param   OutputInterface  $output  The output to inject into the command.
     *
     * @return  void
     */
    private function configureSymfonyIO(InputInterface $input, OutputInterface $output)
    {
        $this-&gt;cliInput = $input;
        $this-&gt;ioStyle  = new SymfonyStyle($input, $output);
    }

}</programlisting>

        <para><bridgehead>The command name
        (<code>$defaultName</code>)</bridgehead></para>

        <para>A command class needs to provide a name for the command being
        executed. In Joomla 4 ,third party extensions should use the
        convention <option>component:command</option> and
        <option>component:command:subcommand</option> where
        <replaceable>component</replaceable> is the name of the component
        without <command>com_</command>. The command part is the name of your
        command. If you need to implement subcommands you can add a third,
        fourth etc part in your command name, all separated with colons. For
        example we could have the following names:</para>

        <itemizedlist>
          <listitem>
            <para><command>example:email</command> Process an email
            queue</para>
          </listitem>

          <listitem>
            <para><command>example:items:list</command> Produce a list of
            items</para>
          </listitem>

          <listitem>
            <para><command>example:items:delete</command> Delete an
            item</para>
          </listitem>
        </itemizedlist>

        <para>The name of the command goes into the command class'
        <code>$defaultName</code> static property.</para>

        <para><bridgehead>Command configuration</bridgehead></para>

        <para>Each command needs a bit of configuration so that Joomla knows
        how to display it in a list of commands (<code>php joomla.php
        list</code>), provide help for a command (e.g. <code>php joomla.php
        example:items:list --help</code>) and parse the arguments and options
        to the command. This is done in the
        <methodname>configure()</methodname> method.</para>

        <para>Calling setDescription sets the short help text which appears
        next to the command in the list of available commands.</para>

        <para>Calling setHelp sets the longer help text which appears in the
        per-command help page.</para>

        <para>The rest of the method body defines the arguments and options to
        the commands, whether they are required or optional, their default
        values and their associated help text. This is explained in detail in
        the Symfony Console documentation article “<link
        xlink:href="https://symfony.com/doc/current/console/input.html">Console
        Input (Arguments &amp; Options)</link>”.</para>

        <para><bridgehead>Command implementation</bridgehead></para>

        <para>The implementation of your command, the code which executes when
        you call it, is in the <methodname>doExecute</methodname>
        method.</para>

        <para>The first thing we do is get a SymfonyStyle object to facilitate
        the formatting our command's output. It has all sorts of useful
        things, from titles and success / warning / error blocks to progress
        bars and tables. You can read more about it in the Symfony Console
        documentation article <link
        xlink:href="https://symfony.com/doc/current/console/style.html">How to
        Style a Console Command</link>.</para>

        <para>The rest of the code is pretty straightforward; it's standard
        Joomla stuff. What you need to note is that we always return an
        integer. This MUST be an integer from 0 to 255 (inclusive). It is used
        as the command line application's <link
        xlink:href="https://www.redhat.com/sysadmin/linux-shell-command-exit-codes">exit
        code</link>. It is very strongly recommended that you use a different
        exit code for each result state of your command <emphasis>and document
        it</emphasis>. This can be used in automation scenarios, e.g. someone
        using your CLI commands in an Ansible playbook or a custom shell
        script.</para>

        <note>
          <para>You may see that I've used the MVCFactoryAwareTrait and
          DatabaseAwareTrait traits. We will be using these traits to pass our
          component's MVCFactory and the Joomla database object when creating
          objects out of our command classes, before registering them to the
          Joomla CLI application, in our <code>console</code> plugin.</para>

          <para>While we could skip that and just fetch these
          <emphasis>dependencies</emphasis> directly in our console class,
          please do keep in mind that Joomla is trying to get us to use
          <emphasis>dependency injection</emphasis>, i.e. the object should be
          pushed the dependencies into it rather than having it to pull them
          from somewhere else. If there's a big architectural change in Joomla
          it's far easier to change things at the singular injection point
          rather than hunting down all places where we might be pulling
          dependencies. That's one of the many reasons Dependency Injection is
          used: it makes refactoring easier.</para>
        </note>
      </section>

      <section xml:id="com-cli-plugins">
        <title>Console plugins</title>

        <para>The Joomla CLI Application needs to somehow know about our
        custom CLI command classes. The way Joomla decided to implement this
        is with <emphasis>plugins</emphasis>. This makes perfect sense! The
        “One True Joomla Way” for implementing extensible features is with
        plugins.</para>

        <para>We need to create a new plugin in the <code>console</code> group
        which will register our commands to the Joomla CLI application. This
        plugin must follow the Joomla 4 conventions<footnote>
            <para>We'll learn more about creating plugins in the <link
            linkend="plg">Plugins</link> section of this book.</para>
          </footnote> as it will be handling an event.</para>

        <bridgehead>The service provider</bridgehead>

        <para>Joomla 4 plugins do need a service provider. We are going to use
        the service provider to also get ahold of the MVCFactory object of our
        component, pass it to the plugin object which can then pass it to our
        command class.</para>

        <programlisting language="php">defined('_JEXEC') || die;

use Joomla\CMS\Extension\PluginInterface;
use Joomla\CMS\Extension\Service\Provider\MVCFactory;
use Joomla\CMS\MVC\Factory\MVCFactoryInterface;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;
use Joomla\Event\DispatcherInterface;
use Joomla\Plugin\Console\ATS\Extension\ATS;

return new class implements ServiceProviderInterface {
    public function register(Container $container)
    {
        $container-&gt;registerServiceProvider(new MVCFactory('Acme\\Example'));

        $container-&gt;set(
            PluginInterface::class,
            function (Container $container) {
                $config     = (array) PluginHelper::getPlugin('console', 'example');
                $subject    = $container-&gt;get(DispatcherInterface::class);
                $mvcFactory = $container-&gt;get(MVCFactoryInterface::class);
                $plugin     = new Example($subject, $config)

                $plugin-&gt;setMVCFactory($mvcFactory);

                return $plugin;
            }
        );
    }
};</programlisting>

        <bridgehead>The plugin class</bridgehead>

        <para>The plugin class only listens to one event, the
        <classname>\Joomla\Application\ApplicationEvents::BEFORE_EXECUTE</classname>
        one. This event is an
        <classname>\Joomla\Application\Event\ApplicationEvent</classname>
        which is raised by the Joomla CLI Application before it tries to
        execute the user's instructions.</para>

        <para>To make things easier, and our example reusable in the real
        world with minimal modifications, we have a private static variable
        which lists the class names of the command classes to register. The
        <methodname>registerCLICommands</methodname> method iterates through
        them, creates a command object and adds it to the CLI
        application.</para>

        <programlisting language="php">&lt;?php

namespace Joomla\Plugin\Console\Example\Extension;

defined('_JEXEC') or die;

use Acme\Example\Administrator\CliCommand\ItemsList;
use Joomla\Application\ApplicationEvents;
use Joomla\Application\Event\ApplicationEvent;
use Joomla\CMS\MVC\Factory\MVCFactoryAwareTrait;
use Joomla\CMS\Plugin\CMSPlugin;
use Joomla\Event\SubscriberInterface;
use Throwable;

class Example extends CMSPlugin implements SubscriberInterface
{
    use MVCFactoryAwareTrait;

    private static $commands = [
        ItemsList::class,
    ];

    protected $autoloadLanguage = true;

    public static function getSubscribedEvents(): array
    {
        return [
            ApplicationEvents::BEFORE_EXECUTE =&gt; 'registerCLICommands',
        ];
    }

    public function registerCLICommands(ApplicationEvent $event)
    {
        foreach (self::$commands as $commandFQN)
        {
            try
            {
                if (!class_exists($commandFQN))
                {
                    continue;
                }

                $command = new $commandFQN();

                if (method_exists($command, 'setMVCFactory'))
                {
                    $command-&gt;setMVCFactory($this-&gt;getMVCFactory());
                }

                $this-&gt;getApplication()-&gt;addCommand($command);
            }
            catch (Throwable $e)
            {
                continue;
            }
        }
    }
}</programlisting>

        <para>As you can see, after creating the command object we push the
        MVCFactory into it — if it supports that feature, i.e. it is using the
        <classname>MVCFactoryAwareTrait</classname> itself.</para>

        <para>We could do the same for the database object. We'll let you
        figure it out. For the solution, you can read the footnote<footnote>
            <para>At the top of the plugin object define the <code>$db</code>
            property to let Joomla push the database object into the plugin
            object.</para>

            <programlisting language="php">protected $db;</programlisting>

            <para>In the registerCLICommand method, right after pushing the
            MVCFactory, push the database object:</para>

            <programlisting language="php">if (method_exists($command, 'setDbo'))
{
    $command-&gt;setDbo($this-&gt;db);
}</programlisting>
          </footnote>.</para>

        <para>Remember to not just install this plugin, but also publish it.
        You can publish the plugin automatically in the <code>install</code>
        section of your package's installation script. Remember, that code
        only runs on a new installation. If you want to enable this plugin
        also on updates you will need to do the same in the
        <code>update</code> section as well. Yes, it's a bit of a kludge but
        in practice it works very well.</para>
      </section>
    </section>

    <section xml:id="com-api">
      <title>The API application</title>

      <para>Joomla version 1, 2 and 3 had no good, universal way of adding a
      <link
      xlink:href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</link>
      <link xlink:href="https://en.wikipedia.org/wiki/JSON">JSON</link> API to
      a component. There was a hodgepodge of solutions (ab)using Joomla's
      routing to essentially end up with a format=json request query parameter
      post-SEO parsing and some basic logic to convert HTTP verbs into
      respective Controller tasks, sometimes with rudimentary support for
      <link
      xlink:href="https://en.wikipedia.org/wiki/Hypertext_Application_Language">HAL</link>
      or similar <link
      xlink:href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</link>
      solutions. In plain English: we had no good way to write JSON APIs which
      didn't suck royally!</para>

      <para>Joomla 4 addresses this problem with the introduction of a new
      official Joomla application, the API application which lives in the
      <filename>api</filename> folder of your site.</para>

      <section xml:id="com-api-overview">
        <title>Overview</title>

        <para>The API application uses a set of plugins in the
        <literal>webservices</literal> group to determine which of the
        installed API components will be responding to requests. These plugins
        are also responsible for determining the routes (URLs) for the
        respective component's JSON API. While having a plugin control whether
        a particular component provides an API may sound odd, it makes sense.
        Depending on the site, you don't always want to expose everything
        under the sun in a JSON API. For example, if you do not have a use
        case for listing the extensions over the JSON API it makes more
        security sense having that feature unpublished.</para>

        <para>Beyond the plugin, your component needs an API part just like it
        does for the frontend (site) and the backend (administrator)
        applications. The difference is that you only have Controllers, Models
        and Views. You do not have view templates. The Views descend from
        <classname>\Joomla\Component\Banners\Api\View\Banners\JsonapiView</classname>
        which manages the data conveyed through a
        <classname>\Joomla\CMS\Document\JsonDocument</classname> as a JSON
        formatted response.</para>

        <para>As for who can access the API… we'll see about that in the next
        section.</para>
      </section>

      <section xml:id="com-api-access">
        <title>Access and Authentication</title>

        <para>In theory, the Joomla API application is only available to Super
        Users in Joomla 4. The idea is that this is a new and very powerful (a
        bit <emphasis>too </emphasis>powerful, maybe?) way to access the site,
        therefore the Joomla project felt that it should only be available to
        Super Users.</para>

        <para>Authentication for Super Users does not normally take place with
        a username and password but with a token<footnote>
            <para>The token is much safer than using a username and password.
            Joomla stores some of the information required to construct the
            token in the database (the <database>#__user_profiles</database>
            table) and some of it in the filesystem (the
            <varname>$secret</varname> in
            <filename>configuration.php</filename>). These two pieces of
            information are cryptographically combined to create the token,
            therefore SQL injections cannot be used to steal it. If it's
            compromised it can be quickly disabled or reset. A better solution
            would be a true OAuth2 flow but nobody has written the code for it
            (yet?).</para>
          </footnote>. You can find your token by editing your (Super User)
        profile in the back- or frontend of the site, as long as the
        <guilabel>User - Joomla API Token</guilabel> plugin is published.
        Authenticating with the token requires the API
        <guilabel>Authentication - Web Services Joomla Token</guilabel> plugin
        to be published as well. You pass the token in a standard
        Authentication HTTP header following <link
        xlink:href="https://datatracker.ietf.org/doc/html/rfc6750#page-5">RFC
        6750</link> for bearer tokens:</para>

        <programlisting>Authorization: Bearer c2hhMjU2OjcwOjg5NWQ5MDM3MjA1NTY2MzM2OWFmYjc0YTg1MGFmYWFjNTAyMGYyZTU2MjQ3OTkxZjMwNDE1MTNkNDQ2NjhjN2Y=</programlisting>

        <para>Alternatively, the token can be sent in the custom HTTP header
        with the name X-Joomla-Token:</para>

        <programlisting>X-Joomla-Token: c2hhMjU2OjcwOjg5NWQ5MDM3MjA1NTY2MzM2OWFmYjc0YTg1MGFmYWFjNTAyMGYyZTU2MjQ3OTkxZjMwNDE1MTNkNDQ2NjhjN2Y=</programlisting>

        <para>Practically speaking, use the latter header as the Authorization
        header may not be passed correctly by the server.</para>

        <tip>
          <para>When making requests to the Joomla API remember to send the
          HTTP header <literal>Accept</literal> with the content
          <literal>application/vnd.api+json</literal> (not just
          <literal>application/json</literal>). Otherwise you will get an HTTP
          406 response.</para>
        </tip>

        <para>However, that is not the entire truth — nothing is ever that
        simple when you're talking authentication.</para>

        <para>It is perfectly possible to use Joomla's API application for a
        publicly accessible JSON API which does not perform any kind of
        authentication! This is, in fact, what Joomla's Media Manager
        (<code>com_media</code>) does. Counter-intuitively, the implementation
        for public routes is set up in the <emphasis
        role="bold">plugin</emphasis>, not the API component part. We'll see
        how in the <link linkend="com-api-plugin">web services plugin</link>
        section.</para>

        <para>This also means that you can do custom authentication using your
        own authentication mechanism by setting the routes to be public and
        performing authentication and access control in your API controllers.
        This is not entirely safe and I don't recommend it but, you know, the
        option does exist if you really need it and you really know what you
        are doing.</para>
      </section>

      <section xml:id="com-api-component">
        <title>The API part of your component</title>

        <para>Starting with Joomla 4, your component has another
        optional<footnote>
            <para>A component <emphasis>must</emphasis> have a backend
            (administrator) part. The frontend (site) and api parts are
            optional. And, yes, this means that you can absolutely have a
            backend-only component but not a frontend-only or api-only
            component. The necessity for a backend part comes from the fact
            that the XML manifest, the configuration (config.xml) and the
            permissions (access.xml) files are present only in the backend
            directory of the component. The former is necessary for a
            component to be able to be installed, updated and uninstalled.
            Moreover, Joomla always creates a backend menu item for the
            component, meaning that the component must have a backend part
            with a default view even if it's just to display a message that
            there is nothing to do with this component in the backend.</para>
          </footnote> part: the <literal>api</literal> part. Just like the
        component's frontend (site) and backend (administrator) it has its own
        Controllers, Views, and Models to render not HTML pages but JSON
        result sets.</para>

        <para>The namespace suffix for the API application is
        <classname>Api</classname>. This means that a component with the
        namespace prefix <classname>Acme\Example</classname> defined in its
        XML manifest will have the namespace prefix
        <classname>Acme\Example\Api</classname> for all of its API application
        classes.</para>

        <section xml:id="com-api-component-manifest">
          <title>Adding it to your XML manifest</title>

          <para>If you are implementing an integration with the Joomla API
          application your XML manifest needs to have an
          <tag>&lt;api&gt;</tag> section under the
          <tag>&lt;extension&gt;</tag> root node, defining the files and
          folders included in your component's api part. Typically, it looks
          like this:</para>

          <programlisting language="xml">&lt;api&gt;
    &lt;files folder="api"&gt;
        &lt;folder&gt;src&lt;/folder&gt;
    &lt;/files&gt;
&lt;/api&gt;</programlisting>

          <para>Yes, typically you only have one folder,
          <filename>src</filename>, containing your Controllers, Views and
          Models.</para>
        </section>

        <section xml:id="com-api-component-controllers">
          <title>Controllers</title>

          <para>The API controllers all extend from the core
          <classname>\Joomla\CMS\MVC\Controller\ApiController</classname>
          class. The API controllers will, by default, implement CRUD (Create,
          Read, Update, Delete). Do note that Read in this context means both
          returning a single item <emphasis>and</emphasis> returning a list of
          items.</para>

          <para>At a minimum, you need to override the
          <property>$contentType</property> and
          <property>$default_view</property> properties.</para>

          <para>The <property>$contentType</property> property is used as the
          context to the <literal>onGetApiAttributes</literal> and
          <literal>onGetApiRelation</literal> events. The former is used to
          modify the data of the JSON response. The latter is used to add
          related data to the JSON response.</para>

          <note>
            <para>Unfortunately, the content type is <emphasis>a very bad
            choice</emphasis> for context in these events because it's not
            unique across components and the component's name is not given in
            the event arguments. For example, the type
            <literal>groups</literal> is already duplicated in the core, for
            <literal>com_fields</literal> and
            <literal>com_users</literal>.</para>

            <para>For this reason, you may want to provide your extension's
            <property>$contentType</property> in the format
            <literal>com_example.item</literal>, i.e. prefix your content type
            with the name of your component and a dot. It's a far cry from
            being intuitive, especially since consumers will have to remove
            the prefix to find out the API route which gives them access to
            this content type, but at least it provides a valid, unique
            context for the events.</para>
          </note>

          <para>In most cases you do not want to change the
          <methodname>displayItem</methodname> (read one),
          <methodname>displayList</methodname> (read many),
          <methodname>delete</methodname> (remove),
          <methodname>add</methodname> (create), and
          <methodname>edit</methodname> (update) methods. When you do, it's
          mostly so you can set a filter state in the view's Model. Joomla's
          core components do that a lot in their api application part.</para>

          <para>You will most likely need to override one or more of the
          following methods for most real world components:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>allowEdit</methodname>. Is the current user
              allowed to edit (update) the item? By default, it only checks
              the <literal>core.edit</literal> privilege of the current user
              for your component. The method is passed the data and the
              table's primary key in case you need to do more fine grained
              access control. For example, a forum component will very
              reasonably only allow the user who posted a specific post and
              the forum administrators to edit a post, not any random person
              who can post into the forum.</para>
            </listitem>

            <listitem>
              <para><methodname>allowAdd</methodname>. Is the current user
              allowed to add (create) a new item? By default, it only checks
              if the currently logged in user has the
              <literal>core.create</literal> privilege for your component or
              has the <literal>core.create</literal> privilege in any
              categories that belong to your component (assuming you are
              integrating with Joomla's com_categories). The method is passed
              the data to be create in case you need to perform more
              fine-grained access control. For example, a helpdesk component
              would only allow the user who owns a support ticket and the
              support staff to post replies to a specific ticket. The view
              handling replies would check the ticket ID in the data to
              determine if this is the case before allowing a new post to be
              created.</para>
            </listitem>

            <listitem>
              <para><methodname>preprocessSaveData</methodname>. This is
              executed after allowEdit and allowAdd, but before handling tags
              and saving the data into the database. This is your last chance
              to make any modifications to the data before committing it to
              the database. For example, you may want to perform additional
              validation and cleanup of HTML content, or you may want to
              automatically fill in missing information which would cause a
              validation error when the Model tries to save the data.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section xml:id="com-api-component-models">
          <title>Models</title>

          <para>You do not <emphasis>need</emphasis> to have API-specific
          Models in your component. If you do not provide a Model, the API
          application will use the Administrator models instead. This is
          usually what you want to do. There are very few cases where the API
          application needs a model which is different than both the
          Administrator and the Site model.</para>

          <para>If you do need to create Models, follow the same conventions
          as you'd do for Models in the Administrator part of your
          application. The only difference is that the namespace prefix uses
          <classname>Api</classname> instead of
          <classname>Administrator</classname>.</para>
        </section>

        <section xml:id="com-api-component-views">
          <title>Views</title>

          <para>View classes in the API application are the biggest change to
          what you are used to doing in Joomla components.</para>

          <para>All these years you have been writing components with a
          backend and frontend part. Most of the time you had a View class
          whose purpose was to generate HTML using view templates. Quite
          rarely some of you may have used a raw, XML or JSON view to output
          something else such as INI data, binary data (e.g. an image), and
          XML document or a JSON string. In all cases you were more or less
          constructing the data as a string and had your view return that
          string.</para>

          <para>The API application views extend from
          <classname>\Joomla\CMS\MVC\View\JsonApiView</classname> which is a
          special version of the good, old, reliable
          <classname>\Joomla\CMS\MVC\View\JsonView</classname> we had for
          years. Its biggest difference is that you are no longer constructing
          and return a <emphasis>string</emphasis>. Instead, you have a
          <classname>\Joomla\CMS\Serializer\JoomlaSerializer</classname>
          object which figures out how to best convert your raw data to a JSON
          representation. Moreover, you have separate methods for displaying a
          single item (<methodname>displayItem</methodname>) versus displaying
          a list of items (<methodname>displayList</methodname>).</para>

          <para>The two methods need to know which of the fields returned by
          your Model's <methodname>getItem</methodname> and
          <methodname>getItems</methodname> methods, respectively, needs to be
          output in the JSON document. You can do that by setting two string
          array properties, <property>$fieldsToRenderItem</property> and
          <property>$fieldsToRenderList</property>. The former lists all the
          fields to be output when rendering a single item view (the
          <methodname>displayItem</methodname> method in the Controller) and
          the latter lists all the fields to be output when rendering a view
          which returns multiple items (the
          <methodname>displayList</methodname>method in the
          Controller).</para>

          <note>
            <para>At first glance this sounds tedious, if not pointless, but
            it does make sense when you start thinking about it. When listing
            tree entries, like menu items, there is no point in outputting the
            internal fields <literal>lft</literal>, <literal>rgt</literal>,
            <literal>level</literal> and so on which are only used to manage
            the tree. Moreover, and assuming you implement your own access
            control, you may want to return different fields depending on the
            user's privileges. For example, a helpdesk component's user may
            get access to their ticket information but not the internal notes
            on it kept by the support staff; <emphasis>that</emphasis> would
            only be available to the support staff. Do not discount everything
            Joomla does as silly. More often than not there's method to its
            madness.</para>
          </note>

          <para>The hidden gem of the API view is another string array
          property, <property>$relationship</property>. In that view you list
          all the field names returned by your model which refer to
          <emphasis>related data</emphasis>. Now, this is where things get
          interesting! A contact has, for example, a user ID. The user ID
          tells us nothing. However, the user ID is not a standalone thing;
          it's a reference to the <emphasis>related</emphasis> user record.
          Therefore listing <literal>user_id</literal> in the
          <code>$relationship</code> array tells the
          <classname>JsonapiView</classname> that it needs to fetch that
          related record and include it in the returned JSON document along
          with information which tells the consumer that this embedded JSON
          document refers to that <literal>user_id</literal> — and the URL to
          use to get more information about it.</para>

          <para>There is a catch to using relations: you need a custom
          Serializer object which extends
          <classname>\Joomla\CMS\Serializer\JoomlaSerializer</classname> and
          adds one public method named after each relationship field. Each
          method returns a
          <classname>\Tobscure\JsonApi\Relationship</classname> object which
          is used to output the relationship links in the JSON document. The
          custom Serialiser object is assigned to the
          <property>serializer</property> property of your JsonapiView in its
          constructor. This sounds very abstract and confusing; it's best if
          you observe it in real world code. I recommend taking a look at
          Joomla's own
          <classname>\Joomla\Component\Content\Api\View\Articles\JsonapiView</classname>
          and
          <classname>\Joomla\Component\Content\Api\Serializer\ContentSerializer</classname>
          to get a feeling of how you can add relationships in JSON API
          views.</para>
        </section>
      </section>

      <section xml:id="com-api-plugin">
        <title>Web services plugin</title>

        <para>The second thing required for your component to integrate with
        the Joomla API application is a <literal>webservices</literal> plugin.
        This plugin serves a dual role.</para>

        <para>On one hand it lets the user determine which components will
        participate in the Joomla API application — if they do not have a use
        case for your component's JSON API they can and should disable the
        plugin.</para>

        <para>On the other hand the plugin implements routing for your API
        application. That's right; there is no such thing as a Router service
        for the API application since the URL structure is meant to be
        predefined and predictable<footnote>
            <para>As opposed to being defined by the site's owner and limited
            by that person's ability to create a sensible menu structure —
            something which, according to my experience working on thousand of
            sites' backends, is most definitely not a given. At some point I
            will probably have to write a series of blog posts or yet another
            book on how to realistically build Joomla sites…</para>
          </footnote>. As a matter of fact, the only event handler we
        implement in this plugin is
        <literal>onBeforeApiRoute</literal>.</para>

        <para>The <literal>onBeforeApiRoute</literal> event handler takes
        exactly one argument, an object instance of
        <classname>\Joomla\CMS\Router\ApiRouter</classname>. This is a
        subclass of Joomla's <classname>\Joomla\Router\Router</classname>
        class, optimised for use in the API application.</para>

        <para>There are two ways to add routes for your component's API
        application integration, both using the router object.</para>

        <para>The first way is calling the object's
        <methodname>createCRUDRoutes</methodname> method. This methods creates
        five routes (named after the respective HTTP verbs):</para>

        <itemizedlist>
          <listitem>
            <para>A <literal>GET</literal> route which returns a list of
            records.</para>
          </listitem>

          <listitem>
            <para>A <literal>GET</literal> route with an <literal>id</literal>
            parameter which returns a single record.</para>
          </listitem>

          <listitem>
            <para>A <literal>POST</literal> route to add a new record.</para>
          </listitem>

          <listitem>
            <para>A <literal>PATCH</literal> route with an
            <literal>id</literal> parameter which updates (“edits”) an
            existing record.</para>
          </listitem>

          <listitem>
            <para>A <literal>DELETE</literal> route with an
            <literal>id</literal> parameter which deletes an existing
            record.</para>
          </listitem>
        </itemizedlist>

        <para>As you may have intuited, these are the five CRUD (Create, Read,
        Update, Delete) operations supported by Joomla's controllers and more
        specifically the ApiController. The HTTP verbs for each CRUD operation
        are those specified in the REST specification. So, yes, Joomla lets us
        <emphasis>easily</emphasis> create RESTful JSON APIs, as promised.
        Neat, huh?!</para>

        <para>This method takes four arguments:</para>

        <itemizedlist>
          <listitem>
            <para><parameter>$baseName</parameter>. The base name of our
            route. The recommended format is similar to <uri>v1/example</uri>
            (for the default API route of your component) or
            <uri>v1/example/items</uri>.</para>

            <para>The <literal>v1</literal> part is used for versioning your
            API. Start with v1 for the first version of your component's API.
            If you make a backwards incompatible change bump it to v2, then v3
            and so on.</para>

            <para>The next part <emphasis>should</emphasis> be your
            component's name without the <literal>com_</literal>
            prefix.</para>

            <para>Some components manage more than one content type. For
            example a helpdesk component will have at the very least a ticket
            and a reply content type, the former being a representation of all
            the metadata of the ticket (title, date, owner, …) and the latter
            being a representation of the actual posts sent by the
            participants. In these cases the secondary, tertiary etc content
            items get their own route by adding one more level in the base
            name of the route.</para>
          </listitem>

          <listitem>
            <para><parameter>$controller</parameter>. The <emphasis
            role="bold">name (string)</emphasis> of your component's
            controller which will be handling the request. This must be in all
            lowercase.</para>
          </listitem>

          <listitem>
            <para><parameter>$defaults</parameter>. This is an array of URL
            parameters which are added by default when parsing the route. At
            the very least it should be something like <code>['component'
            =&gt; '<replaceable>com_example</replaceable>']</code> where
            <replaceable>com_example</replaceable> is your component's
            name.</para>

            <para>If you are using Joomla's category management the API route
            to manage the categories for your component will be using the
            following defaults: <code>['component' =&gt; 'com_categories',
            'extension' =&gt; '<replaceable>com_example</replaceable>']</code>
            where <replaceable>com_example</replaceable> is your component's
            name.</para>
          </listitem>

          <listitem>
            <para><parameter>$publicGets</parameter>. This is a boolean. By
            default it's false which means that only authenticated users will
            be allowed to list items using GET. If you set it to true then
            anyone who figures out the URL can use GET to get a list of items
            and read all items.</para>

            <warning>
              <para>If you set <varname>$publicGets</varname> to true you most
              likely have to override the <methodname>displayItem</methodname>
              and <methodname>displayList</methodname> methods in the
              respective controller to perform custom access control
              appropriate to your component. Most likely the items you want to
              show publicly are not <emphasis>all</emphasis> the items
              (including unpublished, deleted and possibly access-controlled)
              your component knows about.</para>
            </warning>

            <caution>
              <para>If you have a public route you MUST think about which
              fields you'll be including in your JsonapiView object. Not all
              fields are suitable for public display; that could lead to a
              security vulnerability known as information disclosure.</para>

              <para>For example, your forum component may be saving the IP
              address alongside the user ID and creation date and time of a
              forum post. DO NOT make the IP address and user ID available to
              the public. This combination is considered Personally
              Identifiable Information and can result in fines! Just the user
              ID may be privileged information depending on the context of the
              site (remember that usernames are not privileged information,
              but the internal user IDs are).</para>
            </caution>
          </listitem>
        </itemizedlist>

        <para>The second way to add routes to the ApiRouter is, of course,
        using its <methodname>addRoute</methodname> or
        <methodname>addRoutes</methodname> methods, just like any standard
        Joomla router object. The former accepts a single
        <classname>\Joomla\Router\Route</classname> object whereas the latter
        accepts an array of Route objects.</para>

        <para>The constructor of the
        <classname>\Joomla\Router\Route</classname> object accepts five
        arguments:</para>

        <itemizedlist>
          <listitem>
            <para><parameter>$methods</parameter>. This is an array of strings
            consisting of the HTTP verbs this route will be handling. The HTTP
            verbs must be in uppercase, e.g. <code>['GET']</code>,
            <code>['POST', 'PUT']</code>, or <code>['PUT', 'PATCH']</code> to
            mention three of the most practical examples.</para>
          </listitem>

          <listitem>
            <para><parameter>$pattern</parameter>. This is the same as the
            <parameter>$baseName</parameter> of the
            <methodname>createCRUDRoutes</methodname> method with an added
            feature. If you want to include parameters, e.g. an ID, you will
            define it as <code>:something</code> (note the colon in the
            front). This may be very familiar to those of you who've written
            routes for Symfony or Laravel applications. For example, the
            pattern <uri>v1/example/items/:id</uri> tells Joomla that this
            route will <emphasis>only</emphasis> match if the
            <uri>v1/example/items</uri> route is followed by
            <emphasis>something</emphasis> which will be made available as the
            request parameter named <literal>id</literal>. If that
            <emphasis>something</emphasis> does not exist the route does not
            match and Joomla won't use it. What that something must look like
            for the route to match? See <parameter>$rules</parameter>
            below!</para>
          </listitem>

          <listitem>
            <para><parameter>$controller</parameter>. This is <emphasis
            role="bold">different</emphasis> to the
            <parameter>$controller</parameter> of the
            <methodname>createCRUDRoutes</methodname> method in that it needs
            to have both the controller and the task, in all lowercase,
            separated by a dot. For example: <code>item.add</code>.</para>
          </listitem>

          <listitem>
            <para><parameter>$rules</parameter>. If your route pattern has
            parameters you will provide a Regular Expression pattern the value
            must match for the route to match. For example <code>['id' =&gt;
            '(\d+)']</code> tells Joomla that the <literal>id</literal>
            parameter (which was defined as <literal>:id</literal> in the
            pattern) must be an integer consisting of one or more digits —
            including the value <literal>0</literal>.</para>

            <tip>
              <para>This comes in very handy if you want to have the exact
              same GET route accept either a numeric ID or a text slug —
              assuming your component enforces unique slugs. In this case you
              would define two routes like this:</para>

              <programlisting>$router-&gt;addRoutes([
  new Route(['GET'], 'v1/example/items/:id', 'item.displayItem',
    ['id' =&gt; '(\d+)'], ['option' =&gt; 'com_example']),
  new Route(['GET'], 'v1/example/items/:slug', 'item.displayItem',
    ['slug' =&gt; '(.*)'], ['option' =&gt; 'com_example']),
]);</programlisting>

              <para>If the parameter is numeric the first route matches and
              the parameter is made available as the <literal>id</literal>
              request parameter. Otherwise, the parameter matches the second
              route and the parameter is made available as the
              <literal>slug</literal> request parameter. Your overridden
              <code>ItemController::displayItem</code> method would first
              check if the <literal>id</literal> request parameter exists and
              non-empty. If not, it would look for a non-empty
              <literal>slug</literal> request parameter and find the correct
              ID of the record to display by making a database query.</para>
            </tip>
          </listitem>

          <listitem>
            <para><parameter>$defaults</parameter>. This is the same as the
            <parameter>$defaults</parameter> of the
            <methodname>createCRUDRoutes</methodname> method with one
            addition. If you have a GET route and you want it to be accessible
            by unauthenticated users you need to add <code>['public' =&gt;
            true]</code> to the <parameter>$defaults</parameter> array. If you
            want it to only be accessible by authenticated users you need to
            add <code>['public' =&gt; false]</code>.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section xml:id="com-scheduled-tasks">
      <title>Integration with Scheduled Tasks</title>

      <para>Joomla 4.1 and later have an amazingly useful new feature called
      Scheduled Tasks. This is not really part of a component, it's just a
      plugin type, but since it is often used in conjunction with a component
      it makes sense to mention it here. You can read more about plugins in
      general in the <link linkend="plg">Plugins</link> chapter of this
      book.</para>

      <para>Scheduled Tasks allow the user to defined repeated, unattended
      tasks which run on a schedule. It's like CRON jobs but without
      necessarily needing a CRON server on the site's server. They can be
      triggered with CRON jobs, with a special URL (e.g. using web-based
      pseudo-CRON services such as WebCRON.org), or automatically based on the
      site's traffic in what is called Lazy Scheduling.</para>

      <para>The best way to understand how a Scheduled Task plugin works is
      looking at the demo tasks plugin under
      <filename>plugins/task/demotasks</filename> folder on your site; it is
      part of Joomla itself.</para>

      <para>You create a plugin which provides one or more scheduled tasks in
      the <literal>tasks</literal> folder. The plugin extension must implement
      <classname>\Joomla\Event\SubscriberInterface</classname>. It also needs
      to make use of the
      <classname>\Joomla\Component\Scheduler\Administrator\Traits\TaskPluginTrait</classname>.
      The trait provides all the magic.</para>

      <para>You need to handle three events:</para>

      <itemizedlist>
        <listitem>
          <para><literal>onTaskOptionsList</literal>. This is set to be
          handled by the <methodname>advertiseRoutines</methodname> method
          implemented in the <classname>TaskPluginTrait</classname>. This
          tells Joomla to add task types based on the contents of the
          <constant>TASKS_MAP</constant> constant of your plugin.</para>
        </listitem>

        <listitem>
          <para><literal>onExecuteTask</literal>. This is handled by the
          <methodname>standardRoutineHandler</methodname> method implemented
          in the <classname>TaskPluginTrait</classname>. When a scheduled task
          type the plugin can handled is being executed this method will call
          your respective plugin method, as defined in the
          <constant>TASKS_MAP</constant> constant of your plugin.</para>
        </listitem>

        <listitem>
          <para><literal>onContentPrepareForm</literal>. This is handled by
          the <methodname>enhanceTaskItemForm</methodname> method implemented
          in the <classname>TaskPluginTrait</classname>. It tells the
          Scheduled Tasks manager to use the XML forms which define each task
          type's options when the user creates a scheduled task with this task
          type.</para>
        </listitem>
      </itemizedlist>

      <para>The <constant>TASKS_MAP</constant> constant is the most important
      part of the plugin. It is an array with task definitions like
      this:</para>

      <programlisting>private const TASKS_MAP = [
    'exampleTask.foobar' =&gt; [
        'langConstPrefix' =&gt; 'PLG_TASK_EXAMPLE_TASK_FOOBAR',
        'method'          =&gt; 'foobar',
        'form'            =&gt; 'foobar',
    ],
];</programlisting>

      <para>Do note that in this example we define one task type. It is
      possible and most of the times desirable for a task plugin to define
      more than one task types. In this case the
      <constant>TASKS_MAP</constant> array will have more than one
      elements.</para>

      <para>The outermost key for each entry, in our example
      <literal>exampleTask.foobar</literal>, tells Joomla what is the internal
      name of the task type we are defining. The convention is to use
      <literal><replaceable>something</replaceable>Task.<replaceable>taskName</replaceable></literal>
      where <replaceable>something</replaceable> is the name of our plugin and
      <replaceable>taskName</replaceable> is a fairly short name for the task
      type. This will be stored in the database; you must not change it
      between different versions of your task plugin.</para>

      <para>In the innermost array we have three keys:</para>

      <itemizedlist>
        <listitem>
          <para><literal>langConstPrefix</literal>. Required. The common
          prefix of the language strings used for this task type. The
          convention is to use the format
          <literal>PLG_TASK_<replaceable>SOMETHING</replaceable>_TASK_<replaceable>TASKNAME</replaceable></literal>
          where <replaceable>something</replaceable> is the name of our plugin
          and <replaceable>taskName</replaceable> is a fairly short name for
          the task type. The plugin's language INI file will have to define at
          least two language strings:</para>

          <itemizedlist>
            <listitem>
              <para><literal>PLG_TASK_<replaceable>SOMETHING</replaceable>_TASK_<replaceable>TASKNAME</replaceable>_TITLE</literal>.
              The title of the task type, displayed to the user. Keep it very
              short and descriptive.</para>
            </listitem>

            <listitem>
              <para><literal>PLG_TASK_<replaceable>SOMETHING</replaceable>_TASK_<replaceable>TASKNAME</replaceable>_DESC</literal>.
              A longer description of the task type, displayed to the user.
              Try to keep it under 50 words.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><literal>method</literal>. Required. The name of the plugin
          method which will be handling the task type. It's customary to name
          it after the <replaceable>taskName</replaceable> you used in the
          previous keys.</para>
        </listitem>

        <listitem>
          <para><literal>form</literal>. Optional. The filename, without the
          .xml extension, of the XML form file which adds the configuration
          parameters to the task type when the user is editing the definition
          of a task. This file is placed in the <filename>forms</filename>
          folder of the plugin.</para>
        </listitem>
      </itemizedlist>

      <para>The method which handles each task type has the following
      signature:</para>

      <programlisting>public function foobar(
  \Joomla\Component\Scheduler\Administrator\Event\ExecuteTaskEvent $event
): int</programlisting>

      <para>The <parameter>$event</parameter> parameter is a standard Joomla
      event object. To get the task definition from the event you need to
      do</para>

      <programlisting>$task = $event-&gt;getArgument('subject');</programlisting>

      <para>This gives you a
      <classname>\Joomla\Component\Scheduler\Administrator\Task\Task</classname>
      object.</para>

      <para>To get the configuration parameters of the task, as a simple
      <classname>stdClass</classname> object, you can do:</para>

      <programlisting>$params = $event-&gt;getArgument('params');</programlisting>

      <para>Your method does NOT set a result value to the
      <parameter>$event</parameter> object; it's not an event handler per se.
      It instead returns an integer value which must be one of the constants
      defined in
      <classname>\Joomla\Component\Scheduler\Administrator\Task\Status</classname>.
      You should realistically only use the following constants as return
      values:</para>

      <itemizedlist>
        <listitem>
          <para><constant>KNOCKOUT</constant>. An error occurred. The task
          execution will appear failed. The task will be rescheduled normally
          for its next execution according to its configured schedule.</para>
        </listitem>

        <listitem>
          <para><constant>OK</constant>. Success. The task execution will
          appear successful. The task will be rescheduled normally for its
          next execution according to its configured schedule.</para>
        </listitem>

        <listitem>
          <para><constant>WILL_RESUME</constant>. Temporary pause. The task
          has more work to do but halted execution to avoid a timeout. The
          task execution will appear to be ongoing. The task is rescheduled to
          resume execution as soon as possible i.e. the next time Joomla is
          asked to check whether any tasks need to execute. Please note that
          if your task is being resumed the following will return true:</para>

          <programlisting>$resuming = $event
  -&gt;getArgument('subject')
  -&gt;get('last_exit_code', Status::OK) === Status::WILL_RESUME;</programlisting>

          <para>Resumable tasks are great for long operations, like resizing
          hundreds of images or sending a newsletter to thousands of
          recipients, which might otherwise time out if you tried executing
          them in a single run. Split your work into small batches and/or
          check how much time has elapsed since you started doing some work.
          If a batch is complete and/or you have spent more than a configured
          maximum amount of time (typically useful values are 3, 5, 10, 20 and
          30 seconds) return a Status::WILL_RESUME. Next time your task runs
          checks if the last_exit_code parameter is Status::WILL_RESUME and
          continue your work where you left off.</para>
        </listitem>
      </itemizedlist>

      <para>Earlier, we talked about having an XML form file to add parameters
      to the Scheduled Task type. The contents of the file look like
      this:</para>

      <programlisting>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;form&gt;
    &lt;fields name="params"&gt;
        &lt;fieldset name="task_params"&gt;
            &lt;field
                    name="my_parameter"
                    type="text"
                    label="PLG_TASK_EXAMPLE_TASK_FOOBAR_MY_PARAMETER_LABEL"
                    description="PLG_TASK_EXAMPLE_TASK_FOOBAR_MY_PARAMETER_DESC"
                    default=""
            /&gt;
        &lt;/fieldset&gt;
    &lt;/fields&gt;
&lt;/form&gt;
</programlisting>

      <para>The <tag>form</tag> tag has a <tag>fields</tag> tag whose name is
      <literal>params</literal> and inside it there is a <tag>fieldset</tag>
      tag whose name is <literal>task_params</literal>. The fields inside the
      <tag>fieldset</tag> are rendered in the task definition page.</para>

      <para>There is a special case where you can have a <tag>fieldset</tag>
      tag outside the <tag>fields</tag> tag; if you want your task to only be
      available for execution when Scheduled Tasks are executed through a
      Joomla CLI application command. This can be very useful if you have a
      very long running operation you do not want to (or cannot reasonably)
      break into smaller sub-tasks to make it a resumable task. In this case,
      we will add another <tag>fieldset</tag> tag whose name is
      <literal>aside</literal> and place a special hidden field in it. See
      below, highlighted in bold type:</para>

      <para><programlisting>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;form&gt;
<emphasis role="bold">    &lt;fieldset name="aside"&gt;
        &lt;field name="cli_exclusive" type="hidden" default="1" /&gt;
    &lt;/fieldset&gt;</emphasis>
    &lt;fields name="params"&gt;
        &lt;fieldset name="task_params"&gt;
            &lt;field
                    name="my_parameter"
                    type="text"
                    label="PLG_TASK_EXAMPLE_TASK_FOOBAR_MY_PARAMETER_LABEL"
                    description="PLG_TASK_EXAMPLE_TASK_FOOBAR_MY_PARAMETER_DESC"
                    default=""
            /&gt;
        &lt;/fieldset&gt;
    &lt;/fields&gt;
&lt;/form&gt;</programlisting>That's really all there is to it! Since this is
      a regular Joomla plugin and assuming your component is native Joomla 4
      (therefore its classes can autoload from anywhere in Joomla) you can of
      course pass your component's <classname>MVCFactory</classname> instance
      to the plugin and use it to get access to your component's Models and
      Tables. Therefore, your tasks can reuse your component's code. Remember
      that you write good software by staying DRY (Don't Repeat Yourself —
      reuse your objects and traits instead of copying and pasting the same
      code all over the place).</para>
    </section>

    <section xml:id="com-fields">
      <title>Custom fields</title>

      <para>Implementing custom fields is relatively simple. For starters,
      your component extension must implement the
      <interfacename>Joomla\CMS\Fields\FieldsServiceInterface</interfacename>.
      The two methods defined in the interface are implemented a lot like this
      in most cases:</para>

      <programlisting>public function validateSection($section, $item = null)
{
  if (!in_array($section, ['categories', 'item'])) {
    return null;
  }

  return $section;
}

public function getContexts(): array
{
  Factory::getApplication()-&gt;getLanguage()-&gt;load('com_example', JPATH_ADMINISTRATOR);

  return [
    'com_example.item'       =&gt; Text::_('COM_EXAMPLE_TITLE_ITEMS'),
    'com_example.categories' =&gt; Text::_('JCATEGORY'),
  ];
}</programlisting>

      <para>The former method makes sure that a context's section (the stuff
      after the dot) is a valid section where you expect custom fields to
      exist. In this example we expect two sections,
      <literal>categories</literal> and <literal>item</literal>.</para>

      <para>The latter method returns a list of contexts for out component
      where custom fields can be defined. We defined the two contexts
      corresponding to the sections we accept in the
      <methodname>validateSection</methodname> method. The return values will
      be used by <literal>com_fields</literal> to render the drop-down which
      lets the user select the section for which they define custom fields for
      your component.</para>

      <para>Your XML manifest must, of course, include two links to the Joomla
      Fields component, one for the Fields and one for the Fields group. Use
      one of the contexts you returned in the
      <methodname>getContexts</methodname> method above. Do NOT use the
      context for categories.</para>

      <programlisting>&lt;menu link="option=com_fields&amp;amp;view=fields&amp;amp;context=com_example.item"&gt;
    JGLOBAL_FIELDS
    &lt;params&gt;
        &lt;menu-quicktask&gt;&lt;![CDATA[index.php?option=com_fields&amp;view=field&amp;layout=edit&amp;context=com_example.item]]&gt;&lt;/menu-quicktask&gt;
        &lt;menu-quicktask-title&gt;COM_EXAMPLE_SUBMENU_FIELDS_NEW&lt;/menu-quicktask-title&gt;
        &lt;menu-quicktask-permission&gt;core.create;com_fields&lt;/menu-quicktask-permission&gt;
    &lt;/params&gt;
&lt;/menu&gt;

&lt;menu link="option=com_fields&amp;amp;view=groups&amp;amp;context=com_example.item"&gt;
JGLOBAL_FIELD_GROUPS
&lt;params&gt;
    &lt;menu-quicktask&gt;&lt;![CDATA[index.php?option=com_fields&amp;view=group&amp;layout=edit&amp;context=com_example.item]]&gt;&lt;/menu-quicktask&gt;
    &lt;menu-quicktask-title&gt;COM_EXAMPLE_SUBMENU_FIELD_GROUPS_NEW&lt;/menu-quicktask-title&gt;
    &lt;menu-quicktask-permission&gt;core.create;com_fields&lt;/menu-quicktask-permission&gt;
&lt;/params&gt;
&lt;/menu&gt;</programlisting>

      <para>Your backend item edit pages <emphasis>should</emphasis> display
      the custom fields automatically — as long as you render all of the
      form's fieldset without looking for specific names. For example,
      something similar to this code:</para>

      <programlisting>&lt;?php

use Joomla\CMS\HTML\HTMLHelper;
use Joomla\CMS\Language\Text;
use Joomla\CMS\Router\Route;

?&gt;
&lt;form action="&lt;?= Route::_('index.php?option=com_example&amp;view=item&amp;layout=edit&amp;id=' . $this-&gt;item-&gt;id) ?&gt;"
      aria-label="&lt;?= Text::_('COM_ATS_TITLE_TICKETS_EDIT', true) ?&gt;"
      class="form-validate"
      id="adminForm"
      method="post"
      name="adminForm"
&gt;
    &lt;input name="task" type="hidden" value=""&gt;
    &lt;?= HTMLHelper::_('form.token') ?&gt;

    &lt;?php foreach ($this-&gt;form-&gt;getFieldsets() as $fieldSet): ?&gt;

    &lt;div class="card mb-2"&gt;
        &lt;h3 class="card-header bg-info text-white"&gt;
            &lt;?= Text::_($this-&gt;form-&gt;getFieldsets()[$fieldSet]-&gt;label) ?&gt;
        &lt;/h3&gt;
        &lt;div class="card-body"&gt;
            &lt;?php echo $this-&gt;form-&gt;renderFieldset($fieldSet); ?&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;?php endforeach; ?&gt;

&lt;/form&gt;</programlisting>

      <para>Joomla handles loading and saving the values of custom fields
      automatically as long as the Content - Fields plugin is
      published.</para>

      <para>In the frontend, fields' contents are returned through the
      <literal>onContentAfterTitle</literal>,
      <literal>onContentAfterDisplay</literal> and
      <literal>onContentBeforeDisplay</literal> events. Typically, the
      implementation in your HtmlView class looks similar to this:</para>

      <programlisting>&lt;?php

use Joomla\CMS\Factory;
use Joomla\CMS\MVC\View\HtmlView as BaseHtmlView;
use Joomla\CMS\Plugin\PluginHelper;


class HtmlView extends BaseHtmlView
{
    /**
     * The item object details
     *
     * @var    \Joomla\CMS\Object\CMSObject
     *
     * @since  1.6
     */
    protected $item;

    // ... your code here ...

    /**
     * Execute and display a template script.
     *
     * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.
     *
     * @return  void|boolean
     */
    public function display($tpl = null)
    {
        $app        = Factory::getApplication();
        $state      = $this-&gt;get('State');
        $item       = $this-&gt;get('Item');
        $this-&gt;form = $this-&gt;get('Form');

        // ... your code here ...

        // Process the content plugins.
        PluginHelper::importPlugin('content');
        $offset = $state-&gt;get('list.offset');

        // Some plugins require a text attribute without checking if it exists
        $item-&gt;text = '';

        $app-&gt;triggerEvent('onContentPrepare', [
            'com_example.item', &amp;$item, &amp;$item-&gt;params, $offset
        ]);

        // Store the events for later
        $item-&gt;event = new \stdClass();

        $results = $app-&gt;triggerEvent('onContentAfterTitle', [
                'com_example.item', &amp;$item, &amp;$item-&gt;params, $offset,
            ]);
        $item-&gt;event-&gt;afterDisplayTitle = trim(implode("\n", $results));

        $results = $app-&gt;triggerEvent('onContentBeforeDisplay', [
            'com_example.item', &amp;$item, &amp;$item-&gt;params, $offset,
        ]);
        $item-&gt;event-&gt;beforeDisplayContent = trim(implode("\n", $results));

        $results = $app-&gt;triggerEvent('onContentAfterDisplay', [
            'com_example.item', &amp;$item, &amp;$item-&gt;params, $offset,
        ]);
        $item-&gt;event-&gt;afterDisplayContent = trim(implode("\n", $results));

        $this-&gt;item = $item;

        // ... your code here ...
    }
}</programlisting>

      <para>Your view template can then output
      <code>$this-&gt;event-&gt;afterDisplayTitle</code> etc in appropriate
      places.</para>

      <tip>
        <para>If you want to see how you can override Joomla's default custom
        field display to format it in a way that's more pleasant to the eye
        you can download Akeeba Ticket System Core (it's free of charge) and
        look at
        <classname>\Akeeba\Component\ATS\Site\View\Ticket\HtmlView</classname>.</para>

        <para>I have a method called
        <methodname>getCustomFieldsDisplay</methodname> which renders fields
        using custom layout overrides for the <literal>field.render</literal>
        and <literal>fields.render</literal> Joomla layouts. Ignore the
        section with the comment “Filter fields by ATS Private Display”, this
        is some special handling I use to make some fields invisible to the
        general public and only visible to the owner of the helpdesk ticket
        and the helpdesk personnel — this uses information from a custom
        plugin I ship with my software and is very specific to my use
        case.</para>

        <para>The two layout files
        (<filename>components/com_ats/layouts/field/render.php</filename> and
        <filename>components/com_ats/layouts/fields/render.php</filename>) are
        used to format the custom fields in a way which visually integrates
        more pleasantly than Joomla's default “word vomit” display style of
        nested unsorted lists.</para>

        <para>It goes without saying, my clients can of course choose to
        override these layout files OR the entire view template to render
        custom fields the way they see fit. For example, a site integrator
        might choose to have a custom field which is never displayed
        automatically, get its value using the field name and display it in a
        visually pleasant display in the view template. For instance, someone
        could have a custom field plugin which saves geographical coordinates.
        These could be displayed in the frontend of the site as an
        OpenStreetMap map. With custom fields, sky's the limit!</para>
      </tip>
    </section>

    <section xml:id="com-hmvc">
      <title>HMVC (sort of)</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="plg">
    <title>Plugins</title>

    <para>Plugins are the fundamental building blocks of Joomla!. They let us
    execute code when something interesting happens. Unsurprisingly, plugins
    are extremely powerful and the cornerstone of implementing complex
    features which alter or add features in Joomla without having to modify
    core files (“hack core”) as is usual in other CMS. This lets us have very
    powerful, <emphasis>easily maintainable</emphasis>, sites.</para>

    <section xml:id="plg-forms">
      <title>The many forms of a Joomla plugin</title>

      <para>Joomla plugins have been around for a very long time. In fact,
      they've been around since before Joomla forked off Mambo in August 2005.
      They were called ‘mambots’ back then. Having such a fundamental feature
      for over two decades understandably means that there are many forms of
      plugins possible.</para>

      <section xml:id="plg-forms-legacy">
        <title>Legacy (Joomla 1.x to 3.x)</title>

        <para>It might come to you as a surprise, but the original way plugins
        were implemented in Joomla 1.0 back in 2005 is still supported in
        Joomla 4. This support will be removed in Joomla 6, scheduled for
        release in 2025, two decades after it first appeared. Sure, there have
        been refinements but the core concept still applies.</para>

        <important>
          <para>Even though Joomla uses this form of plugin for most of its
          core plugins in Joomla 4 (and possibly Joomla 5), this is a form of
          plugin which has been deprecated and will most likely go away in
          Joomla 6.</para>

          <para>This form of plugin is only recommended if you are writing a
          version of your software which is meant to run on both Joomla 3 and
          Joomla 4 / 5, to facilitate people trying to migrate their sites
          over to a newer Joomla version.</para>

          <para>If you are writing software native to Joomla 4 and beyond you
          should use the <link
          linkend="plg-forms-j4-subscriberinterface">Joomla 4 with
          SubscriberInterface</link> form of plugins explained further
          below.</para>

          <para>The only exception to this rule are, at the time of this
          writing, plugins in the editors-xtd folder because they are not
          real, pure Joomla plugins. Their class is instantiated directly by
          Joomla and the <methodname>onDisplay</methodname> method called
          directly.</para>
        </important>

        <para>Legacy plugins consist of a single class which is named
        PlgTypeName where Type is the plugin type a.k.a. folder (e.g. system,
        user, console, …) and Name is the name of the plugin. For example, we
        could have PlgSystemExample for a system plugin named
        <code>example</code> and which lives in
        <filename>plugins/system/example/example.php</filename>. The class
        always extends from
        <classname>\Joomla\CMS\Plugin\CMSPlugin</classname> or one of its
        sub-classes typically defined in a component (e.g. finder plugins
        extend from
        <classname>\Joomla\Component\Finder\Administrator\Indexer\Adapter</classname>
        which extends from
        <classname>\Joomla\CMS\Plugin\CMSPlugin</classname>).</para>

        <para>Any <emphasis role="bold">public</emphasis> method whose name
        starts with <code>on</code> is registered as an event listener.
        Therefore a method called <methodname>onFooBar</methodname> is
        registered as a legacy plugin event listener for an event called
        <code>onFooBar</code>.</para>

        <para>There's a small caveat when it comes to Joomla 4 and 5. If the
        method accepts only one parameter which is either named
        <code>$event</code> OR is type-hinted as a class implementing
        <interfacename>\Joomla\Event\EventInterface</interfacename> then the
        method is registered as an event listener, a new type of listener. See
        <link linkend="plg-forms-j4-listener-types">Legacy vs Event Listener
        methods</link>. This is a deliberate design choice which lets you
        write plugins which can simultaneously handle legacy events when
        running under Joomla 3 and modern events when running under Joomla 4
        and 5. This lets you provide a version of your plugin which acts as a
        “bridge” for people migrating from Joomla 3 to 4 and 5: the same
        plugin can run on both versions of Joomla without breaking the
        site.</para>
      </section>

      <section xml:id="plg-forms-j4-classic">
        <title>Joomla 4 classic</title>

        <para>As noted earlier, Joomla 4 introduced <link
        linkend="concepts-container">Dependency Injection and service
        providers</link> for all extensions, of course including plugins. It
        should come as no surprise then that the second plugin variant we get
        is similar to the <link linkend="plg-forms-legacy">legacy
        plugins</link> but with namespaces and service providers.</para>

        <para>The first difference you will notice is that the XML manifest
        goes from this:</para>

        <programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;extension type="plugin" group="system" method="upgrade"&gt;
    &lt;name&gt;plg_system_example&lt;/name&gt;
    &lt;author&gt;Joomla! Project&lt;/author&gt;
    &lt;creationDate&gt;2022-10&lt;/creationDate&gt;
    &lt;copyright&gt;(C) 2022 Open Source Matters, Inc.&lt;/copyright&gt;
    &lt;license&gt;GNU General Public License version 2 or later; see LICENSE.txt&lt;/license&gt;
    &lt;authorEmail&gt;admin@joomla.org&lt;/authorEmail&gt;
    &lt;authorUrl&gt;www.joomla.org&lt;/authorUrl&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;description&gt;PLG_SYSTEM_EXAMPLE_XML_DESCRIPTION&lt;/description&gt;
    &lt;files&gt;
        <emphasis role="bold">&lt;filename plugin="example"&gt;example.php&lt;/filename&gt;</emphasis>
    &lt;/files&gt;
    &lt;languages&gt;
        &lt;language tag="en-GB"&gt;language/en-GB/plg_system_example.ini&lt;/language&gt;
        &lt;language tag="en-GB"&gt;language/en-GB/plg_system_example.sys.ini&lt;/language&gt;
    &lt;/languages&gt;
&lt;/extension&gt;
</programlisting>

        <para>to this:</para>

        <programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;extension type="plugin" group="system" method="upgrade"&gt;
    &lt;name&gt;plg_system_example&lt;/name&gt;
    &lt;author&gt;Joomla! Project&lt;/author&gt;
    &lt;creationDate&gt;2022-10&lt;/creationDate&gt;
    &lt;copyright&gt;(C) 2022 Open Source Matters, Inc.&lt;/copyright&gt;
    &lt;license&gt;GNU General Public License version 2 or later; see LICENSE.txt&lt;/license&gt;
    &lt;authorEmail&gt;admin@joomla.org&lt;/authorEmail&gt;
    &lt;authorUrl&gt;www.joomla.org&lt;/authorUrl&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;description&gt;PLG_SYSTEM_EXAMPLE_XML_DESCRIPTION&lt;/description&gt;
    <emphasis role="bold">&lt;namespace path="src"&gt;Joomla\Plugin\System\Example&lt;/namespace&gt;</emphasis>
    &lt;files&gt;
    <emphasis role="bold">&lt;folder&gt;services&lt;/folder&gt;</emphasis>
    <emphasis role="bold">&lt;folder plugin="example"&gt;src&lt;/folder&gt;</emphasis>
    &lt;/files&gt;
    &lt;languages&gt;
        &lt;language tag="en-GB"&gt;language/en-GB/plg_system_example.ini&lt;/language&gt;
        &lt;language tag="en-GB"&gt;language/en-GB/plg_system_example.sys.ini&lt;/language&gt;
    &lt;/languages&gt;
&lt;/extension&gt;
</programlisting>

        <para>The affected lines are in bold type.</para>

        <para>First of all, we have a <tag>&lt;namespace&gt;</tag> tag to
        declare our namespace. The namespace MUST follow the convention
        <code>Joomla\Plugin\<replaceable>Type</replaceable>\<replaceable>Name</replaceable></code>
        where Type is the plugin type a.k.a. folder (e.g. system, user,
        console, …) and Name is the name of the plugin. TheType must be
        written as Uppercasefirst i.e. the first letter is uppercase and all
        others are lowercase.</para>

        <para>The second obvious change is that instead of a plugin file we
        have two folders, <filename>services</filename> and
        <filename>src</filename>.</para>

        <para>The <filename>services</filename> folder contains a single file,
        <filename>provider.php</filename>. It's very similar to <link
        linkend="com-services">a component's service provider
        file</link>:</para>

        <programlisting language="php">&lt;?php
defined('_JEXEC') || die;

use Joomla\CMS\Extension\PluginInterface;
use Joomla\CMS\Factory;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;
use Joomla\Event\DispatcherInterface;
use Joomla\Plugin\System\Example\Extension\Example;

return new class implements ServiceProviderInterface {
    public function register(Container $container)
    {
        $container-&gt;set(
            PluginInterface::class,
            function (Container $container)
            {
                $config  = (array)PluginHelper::getPlugin('system', 'example');
                $subject = $container-&gt;get(DispatcherInterface::class);

                $app = Factory::getApplication();

                /** @var \Joomla\CMS\Plugin\CMSPlugin $plugin */
                $plugin = new Example($subject, $config);
                $plugin-&gt;setApplication($app);

                return $plugin;
            }
        );
    }
};</programlisting>

        <para>The important thing to note here is that the service provider is
        responsible for registering a
        <interfacename>Joomla\CMS\Extension\PluginInterface</interfacename>
        service which returns an object instance of our plugin class.</para>

        <tip>
          <para>Your plugin class can also implement the
          <interfacename>\Joomla\CMS\Extension\BootableExtensionInterface</interfacename>
          interface. If it does, its <methodname>boot</methodname> method will
          be called when Joomla loads your plugin, before any event is
          executed, and gives you access to the plugin's Dependency Injection
          container. While you shouldn't try to execute any significant amount
          of code at this point (Joomla has not finished booting up yet!) and
          you shouldn't use the DI container directly to pull resources (the
          service provider is meant to push them to the plugin instead) it may
          come in handy for these, uh, <emphasis>forbidden</emphasis>
          purposes.</para>

          <para>Here's an example. There are <emphasis>some</emphasis>
          services which have a lengthy initialisation — for example, a
          foreign currency exchange service will need to periodically pull the
          currency exchange rates from a central bank's web site. Ideally,
          you'd want to move their initialisation outside the constructor and
          into a different method you need to call before doing something
          useful with your service. However, you may also run into
          chicken-and-egg situations trying to do that. If the server doesn't
          support cURL the service might throw an exception. I'd like to catch
          it so I can <emphasis>not</emphasis> offer this feature with
          unsatisfied server dependencies. But if I do that in the service
          provider I am also very likely trying to make a web request to the
          central bank's website to get the currency exchange rate at an
          inopportune moment where the application needs to finish loading as
          fast as possible.</para>

          <para>While there are clever ways to work around that, you may find
          it far easier to get access to the container in the
          <methodname>boot</methodname> method, store a reference to the
          container in a private property of your plugin and pull an instance
          of your custom forex service when you need it. If it throws an
          exception you can implement your “this isn't possible on this
          server” logic. By instantiating your service through the provider
          only when needed you solved your chicken-and-egg problem.</para>

          <para>A cleaner solution would of course be trying to check the
          server dependencies on service instantiation and set a flag in the
          service. When the service consumer (your plugin) tries to use the
          service you could throw an exception. This is an obvious solution in
          this simple problem. For more complex problems there might not be an
          equally obvious solution.</para>

          <para>As I always say to aspiring developers, your goal is to
          deliver something useful and maintainable in a finite period of
          time. If it means writing something a CS professor would give a
          disapproving frown, so be it. You can revisit that implementation
          later, when you have time to burn. As Steve Jobs succinctly put it,
          “<link
          xlink:href="https://leaderforgood.com/real-artists-ship/">real
          artists ship</link>”.</para>
        </tip>

        <para>The plugin class, as with legacy plugins, extends from
        <classname>\Joomla\CMS\Plugin\CMSPlugin</classname> and works the same
        as <link linkend="plg-forms-legacy">a Legacy plugin's</link>
        class.</para>

        <para>You will not see any plugins of this type in the core and they
        are pretty rare in the wild, mostly from software — like older
        versions of mine — which started the conversion process to Joomla 4
        before Joomla 4 was finished and before the modern event system was
        mature enough for general use.</para>

        <para>Practically speaking, the only use case for this type of plugin
        is if you still have plugin events which pass around scalar variables
        <emphasis>by reference</emphasis>. For example, something like
        this:</para>

        <programlisting language="php">public function onMyCustomEvent(string $foo, array &amp;$bar);</programlisting>

        <para>The $bar variable is a scalar (array) passed by reference. It
        can be modified by the plugin event handler. This will not be possible
        using modern events.</para>

        <para>If you want a clean solution you need to make changes in the
        code which calls this plugin event. Instead of passing around an array
        you'd have to pass a
        <classname>\Joomla\CMS\Object\CMSObject</classname> or
        <classname>\Joomla\Registry\Registry</classname> object created from
        the contents of the array. Your modern event handler can modify that
        object (objects are always passed by reference in all versions of PHP
        supported by Joomla 4 and beyond). Then your consumer code could
        convert back from an object to an array.</para>

        <para>The clean solution is admittedly more convoluted than you might
        expect and requires changes in the consumer which might not be
        possible if it's not code under your control. If you do not feel
        confident implementing the cleaner solution, or if it's just not
        possible because third party code is using your events, you can create
        a Joomla 4 classic plugin with a legacy plugin event handler for your
        plugin event which won't give you a hard time with scalar variables
        passed by reference. It's not the best coding practice but it does
        take a while —and several refactoring passes— to migrate to a cleaner
        architecture. Even more so considering that Joomla 3 and these coding
        practice had been around for nearly a decade before Joomla 4 was
        released.</para>
      </section>

      <section xml:id="plg-forms-j4-subscriberinterface">
        <title>Joomla 4 with SubscriberInterface</title>

        <para>You might remember from an earlier chapter talking about <link
        linkend="com-controllers-basic-services">the basic services in a
        component's service provider</link> that you can trigger plugins using
        modern events like so:</para>

        <programlisting language="php">$event = \Joomla\CMS\Event\GenericEvent::create('onSomething', [$param1, $param2]);
$this-&gt;getDispatcher()-&gt;dispatch($event-&gt;getName(), $event);
$results = $event-&gt;getArgument('result', []);</programlisting>

        <para>It follows reason that Joomla 4 offers a way to write plugins
        which only deal with these modern events. These events are faster and
        have many more tricks up their sleeves than the ‘dumb’ callback model
        implemented in Joomla 1.x, 2.x and 3.x.</para>

        <para>Plugins of this type are just like <link
        linkend="plg-forms-j4-classic">Joomla 4 classic plugins</link> with a
        twist. The plugin class implements the
        <interfacename>\Joomla\Event\SubscriberInterface</interfacename> and
        you set the protected property <code>$this-&gt;allowLegacyListeners =
        false;</code>. This changes the way Joomla registers event
        handlers.</para>

        <para>Joomla will NOT use reflection to find public methods whose name
        starts with <code>on</code>. It will instead call the public static
        method <methodname>getSubscribedEvents</methodname> which is defined
        in the interface and implemented in your plugin class. This returns an
        array mapping event names to public methods of your plugin. Not having
        to go through reflection saves <emphasis>a lot</emphasis> of time on
        every page load of the site. Moreover, events are self-contained
        objects being passed around which reduces the overhead of calling each
        event handler. These add up with the dozens to hundreds of plugins and
        event handlers running on a typical Joomla site, saving several dozens
        to a few hundreds of milliseconds of page load time. This is a
        significant performance improvement for the site. <emphasis
        role="bold">This is why I've been telling people since 2017, that
        modern events make Joomla 4 and later versions
        faster</emphasis>.</para>

        <para>The implementation of the getSubscribedEvents method is pretty
        straightforward:</para>

        <programlisting language="php">public static function getSubscribedEvents(): array
{
    return [
        'onSomething'     =&gt; 'doSomething',
        'onSomethingElse' =&gt; ['doSomething', \Joomla\Event\Priority::HIGH],
    ];
}</programlisting>

        <para>The keys of the array are the event names. The values are the
        names of the methods which handle each event.</para>

        <para>But, wait a minute! That second item has an array value. What is
        that? Well, that's one of the benefits of using SubscriberInterface:
        you can tell Joomla about the priority you want for your event
        handler, meaning that the order plugins execute is not dictated only
        by their user-defined ordering in the backend of the site but also by
        the programmer's preferred priority.</para>

        <para>By default, all event handlers are attached with Normal
        priority. They are then executed in the order they were attached, i.e.
        how the plugins were ordered in the backend Plugins management page of
        the site. This is the only option you get with legacy and classic
        plugins.</para>

        <para>Plugins implementing the SubscriberInterface can optionally set
        a priority for each event handler. This is an integer. The higher the
        integer is, the earlier your event handler executes. Joomla first
        executes all event handlers with the highest priority number in the
        order they were attached. Then moves to the event handlers with the
        second highest priority number in the order they were attached and so
        on.</para>

        <para>If you set your priority to high, as I did above, your event
        handler will be one of the first (if not the absolute first) to be
        executed. If, conversely, you set it to
        <code>\Joomla\Event\Priority::MIN</code> or even
        <code>PHP_INT_MIN</code> your event handler will be one of the last
        (if not the absolute last) to be executed. In the few cases where this
        is truly needed you no longer have to tell your users to reorder
        plugins for your plugin to work correctly and predictably; you can
        just set the priority.</para>

        <caution>
          <para><emphasis role="bold">With great power comes great
          responsibility</emphasis>. Do NOT set the priority of your event
          handlers unless there is an absolute need to do so.</para>

          <para>For example, a security plugin will need to guarantee that its
          plugin events execute first to avoid other plugins' security
          vulnerabilities being triggered by malicious requests. Full page
          HTML source code search &amp; replace plugins will need to have
          their onAfterRender handler run as the very last to be able to
          replace HTML text right before it's potentially compressed and
          returned to the browser.</para>

          <para>The vast majority of plugins should NOT set a priority. By
          setting a priority you make it very hard if not impossible for the
          user to change the execution order of your plugin which might be
          necessary to work around issues on their site. <emphasis
          role="bold">DO NOT TAKE AWAY THE USER'S AGENCY UNLESS THERE IS AN
          VERY WELL JUSTIFIED AND DOCUMENTED REASON</emphasis>.</para>
        </caution>

        <para>Moreover, you should keep in mind that all methods handling
        events only accept one argument (by value, not reference!), an event
        object which implements the
        <interfacename>\Joomla\Event\EventInterface</interfacename> interface.
        We will talk about this in <link
        linkend="plg-forms-j4-listener-types">the next section on listener
        types</link>.</para>
      </section>

      <section xml:id="plg-forms-j4-listener-types">
        <title>Legacy vs Event Listener methods</title>

        <para>As we have already alluded to in the previous sections, there
        are two types of plugin event listeners.</para>

        <bridgehead>Legacy plugin event listeners</bridgehead>

        <para>Legacy plugin event listeners are nothing more than glorified
        callbacks. They are plain old methods which accept a number of
        parameters and possibly<footnote>
            <para>Actually, they always have to return a value. It just so
            happens that the return value of methods typehinted to return void
            is NULL in PHP. At some point, in newer PHP versions, this will
            start throwing an error which is another reason legacy listeners
            will have to eventually go away.</para>
          </footnote> return a value. For example, we could have something
        like this:</para>

        <programlisting language="php">public onSomething(string $foo, array $bar): array</programlisting>

        <para>This simplicity is simultaneously the strength and the Achille's
        heel of legacy plugin event handlers.</para>

        <itemizedlist>
          <listitem>
            <para>Having an arbitrary number of parameters makes it really
            hard to know what is the <emphasis>canonical</emphasis> parameters
            list when you are calling a plugin event and when you are
            implementing a handler for it.</para>
          </listitem>

          <listitem>
            <para>It's impossible to add new parameters, even optional ones,
            without a breaking change. If different handlers have a different
            number of parameters (or, worse, parameters order!) they expect
            you might get PHP warning or errors.</para>
          </listitem>

          <listitem>
            <para>Neither the parameters nor the return values can be
            type-hinted. This makes it perfectly possible for a developer,
            core or third party, to pass the wrong data type to an event's
            argument e.g. an object where an array is expected. It also makes
            for inconsistent return values which need to be normalised and
            validated in consumer code, i.e. every time an event is
            called.</para>
          </listitem>

          <listitem>
            <para>The aforementioned problems can result in bugs which are
            really hard to address. For example, a third party extension may
            cause a core or third party plugin to fail with a PHP error on PHP
            8 by passing the wrong data type to it. Conversely, a third party
            plugin may cause core or third party components or modules to fail
            by returning an unexpected data type. Identifying who messed up is
            hard. Explaining to a client that it's not your code at fault but
            a third party plugin may be really hard, especially if that third
            party plugin works fine in the <emphasis>very limited
            subset</emphasis> of use cases it was developed for and tested
            on.</para>
          </listitem>

          <listitem>
            <para>Running callbacks with an arbitrary number of arguments
            requires going through PHP's
            <function>call_user_func_array()</function> function which has
            more overhead than calling methods directly. This is only relevant
            on older PHP versions; the performance delta is nearly gone in PHP
            8.</para>
          </listitem>
        </itemizedlist>

        <para>The only thing this simple callback arrangement has going for it
        is that, well, it's very simple to implement in the code which calls
        the plugin events, the core code which runs the plugin event handlers
        and the code which consumes the results of plugin event handlers —
        though the latter is debatable.</para>

        <bridgehead>Modern event listeners</bridgehead>

        <para>Joomla 4 introduced a whole new concepts: <emphasis
        role="bold">events</emphasis>.</para>

        <para>Each event is its own object. It has arguments which can be
        anonymous or named, typically the former in generic events and the
        latter in <link linkend="plg-concrete-events">concrete events</link>.
        Events always have a named argument called <code>result</code> which
        lets the event handler not only return a result but also inspect what
        other results were returned by event handlers called before it (most
        concrete events have an <methodname>addResult</methodname> method to
        facilitate returning results). A concrete event class can implement
        type checks and validation of any (or all) of its arguments, including
        the results. It's no longer the Wild West.</para>

        <para>Event handlers have the option to stop the processing of an
        event's handlers by calling the event object's
        <methodname>stopPropagation</methodname> method; this is useful when
        you want to run a number of plugins until you get at least one result.
        Think about avatars displayed in a forum. You may have a number of
        plugins which can return an avatar image: Gravatar (if the user has an
        account there), using an image source from a user field, Facebook (if
        the user has linked an account), a locally installed social network
        component, and a fall-back to a generated fake avatar. The first
        avatar found will be used, the rest will be discarded. If the rest are
        going to be discarded, why even bother running the code to check if
        they exist?! Instead, each avatar plugin would work like this. It runs
        its code. If there is no avatar to be reported, return. If there is an
        avatar to be reported use <methodname>addResult</methodname> to return
        it and call the event's <methodname>stopPropagation</methodname>
        method to prevent the other avatar plugins from running for no reason
        and wasting the user's time and your server's resources. This is
        something you just cannot do with legacy event listeners.</para>

        <para>Also, as we mentioned earlier, modern event handlers can have
        prioritised event handlers with all the benefits we already
        mentioned.</para>

        <para>Modern event handlers are fairly simple:</para>

        <programlisting language="php">public function handleSomething(\Joomla\Event\Event $event): void</programlisting>

        <para>Note the type-hint to the <code>$event</code> argument. As
        written above, the method can be used to handle any event. In most
        cases you will need to use a concrete event class: either the concrete
        core event classes supplied in Joomla's
        <filename>libraries/src/Event</filename> directory and its
        subdirectories or a concrete event class provided by another Joomla
        extension.</para>

        <para>Getting the arguments to the event depends on the event class
        itself. For generic events you'd need to do something like:</para>

        <programlisting language="php">[$param1, $param2, $param3] = $event-&gt;getArguments();</programlisting>

        <para>That's because generic events do not have named arguments. This
        is the equivalent of having a legacy plugin event handler with the
        method signature:</para>

        <programlisting language="php">public function onSomething($param1, $param2, $param3);</programlisting>

        <para>With concrete events, it depends on the event. In most cases
        you'd do either of the following:</para>

        <programlisting language="php">// Named arguments without a getter method
$param1 = $event-&gt;getArgument('param1');
// Named arguments with getter methods
$param2 = $event-&gt;getParam1();</programlisting>

        <para>Any decent IDE will let you know if there is a getter in
        <code>$event</code> based on its type-hint. That's why it makes sense
        to type-hint your event handler methods correctly.</para>

        <para>The return type of a modern event handler is always void. You do
        NOT return values directly. Instead, you add them to the
        <code>result</code> argument which is always an array:</para>

        <programlisting language="php">$result = $this-&gt;getArgument('result') ?? [];
$result[] = $theResultIAmReturning;
$this-&gt;setArgument('result', $result);</programlisting>

        <para>Most concrete event classes implement the
        <interfacename>\Joomla\CMS\Event\Result\ResultAwareInterface</interfacename>
        which has the <methodname>addResult</methodname> method to return
        values more easily:</para>

        <programlisting language="php">$this-&gt;addResult($theResultIAmReturning);</programlisting>

        <para>Finally, remember that events can be mutable, immutable or
        selectively immutable. A mutable event allows its handlers to use
        <methodname>setArgument</methodname> freely, modifying all of its
        arguments.</para>

        <caution>
          <para>Even though <emphasis>most</emphasis> core events are
          currently mutable, this <emphasis>will</emphasis> change in Joomla 5
          and Joomla 6. Joomla is moving towards concrete event classes for
          all core events. These concrete classes will be selectively
          immutable: all of their arguments will be immutable except for the
          <code>result</code> argument; the latter only if it's an event which
          expects a result to be returned.</para>

          <para>Therefore you MUST NOT rely on core events' arguments being
          mutable at the moment. Treat them as immutable or you <emphasis>will
          suffer</emphasis> in the future!</para>
        </caution>

        <para>An immutable event does not allow any of its arguments to be set
        after it has been created. This does not mean that you cannot do
        anything with the arguments! Remember that argument values which are
        object can be modified without needing to set the argument again. For
        example, this is a valid, working event handler:</para>

        <programlisting language="php">	public function handleTableAfterLoad(\Joomla\CMS\Event\Table\AfterLoadEvent $event): void
    {
        if (!$event-&gt;getArgument('result')) return;

        /** @var \Joomla\CMS\Table\TableInterface $table */
        $table = $event-&gt;getArgument('subject');

        $table-&gt;modified_by = \Joomla\CMS\Factory::getApplication()
            -&gt;getIdentity()
            -&gt;id;
    }</programlisting>

        <para>The
        <classname>\Joomla\CMS\Event\Table\AfterLoadEvent</classname> concrete
        event class is an <emphasis>immutable</emphasis> event. However, it
        has a <code>subject</code> argument which contains a Joomla Table
        object. All objects in PHP are passed by reference; any change we make
        to it will persist when we return from our method. That's why we can
        change its <code>modified_by</code> property without returning any
        value from our event handler and despite the event itself being
        immutable.</para>

        <para>Finally, we have selective immutable events. On the face of it,
        they are immutable events. However, they have setter methods for
        specific named arguments. Actually, the
        <classname>\Joomla\CMS\Event\Table\AfterLoadEvent</classname> is a
        selectively immutable event. It has setters for the
        <code>result</code> and <code>row</code> arguments. Every event
        implementing
        <interfacename>\Joomla\CMS\Event\Result\ResultAwareInterface</interfacename>
        is selectively immutable; there is always the
        <methodname>addResult</methodname> method to add to the results
        returned by the event.</para>

        <para>Handling events is a bit more involved than using simple
        callback methods like you used to in legacy plugins. If you feel
        utterly lost, <code>var_dump</code> the <code>$event</code> variable
        and <code>die();</code><footnote>
            <para>You can of course attach a PHP debugger and add a breakpoint
            to your event handler to better inspect what is going on. Even
            though this method is preferable I understand that not everyone
            knows how to do it. Plus, var_dump and die is easy and I use it
            too when I just want to get a quick idea of what's going on with a
            variable without having to temporarily disable my other
            breakpoints. All tools are useful when used appropriately.</para>
          </footnote>. You will get a lot of insight as to what the event does
        and which data does it carry.</para>
      </section>
    </section>

    <section xml:id="plg-namespaces">
      <title>Namespaces</title>

      <para>Before Joomla 4.0 all plugins were a single class which followed
      the naming convention
      <classname>Plg<replaceable>Folder</replaceable><replaceable>Name</replaceable></classname>
      where <code>Folder</code> is the plugin folder with its first letter
      capitalised (e.g. <code>System</code> for <code>system</code> plugins)
      and <code>Name</code> is the plugin's name with all of its letters
      lowercase except the first one which is capitalised (e.g. Example). Thus
      a plugin named <code>example</code> in the <code>system</code> folder
      would have the class name PlgSystemExample.</para>

      <para>In those earlier Joomla versions the file name of the plugin was
      also prescribed and could not change. The aforementioned plugin's class
      file would necessarily be
      <filename>plugins/system/example/example.php</filename>. The immediate
      result of that is that the file name and the class name are not the same
      which makes class autoloading for plugins a pain in the posterior.
      Therefore, we had no autoloading for plugins.</para>

      <para>While this is not a problem for trivial plugins, it can become a
      substantial issue for more complex plugins. As a developer you either
      had to create a supermassive class running into the several thousands of
      lines of code or you'd have to “invent” your own autoloader. Typically
      it would be the latter, with the plugin's constructor method using
      <code>\JLoader::register</code> or <code>\JLoader::registerPrefix</code>
      to register individual, arbitrarily named classes or a PSR-4 namespace
      used by the plugin. The former ran the risk of having same-named classes
      declared by multiple plugins with the site breaking. The latter ran the
      risk of having two or more plugins trying to use the same-named
      namespace, again breaking the site.</para>

      <para>Joomla 4.0 added <link
      linkend="concepts-namespaces">namespaces</link> support for plugins. All
      we have to do is declare a namespace, a root folder for it under our
      plugin and make sure that the folder and file names follow the <link
      xlink:href="https://www.php-fig.org/psr/psr-4/">PSR-4</link>
      standard.</para>

      <para>Your plugin's namespace prefix is declared in the XML manifest of
      the plugin using a new XML element under the
      <code>&lt;extension&gt;</code> root element:</para>

      <programlisting language="xml">&lt;namespace path="src"&gt;My\Namespace\Prefix&lt;/namespace&gt;</programlisting>

      <para>The <code>path</code> attribute tells Joomla which subdirectory of
      your extension holds the PSR-4 of your extension's PHP files. It is best
      practice to name it <filename>src</filename> but <emphasis>you don't
      have to</emphasis>. I always assume you are using
      <filename>src</filename>.</para>

      <para>The text inside the XML element, <code>My\Namespace\Prefix</code>
      in our example, is the namespace prefix you will be using. Each plugin
      can register its own namespace prefix without any restrictions. It is
      <emphasis>recommended</emphasis> to use the convention
      <code>Joomla\Plugin\<replaceable>Folder</replaceable>\<replaceable>Name</replaceable></code>
      where <code>Folder</code> is the plugin folder with its first letter
      capitalised (e.g. <code>System</code> for <code>system</code> plugins)
      and <code>Name</code> is the plugin's name with all of its letters
      lowercase except the first one which is capitalised (e.g. Example). Thus
      a plugin named <code>example</code> in the <code>system</code> folder
      would have the namespace <code>Joomla\Plugin\System\Example</code>.
      Using this convention ensures that there will be no overlap in
      namespaces of different plugins since you cannot have two different
      plugins with the same name and plugin type.</para>

      <note>
        <para>Unlike components, this is the entire namespace for your plugin.
        You do NOT get a different namespace per Joomla application.</para>
      </note>

      <para>Your plugin's class does not have to follow any specific naming
      convention or be placed in a specific sub-namespace of the plugin's
      namespace. This is determined in the plugin's <link
      linkend="plg-services">Service Provider</link>. It does have to extend
      from <classname>\Joomla\CMS\Plugin\CMSPlugin</classname> or one of its
      descendant classes.</para>

      <para>It is <emphasis>customary</emphasis> to name it
      <code>Extension</code>, <code>Plugin</code>, or after the name of your
      plugin (e.g. <code>Example</code>) and place it in the
      <code>Extension</code> sub-namespace of your plugin. For example, our
      aforementioned example system plugin would customarily have its main
      plugin class be
      <classname>Joomla\Plugin\System\Example\Extension\Example</classname>.</para>

      <para>Any other classes you are shipping with and using in your plugin
      just follow the PSR-4 class naming standard.</para>

      <para>The best part? Joomla registers namespaces when it boots. Even if
      your plugin is not yet loaded (but <emphasis>is</emphasis> enabled!) you
      have access to its classes using Joomla's PSR-4 autoloader. This is a
      typically much faster way to find out if a plugin is loaded or not
      instead of going through
      <methodname>\Joomla\CMS\Plugin\PluginHelper::isEnabled</methodname>. For
      example:</para>

      <programlisting language="php">// The old way
$hasSystemExample = <methodname>\Joomla\CMS\Plugin\PluginHelper::isEnabled</methodname>('system', 'example');
// The new way
$hasSystemExample = class_exists(\Joomla\Plugin\System\Example\Extension\Example::class, true);</programlisting>

      <para>This does NOT mean that you should stop using
      <methodname>\Joomla\CMS\Plugin\PluginHelper::isEnabled</methodname>
      though. There are plenty of cases where you know the type and name of a
      plugin but do not know how it has named its plugin class. In this case
      go through the slower, old way; it's safer than making arbitrary
      assumptions. Use the new way only for your own plugins since you are in
      full control of their classes's naming.</para>
    </section>

    <section xml:id="plg-services">
      <title>Service Provider</title>

      <para>As discussed in a previous section, the service provider file is
      mandatory for Joomla 4 native plugins, lives in the plugin's
      <filename>services</filename> folder and always named
      <filename>provider.php</filename>.</para>

      <para>The absolutely minimal minimal service provider file looks like
      the following:</para>

      <programlisting language="php">&lt;?php

defined('_JEXEC') || die;

use Joomla\CMS\Extension\PluginInterface;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;
use Joomla\Event\DispatcherInterface;
use Joomla\Plugin\System\Example\Extension\Example;

return new class implements ServiceProviderInterface
{
    /**
     * Registers the service provider with a DI container.
     *
     * @param   Container  $container  The DI container.
     *
     * @return  void
     *
     * @since   4.2.0
     */
    public function register(Container $container)
    {
        $container-&gt;set(
            PluginInterface::class,
            function (Container $container) {
                $config  = (array) PluginHelper::getPlugin('system', 'example');
                $subject = $container-&gt;get(DispatcherInterface::class);

                return new Example($subject, $config);
            }
        );
    }
};</programlisting>

      <para>As you can see the service provider returns an <link
      xlink:href="https://www.php.net/manual/en/language.oop5.anonymous.php">anonymous
      PHP class</link> which implements the
      <code>Joomla\DI\ServiceProviderInterface</code>. That's the standard way
      to extend Joomla's DIC. Joomla creates a <emphasis>copy</emphasis> of
      its DIC and uses it as our plugin's own DIC. The service providers we
      set up in our plugin stay with our plugin, they do not leak out to the
      global application scope (the global Joomla DIC you get through the
      <code>Joomla\CMS\Factory::getContainer()</code> static method).</para>

      <para>The code in the anonymous function does the bare minimum of
      setting up a plugin. If you need to register custom service providers
      for your plugin do it before this code.</para>

      <para>The return line creates the plugin object from the plugin's class.
      If you need to push services into your plugin's object instance you will
      have to replace that line with something like this:</para>

      <programlisting language="php">$plugin = Example($subject, $config);
$plugin-&gt;setMyCustomService($container-&gt;get(MyCustomService::class));

return $plugin;</programlisting>
    </section>

    <section xml:id="plg-extension">
      <title>Extension class (plugin)</title>

      <para>The plugin class has not changed in any significant manner apart
      from the fact that it can now be namespaced and have any name you please
      as we learned in the previous two sections. It still extends from
      <classname>\Joomla\CMS\Plugin\CMSPlugin</classname> or one of its
      subclasses.</para>

      <para>The biggest difference is that since Joomla 4.0 <link
      linkend="plg-forms-j4-listener-types">you can implement the
      <classname>\Joomla\Event\SubscriberInterface</classname></link> in your
      plugin class to handle modern events instead of registering plugin event
      callbacks, as we already discussed.</para>

      <para>The other big change starting with Joomla 4.2 is that you no
      longer need to declare an <code>$app</code> property to magically get
      access to the Joomla application object or a <code>$db</code> property
      to magically get access ot the database driver object. Instead, you need
      to set up these features through your service provider.</para>

      <note>
        <para>While you can still use the two properties, doing so will
        trigger a PHP deprecated notice. Unfortunately, if you want to support
        earlier Joomla versions (e.g. 3.x, 4.0 and 4.1) this is all you can
        do.</para>
      </note>

      <bridgehead>Accessing the Joomla application object</bridgehead>

      <para>Modify your provider's return line to read something like the
      following:</para>

      <programlisting language="php">// Create the plugin
$plugin = Example($subject, $config);
// Push the application object
$plugin-&gt;setApplication(\Joomla\CMS\Factory::getApplication());

return $plugin;</programlisting>

      <para>In your plugin's code you can now get the Joomla application
      object by doing</para>

      <programlisting language="php">$app = $this-&gt;getApplication();</programlisting>

      <bridgehead>Accessing the Joomla database driver object</bridgehead>

      <para>Accessing the Joomla database driver object is
      <emphasis>slightly</emphasis> more complicated.</para>

      <para>First of all, your plugin class must have the
      <classname>\Joomla\Database\DatabaseAwareInterface</classname> in its
      implements list and use the
      <classname>\Joomla\Database\DatabaseAwareTrait</classname>. For
      example:</para>

      <programlisting language="php">class Example extends \Joomla\CMS\Plugin\CMSPlugin
      implements \Joomla\Database\DatabaseAwareInterface
{
  use \Joomla\Database\DatabaseAwareTrait;

  // The rest of the plugin class goes here.
}</programlisting>

      <para>Your service provider must have the following line before the
      <code>return $plugin;</code> line:</para>

      <programlisting language="php">$plugin-&gt;setDatabase($container-&gt;get('DatabaseDriver'));</programlisting>

      <para>Inside your plugin's class you can now access the database driver
      object like this:</para>

      <programlisting language="php">$db = $this-&gt;getDatabase();</programlisting>
    </section>

    <section xml:id="plg-lang">
      <title>Language files</title>

      <para>The Joomla language files have not really changed much since
      Joomla 1.0. Joomla is using the <link
      xlink:href="https://en.wikipedia.org/wiki/INI_file">INI format</link>
      with a few twists:</para>

      <itemizedlist>
        <listitem>
          <para>The keys must always be in UPPERCASE. You cannot have keys in
          lowercase or MixedCase.</para>
        </listitem>

        <listitem>
          <para>The values to the right of the equals sign must be enclosed in
          double quotes (<code>"</code>).</para>
        </listitem>

        <listitem>
          <para>If you want to use double quotes inside your values you need
          to escape them as <code>\"</code>.</para>
        </listitem>

        <listitem>
          <para>Some language strings are used in JavaScript code using a
          legacy method. They do not support escaped double quotes. Use single
          quotes (<code>'</code>) instead, even for HTML attributes (yes, HTML
          allows you to do things like <code>&lt;a
          href='https://www.example.com'&gt;example&lt;/a&gt;</code> even
          though attribute values <emphasis>should</emphasis> use double
          quotes for compatibility with XHTML). If you want to put quotes
          around human-readable text you can also use calligraphic quotes:
          <code>“ ” ‘ ’</code> and so on.</para>
        </listitem>

        <listitem>
          <para>You can comment a line by putting a semicolon (<code>;</code>)
          as its first character. Do not put semicolons at the end of strings,
          they might be parsed as part of the value.</para>
        </listitem>
      </itemizedlist>

      <bridgehead>No more language tags in filenames</bridgehead>

      <para>There is a pretty big change for language file
      <emphasis>naming</emphasis> in Joomla 4 and beyond: <emphasis
      role="bold">you must not use the language prefix</emphasis>.</para>

      <para>In Joomla 1.5 to 3.10 inclusive language files were named like
      <filename>en-GB.plg_system_example.ini</filename> (British English),
      <filename>de-DE.plg_system_example.ini</filename> (German, Germany) and
      <filename>de-AT.plg_system_example.ini</filename> (German,
      Austria).</para>

      <para>However, that naming was highly redundant as starting with Joomla
      1.6 in 2010 the language files had to be placed in a folder whose name
      was the language tag itself! Inside a language folder you'd have the
      relative filepaths
      <filename>en-GB/en-GB.plg_system_example.ini</filename>,
      <filename>de-DE/de-DE.plg_system_example.ini</filename> and
      <filename>de-AT/de-AT.plg_system_example.ini</filename>. Having the same
      language tag appear twice in a pathname didn't make sense. Therefore in
      Joomla 4 and beyond we no longer use the language tag prefix!</para>

      <para>The files are now simply named similar to
      <filename>plg_system_example.ini</filename>. The language of the file is
      inferred from the folder name it's in. For example, the filepath
      <filename>en-GB/plg_system_example.ini</filename> obviously refers to
      British English.</para>

      <bridgehead>Plugin language files</bridgehead>

      <para>A plugin has multiple different language files. The base name of
      all files is the name of the Joomla component extension, e.g.
      <code>plg_system_example</code>(the two latter parts separated by
      underscores is the plugin type a.k.a. folder and the plugin name, in all
      lowercase):</para>

      <itemizedlist>
        <listitem>
          <para><filename>plg_system_example.sys.ini</filename> — System
          language file. Required. It only needs the two language keys for the
          plugin name and its XML manifest file's description. Used during
          installation.</para>
        </listitem>

        <listitem>
          <para><filename>plg_system_example.ini</filename> — Language file.
          Required. Has the language keys for all of the plugin's options.
          Also needs the two language keys for the plugin name and its XML
          manifest file's description. It can also contain any language
          strings you are using during the execution of your plugin.</para>
        </listitem>
      </itemizedlist>

      <para>Plugin language files are placed in the <emphasis
      role="bold">administrator</emphasis> application's
      <filename>language</filename> subdirectory — even for plugins which ONLY
      run in the frontend of the site! For example, the language files for
      British English are placed in
      <filename>administrator/language/en-GB</filename>. Moreover, Joomla will
      fall back to the language subdirectory under your plugin. For example,
      the language files for British English are also sought for in
      <filename>plugins/system/example/language/en-GB</filename>. If files
      exist in both locations then <emphasis>only</emphasis> the one in the
      application's directory will be loaded.</para>

      <bridgehead>Language file autoloading</bridgehead>

      <para>Unlike previous versions of Joomla, you do NOT have to load your
      language files manually. Joomla loads your plugin's language files
      automatically.</para>

      <para>All you need to do is set the protected property
      <property>autoloadLanguage</property> to <code>true</code> in your
      constructor:</para>

      <programlisting language="php">public function __construct(&amp;$subject, $config = array())
{
    $this-&gt;autoloadLanguage = true;

    parent::__construct($subject, $config);
}</programlisting>

      <important>
        <para>The parent constructor method must be called AFTER setting the
        property. Otherwise your language files will not be loaded.</para>
      </important>

      <para>If you prefer to load the language files of your plugin only when
      they are absolutely needed you just need to call:</para>

      <programlisting language="php">$this-&gt;loadLanguage();</programlisting>

      <para>Since Joomla 3.3 (based on my recollection, +/- 1 minor version…)
      Joomla will load language files in this order:</para>

      <itemizedlist>
        <listitem>
          <para>(Only if Debug Language is disabled). The language file for
          the site's default language (<code>en-GB</code>, unless a third
          party extension has changed it).</para>
        </listitem>

        <listitem>
          <para>The currently active language's normative INI file (e.g.
          <code>plg_system_example.ini</code>) or legacy INI file (e.g.
          <code>en-GB.plg_system_example.ini</code>).</para>
        </listitem>
      </itemizedlist>

      <para>Joomla will first look in the <emphasis
      role="bold">administrator</emphasis> application's language folder i.e.
      <filename>administrator/language</filename> . This applied even if you
      are in the frontend of the site, the API application or the CLI
      application.</para>

      <para>If neither the current language's, nor the default language's
      files have been found Joomla will fall back to your plugin's
      <filename>language</filename> directory. That is to say, your plugin's
      language directory is a last resort and not guaranteed to be
      used!</para>

      <para>You may wonder: why does Joomla load both the default language
      (British English in most cases) <emphasis>and</emphasis> my current
      language (e.g. Canadian French) files? The reason is simple. All plugins
      are required to provide a complete language file for the default
      language which for Joomla is British English (<code>en-GB</code>).
      Translation to other languages are optional and often incomplete.
      Sometime around 2012 we decided that it makes far more sense to show an
      English, human-readable string to non-English speakers they can look up
      in the dictionary or their favorite translation tool than an
      incomprehensible language key like
      <code>PLG_SYSTEM_EXAMPLE_CONFIG_EARLY_PREP_ARRAY_LABEL</code>. Of course
      this makes it harder for translators. That's why the Debug Language
      feature was simultaneously introduced. When enabled, the default
      language is not enabled and untranslated strings are marked clearly in
      the output.</para>

      <bridgehead>Defining language files in your XML manifest</bridgehead>

      <para>Your XML manifest needs one set of <tag>&lt;languages&gt;</tag>
      tags under the <tag>&lt;extension&gt;</tag> root:</para>

      <programlisting language="xml">&lt;extension&gt;
  &lt;!-- … --&gt;
  &lt;languages folder="language"&gt;
    &lt;language tag="en-GB"&gt;en-GB/plg_system_example.ini&lt;/language&gt;
    &lt;language tag="en-GB"&gt;en-GB/plg_system_example.sys.ini&lt;/language&gt;
    &lt;language tag="de-DE"&gt;de-DE/plg_system_example.ini&lt;/language&gt;
    &lt;language tag="de-DE"&gt;de-DE/plg_system_example.sys.ini&lt;/language&gt;
  &lt;/languages&gt;
  &lt;!-- … --&gt;
&lt;/extension&gt;</programlisting>

      <para>This copies the files from the <filename>language/</filename>
      folder in your package to Joomla's admin language folder, e.g. the
      <filename>language/en-GB/plg_system_example.ini</filename> file in your
      package to
      <filename>administrator/language/en-GB/plg_system_example.ini</filename>
      file on your site.</para>

      <bridgehead>Language overrides</bridgehead>

      <para>Language overrides are loaded <emphasis>before</emphasis> any of
      your language files, at the initialisation of the CMSApplication object,
      namely when the Language object is constructed. They are stored in the
      file
      <filename>language/overrides/<replaceable>LANGUAGE_TAG</replaceable>.override.ini</filename>
      under the application's root (site root for the frontend,
      <filename>administrator</filename> for the backend,
      <filename>api</filename> for the API application) where
      <replaceable>LANGUAGE_TAG</replaceable> is the current language's tag,
      e.g. <code>en-GB</code> for British English.</para>

      <warning>
        <para>Overrides for the frontend and the backend of the site are
        different for plugins! Even though the plugin's language files are
        always stored in the backend (even if it runs in the frontend of the
        site), the overrides Joomla loads if the plugin is executing in the
        frontend of the site are those set for the site's frontend or marked
        as for both front- and backend.</para>

        <para>If you think about it, it makes sense. The frontend and backend
        of the site target different kinds of users. The public frontend may
        need a different worded message to address its target audience more
        effectively.</para>
      </warning>

      <para>The way it works is that your language file is loaded and then the
      <emphasis>overridden</emphasis> strings are replaced into the language
      file <emphasis>if and only if</emphasis> they are already defined in the
      language file.</para>

      <caution>
        <para>This means that the language overrides cannot be used for
        language keys not defined in your language files, unlike Joomla
        3.</para>

        <para>Since this was a widely popular “trick” to allow your users to
        customise the display of your components you now have to take that
        explicitly into account. For example, given an item with an alias
        <code>foobar</code> you might be looking for the language string
        <code>PLG_SYSTEM_EXAMPLE_ITEM_OVERRIDE_FOOBAR_TITLE</code> to override
        the title field of your item for display in different languages. This
        worked in Joomla 3 but will NOT work in Joomla 4 or later.</para>

        <para>As noted in <link linkend="com-lang">the language section for
        components</link>, you can use custom language files to work around
        this problem.</para>
      </caution>
    </section>

    <section xml:id="plg-dont-break-joomla">
      <title>How NOT to break Joomla with your plugin</title>

      <para>Plugins are fundamental part of our sites. They can do a lot of
      useful things and extend Joomla in ways the core may have not been
      designed to. For this reason plugins have a lot of power over the entire
      Joomla application. A mistake in a plugin can bring down a site or cause
      unexpected and unresolvable issues in third party components, plugins
      and modules.</para>

      <para>The root cause of these problems us typically that the plugin
      author did test their plugin, but have only done so in the very narrow
      use case they expect their plugins to be used. This is called “<link
      xlink:href="https://en.wikipedia.org/wiki/Happy_path">happy path</link>
      testing” and is almost as bad as no testing at all. When the plugin is
      used in any other context — the CLI application, non-HTML output, in
      cases where the output format may not be determined until after the
      component for the page has finished executing — it might cause
      unintended consequences, i.e. the site will break. Even worse, clients
      will start blaming the innocent parties: Joomla itself and third party
      developers whose software is written the right way and works perfectly
      fine.</para>

      <para>To best demonstrate how easy it is to make grave mistakes with too
      little code let's see a plugin class which makes <emphasis
      role="bold">four</emphasis> major mistakes in six lines of code:</para>

      <programlisting language="php">class PlgSystemFoobar extends \Joomla\CMS\Plugin\CMSPlugin
{
  public function __construct(&amp;$subject, $config)
  {
    parent::__construct($subject, $config);

    if (\Joomla\CMS\Factory::getApplication()-&gt;isClient('administrator')) return;

    $document = \Joomla\CMS\Factory::getDocument();
    $document-&gt;addScript(\Joomla\CMS\Uri\Uri::root(true) . 'plugins/system/foobar/js/foobar.js');
  }
}</programlisting>

      <para>This looks like a deceptively simple system plugin. It adds a
      JavaScript file to every page load in the frontend. Right?</para>

      <para>Well, that is its intention but not what it actually does. It also
      breaks Joomla 4's CLI and API applications, it breaks pages with
      non-HTML output, it forbids components from using non-HTML output and
      tries to load the JavaScript file from the wrong place.</para>

      <bridgehead>Do not execute plugin logic in the plugin
      constructor</bridgehead>

      <para>Let's think about Joomla's lifetime. In broad terms, the request
      ends up getting handled by Joomla's <filename>index.php</filename> file.
      This spins up the Joomla! application, e.g.
      <code>\Joomla\CMS\Application\SiteApplication</code> for the frontend.
      The main entry point for the application object is the
      <code>doExecute</code> method. This method does a lot of initialisation
      before routing and dispatching the application, meaning that this
      initialisation takes place before Joomla has parsed SEF URLs or created
      a document object. In fact, Joomla will load all enabled <emphasis
      role="bold">system</emphasis> plugins before Joomla has figured out any
      basic facts about itself.</para>

      <para>The developer of this plugin put their business logic in the
      constructor of the plugin which is executed at this early stage of the
      Joomla application initialisation. While
      <methodname>isClient()</methodname> will work, the rest of the code
      which tries to get the document object will break the site.</para>

      <para>The plugin erroneously goes through the
      <methodname>\Joomla\CMS\Factory::getDocument()</methodname> method to
      get the document. This is deprecated in Joomla 4. You are supposed to
      use the <methodname>getDocument()</methodname> method of the application
      object. Had the developer done that they'd have seen that they are
      getting null because the document has not been created yet.</para>

      <para>In fact, all this code should be moved from the plugin object
      constructor to the <code>onAfterDispatch</code> method to work
      correctly.</para>

      <bridgehead>Do not go through the
      <classname>\Joomla\CMS\Factory</classname></bridgehead>

      <para>The second problem with this plugin is the exact reason why the
      Factory's <methodname>getDocument()</methodname> method is
      deprecated.</para>

      <para>Calling the factory's <methodname>getDocument()</methodname>
      method will forcibly create a document object which will then be used by
      the application object. The document object is created based on the
      information in the request. However, as you might recall, at this point
      Joomla has not yet parsed the SEF route! This would also be true if this
      code was moved in the <code>onAfterInitialise</code> event, the earliest
      system plugin event triggered by Joomla.</para>

      <para>Since the SEF URL has not been parsed Joomla cannot reliably know
      the type of document to use. Think for example about a URL like
      <uri>https://www.example.com/foobar.json</uri> which when gone through
      the SEF URL router will, among other things, set <uri>format=json</uri>
      in the request. This means that this request expects Joomla to create a
      <classname>\Joomla\CMS\Document\JsonDocument</classname> document
      object.</para>

      <para>However, since <uri>format=json</uri> has not been set yet, Joomla
      will assume <uri>format=html</uri> when you call
      <methodname>getDocument()</methodname>. Therefore, it will create a
      <classname>\Joomla\CMS\Document\HtmlDocument</classname> document object
      which will be used by the application object as well. This will of
      course break the component which is handling the request as it
      (correctly) expect a JSONDocument and it instead gets an HTMLDocument. I
      think we can all agree that the plugin's author is at fault for this
      mess.</para>

      <para>You should only ever call <emphasis role="bold">two
      methods</emphasis> of the <classname>\Joomla\CMS\Factory</classname> in
      Joomla 4:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>getContainer()</methodname>. This returns Joomla's
          Dependency Injection container (DI Container, sometimes abbreviated
          as DIC). If possible, you should avoid using it directly, instead
          pushing dependencies through the service provider of your
          extension.</para>
        </listitem>

        <listitem>
          <para><methodname>getApplication()</methodname>. This returns the
          current Joomla application object handling the request. If possible,
          your extension should be passed the application object from its
          service provider instead of getting the object through the factory
          in your extension's code. The service provider will still have to go
          through the factory as there is not yet a single container resource
          which returns the currently active application (but this might
          change in Joomla 5.0 and will almost definitely change by Joomla
          6.0).</para>
        </listitem>
      </itemizedlist>

      <para>To get the application's document you should do
      <code>\Joomla\CMS\Factory::getApplication()-&gt;getDocument();</code>.</para>

      <bridgehead>There is more to Joomla than HTML output</bridgehead>

      <para>This is an absurdly common mistake. Developers seem to assume that
      Joomla will only ever generate HTML output. This is an unreasonable
      assumption since Joomla 1.0 was released in 2005 — not to mention that
      it was not a reasonable assumption in Mambo, Joomla's predecessor,
      either. Joomla is perfectly capable of generating non-HTML output such
      as XML, JSON, RSS feeds, Atom feeds, raw binary output (e.g. images) and
      so on and so forth. If there was ever a question as to whether this is
      possible, changes made early in the Joomla 3.x releases introducing new
      core document and view classes should have driven that point
      home.</para>

      <para>The developer of this plugin made the
      <emphasis>unreasonable</emphasis> assumption that their
      <varname>$document</varname> will always contain an
      <classname>HTMLDocument</classname>.</para>

      <para>A URL like
      <uri>https://www.example.com/index.php?option=com_whatever&amp;format=json</uri>
      — despite the two problems already mentioned above — would still
      populate <varname>$document</varname> with a
      <classname>JSONDocument</classname> object. However,
      <classname>JSONDocument</classname> does not have an
      <methodname>addScript</methodname> method. Therefore this plugin causes
      a PHP fatal error right away. Whoops!</para>

      <para>The correct way to do that is called “feature detection”:</para>

      <programlisting language="php">$document = \Joomla\CMS\Factory::getApplication()-&gt;getDocument();

if (!($document instanceof \Joomla\CMS\Document\HtmlDocument))
{
  return;
}</programlisting>

      <para>If the document returned by our application is not an
      <classname>HTMLDocument</classname> we do not try to do anything else.
      Simple, isn't it?</para>

      <bridgehead>There is more to Joomla than the frontend and
      backend</bridgehead>

      <para>Now let's get to the biggest bug of them all: assuming that Joomla
      consists entirely of the frontend (site) and backend (administrator)
      application. This has not been true since Joomla 1.6, released in
      <emphasis>2010</emphasis>. When I first wrote this section in 2022 it
      was already <emphasis>12 years</emphasis> this assumption has been wrong
      and I would still see plugins making it and breaking Joomla
      sites.</para>

      <para>Not to put too fine a point on this, this line is completely
      wrong:</para>

      <programlisting language="php">if (\Joomla\CMS\Factory::getApplication()-&gt;isClient('administrator')) return;
</programlisting>

      <para>Clearly, the developer wanted their code to mean “if this is not
      the frontend of the site don't do anything”. Instead, what they actually
      wrote is “if this is the backend of the site — therefore this is the
      frontend of the site <emphasis>or the api application, or the console
      application, or any custom application which extends from Joomla's
      <classname>WebApplication</classname> class</emphasis> — don't do
      anything”. Whoops!</para>

      <para>As we have already mentioned, Joomla 4 has a number of
      applications shipped with it:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">installation</emphasis>. This is the web
          installer when you build a new site. Third party code, like our
          counterexample system plugin, does not load in it and does not
          concern third party developers. It lives in the
          <filename>installation</filename> folder of your site. It's been
          around since Joomla 1.0.</para>

          <note>
            <para>If an <filename>installation</filename> folder is present
            Joomla will redirect to it if you try to access any of its other
            web-based applications. This happens very early in the
            <filename>includes/framework.php</filename> file which is one of
            the first things loaded by <filename>includes/app.php</filename>,
            after loading <filename>includes/defines.php</filename> and making
            sure the <filename>libraries/vendor</filename> folder
            exists.</para>

            <para>This automatic redirection does not happen when
            <constant>\Joomla\CMS\Version::DEV_STATUS</constant> is anything
            other than <parameter>stable</parameter>, i.e. in
            <parameter>alpha</parameter>, <parameter>beta</parameter>,
            <parameter>rc</parameter> (Release candidate) releases and
            <parameter>dev</parameter> (development) builds from the Joomla
            Git repository sources.</para>
          </note>
        </listitem>

        <listitem>
          <para><emphasis role="bold">site</emphasis>. The frontend of the
          site, accessed through the <filename>index.php</filename> file in
          your site's root. It's been around since Joomla 1.0.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">administrator</emphasis>. The backend of
          the site, accessed through
          <filename>administrator/index.php</filename>. It lives in the
          <filename>administrator</filename> folder of your site. It's been
          around since Joomla 1.0.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">api</emphasis>. The JSON API
          application, accessed through <filename>api/index.php</filename>. It
          lives in the <filename>api</filename> folder of your Joomla site.
          Introduced in Joomla 4.0.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">cli</emphasis>. The
          <filename>cli/joomla.php</filename> command line application.
          Introduced in Joomla 4.0.</para>
        </listitem>
      </itemizedlist>

      <para>Further to that, applications other than site and administrator
      have existing since Joomla 1.5.</para>

      <para>From Joomla 1.5 onwards it's been possible to create your own
      custom application by extending <classname>JApplicationWeb</classname>.
      These custom application do load system plugins by default. They were
      used to create custom entry points for callbacks, e.g. in payment
      plugins for e-commerce components. They are no longer used as the reason
      for their existence has been made a moot point since the advent of
      <code>com_ajax</code> in Joomla 2.5.</para>

      <para>From Joomla 1.6 and up until Joomla 5.4 it's possible for
      developers to create custom CLI applications by extending
      <classname>JApplicationCli</classname>. These applications do not load
      system plugins by default so they are unlikely to have broken. Unlikely
      does not mean impossible, though; it's possible that a CLI application
      may have a need to load plugins such as <filename>system</filename>,
      <filename>content</filename>, <filename>privacy</filename> etc.</para>

      <para>This is why despite the fact that this has been an issue since the
      dawn of Joomla 1.5 in 2007 plugin developers may have not bumped into
      this until Joomla 4 was released.</para>

      <para>The correct way to do this is, of course, to check explicitly for
      the application you want to run under:</para>

      <programlisting language="php">if (!\Joomla\CMS\Factory::getApplication()-&gt;isClient('<emphasis
          role="bold">site</emphasis>')) return;</programlisting>

      <bridgehead>Do not load static resources directly and/or from your
      plugin's folder</bridgehead>

      <para>This is a bonus round and not a bug which will break sites
      <emphasis>today</emphasis>, but it will break sites come Joomla 6.0 and
      a mild security concern. It also reminds us that plugins, like all other
      Joomla extension types, should be <link
      linkend="concepts-webassetmanager">using the
      WebAssetManager</link>.</para>

      <para>The developer of the extension chose to load their static
      JavaScript file using the deprecated
      <methodname>addScript()</methodname> method of the document and located
      the file in the plugin's folder structure. This is a two in one
      issue.</para>

      <para>First of all, ever since Joomla 1.5 (released in 2007 —
      <emphasis>15 years</emphasis> before I first wrote this section in 2022)
      Joomla introduced the <filename>media</filename> folder where extensions
      are expected to place all publicly available static files, be they
      static files shipped with the extension or user-generated content
      managed outside Joomla's Media Manager.</para>

      <para>The developer of the plugin should have placed their JavaScript
      file in the <filename>media/plg_system_foobar/js</filename> folder using
      the following section in their plugin's XML manifest:</para>

      <programlisting language="xml">&lt;media folder="media" destination="plg_system_foobar"&gt;
    &lt;folder&gt;js&lt;/folder&gt;
    &lt;file&gt;joomla.asset.json&lt;/file&gt;
&lt;/media&gt;</programlisting>

      <para>(We'll see what the joomla.asset.json file is in a moment)</para>

      <para>It is a bad security practice mixing executable backend code
      (<filename>.php</filename> files) with frontend executable code
      (<filename>.js</filename>, <filename>.es6</filename> etc) files and
      static media files (CSS, images, videos, ...).</para>

      <para>Joomla is moving towards placing all frontend (web browser)
      accessible stuff into the media folder — even for templates, as of
      Joomla 4.1 — and will most likely start applying security controls to
      prevent web access to the plugin, component, module etc folders.
      <emphasis role="bold">You have been warned</emphasis>. In fact, you were
      being warned since 2007 but nobody was listening, so let's see how many
      developers will come screaming bloody murder when these access controls
      are enforced about <emphasis>20 years</emphasis> after the preferred
      alternative was introduced in Joomla 1.5.0. Ahem. forgive me, I
      digressed.</para>

      <para>The next issue is that HTMLDocument's
      <methodname>addScript()</methodname> method has been deprecated. Joomla
      4 has moved into using asset dependencies and a <link
      linkend="concepts-webassetmanager">Web Asset Manager</link> to, well,
      manage the asset dependencies.</para>

      <para>Assets and their dependencies are declared in the
      <filename>joomla.asset.json</filename> file located in the extension's
      subdirectory under the <filename>media</filename> directory. So, the
      developer should have shipped a file
      <filename>media/plg_system_foobar/joomla.asset.json</filename> with the
      following contents:</para>

      <programlisting language="json">{
  "$schema": "https://developer.joomla.org/schemas/json-schema/web_assets.json",
  "name": "plg_system_foobar",
  "version": "1.0.0",
  "description": "Foobar plugin",
  "license": "GPL-3.0-or-later",
  "assets": [
    {
      "name": "plg_system_foobar.foobar",
      "description": "Foobar JavaScript",
      "type": "script",
      "uri": "plg_system_foobar/foobar.js",
      "dependencies": [
        "core"
      ],
      "attributes": {
        "defer": true
      }
    }
  ]
}</programlisting>

      <para>This allows the developer to tell Joomla to add their script using
      this very simple piece of code:</para>

      <programlisting language="php">$document-&gt;getWebAssetManager()-&gt;useScript('plg_system_foobar.foobar');
</programlisting>

      <para>Here's the kicker. <emphasis>This is safe even if you don't check
      the Document object type</emphasis>. Yeah, if
      <varname>$document</varname> is a <classname>JSONDocument</classname>
      which does not have a concept of web assets this code would still work.
      Joomla defines the Web Asset Manager for all document types, even those
      which can't possibly use it. It's the page renderer which will make use
      of the dependencies, if they are supported. I know, right?! It's
      actually an amazingly good feature! That said, it's still a good idea to
      check the document type the way I've told you to avoid doing pointless
      work, or introducing future bugs.</para>

      <bridgehead>Putting it all together</bridgehead>

      <para>Let's put everything we learned together. The tiny plugin barely
      grew by a couple of lines and it no longer breaks the sites it is
      installed in. The changes are in bold type:</para>

      <programlisting language="php">class PlgSystemFoobar extends \Joomla\CMS\Plugin\CMSPlugin
{
  public function <emphasis role="bold">onAfterDispatch</emphasis>()
   {
      if (!\Joomla\CMS\Factory::getApplication()-&gt;isClient('<emphasis
          role="bold">site</emphasis>')) return;

      $document = \Joomla\CMS\Factory<emphasis role="bold">::getApplication()-&gt;getDocument();</emphasis>

      <emphasis role="bold">if (!($document instanceof \Joomla\CMS\Document\HtmlDocument))
      {
         return;
      }

      $document-&gt;getWebAssetManager()-&gt;useScript('plg_system_foobar.foobar');</emphasis>
   }
}</programlisting>

      <para>It's still short. It's still readable. It's (mostly) future-proof
      — well, it's still using the legacy plugin structure but I was trying to
      draw your attention to the problems, not divert your attention to the
      plumbing covered in previous sections of this book.</para>
    </section>

    <section xml:id="plg-concrete-events">
      <title>Generic versus Concrete events</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="mod">
    <title>Modules</title>

    <para/>

    <section xml:id="mod-legacy-vs-j4">
      <title>Legacy vs Joomla 4 modules</title>

      <para/>

      <section xml:id="mod-legacy">
        <title>Legacy modules (Joomla 1.x to 3.x)</title>

        <para/>
      </section>

      <section xml:id="mod-j4">
        <title>Joomla 4 modules</title>

        <para/>
      </section>
    </section>

    <section xml:id="mod-services">
      <title>Service Locator</title>

      <para/>
    </section>

    <section xml:id="mod-extension">
      <title>Extension class</title>

      <para/>
    </section>

    <section xml:id="mod-lang">
      <title>Language files</title>

      <para/>
    </section>

    <section xml:id="mod-helper">
      <title>The Helper</title>

      <para/>
    </section>

    <section xml:id="mod-view-templates">
      <title>View templates</title>

      <para/>
    </section>

    <section xml:id="mod-interfacing-com">
      <title>Interfacing with your component</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="tpl">
    <title>Templates</title>

    <para/>

    <section xml:id="tpl-j4-changes">
      <title>Major changes in Joomla 4</title>

      <para/>
    </section>

    <section xml:id="tpl-subtemplates">
      <title>Sub-templates</title>

      <para/>
    </section>

    <section xml:id="tpl-errorpages">
      <title>Error pages</title>

      <para/>
    </section>

    <section xml:id="tpl-custom-cassiopeia">
      <title>Using Cassiopeia to create a custom template</title>

      <para/>
    </section>

    <section xml:id="tpl-custom-from-scratch">
      <title>Custom template from scratch</title>

      <para/>
    </section>

    <section xml:id="tpl-fields">
      <title>Custom fields in your templates</title>

      <para/>
    </section>

    <section xml:id="tpl-category-content-templates">
      <title>Per-category view templates in com_content</title>

      <para/>
    </section>

    <section xml:id="tpl-migration">
      <title>Migration strategy</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="advice">
    <title>General advice and code magic</title>

    <para>There are a few concepts which apply universally to all Joomla
    extension types but don't quite fit in a category of their own. There are
    also more generic tips about what to do and what not to do when writing
    software. In this chapter we will explore some of those things.</para>

    <section xml:id="advice-write-code-dont-suck">
      <title>Write code which doesn't suck</title>

      <para>Having audited several dozens of sites with hundreds of extensions
      I have seen the same old problems appearing in the code of extension
      after extension. Not only they are security incidents waiting to happen,
      they also make migrating your code to newer Joomla versions harder and
      break your extension in said Joomla versions.</para>

      <section xml:id="advice-dont-suck-hardcoded-queries">
        <title>DON'T: Hard-coded database queries</title>

        <para>I have seen bad code like this:</para>

        <programlisting language="php">$query = 'SELECT `something` FROM `#__whatever` WHERE `id` = ' . $db-&gt;quote($id);</programlisting>

        <para>It's even worse with there is no <code>$db-&gt;quote</code> at
        all because that ensures it's a SQL injection waiting to
        happen.</para>

        <para>Having a hard-coded database query is really bad because you are
        making an assumption the site runs under MySQL and that the escape
        character is the backtick. This is not a guarantee. Moreover, are you
        absolutely sure that you have not missed an escape in a long SQL
        query? Would you bet your and your clients' sites' security, as well
        as the possibility of massive fines due to GDPR if you have failed
        miserably, on your ability to not miss anything?</para>

        <para>Let's get real. Joomla has offered a database query builders
        since version 1.6 (released in 2010) and improved it in Joomla
        4.</para>

        <para>Here's the simplest way to write the above code:</para>

        <programlisting language="php">$query = $db-&gt;getQuery(true)
  -&gt;select($db-&gt;quoteName('something'))
  -&gt;from($db-&gt;quoteName('#__whatever'))
  -&gt;where($db-&gt;quoteName('id') . ' = ' . $db-&gt;quote($id));</programlisting>

        <para>This is still not a very good approach because <code>$id</code>
        may look like a numeric string but actually be a hidden SQL Injection.
        Therefore a better way to write this query is using prepared
        statements which send the raw value of $id to the server and tell it
        what data type it is (boolean, null, blob, string or integer). The
        value is not interpolated into the query itself, making it perfectly
        safe against SQL injection attacks.</para>

        <programlisting language="php">$query = $db-&gt;getQuery(true)
  -&gt;select($db-&gt;quoteName('something'))
  -&gt;from($db-&gt;quoteName('#__whatever'))
  -&gt;where($db-&gt;quoteName('id') . ' = :id')
  -&gt;bind(':id', $id, \Joomla\Database\ParameterType::INTEGER);</programlisting>

        <note>
          <para>Prepared statements are only meant to be used when you have
          data coming from a variable. If you have hard-coded data you can
          still interpolate them after passing them through
          <code>$db-&gt;quote()</code>.</para>

          <para>Also note that any data —even data coming from another query
          which ostensibly only includes “safe”, hard-coded data you have
          inserted yourself in the database— MUST go through prepared
          statements. Anything which is not hard-coded in the code currently
          executing must be assumed to be potentially dangerous. Even data you
          inserted in the database and the user cannot modify through the
          interface <emphasis>can</emphasis> be modified by a malicious actor,
          e.g. using a SQL injection vulnerability in another
          extension.</para>

          <para><emphasis role="bold">TRUST NO-ONE, NOT EVEN
          YOURSELF.</emphasis></para>

          <para>That's the motto of the security conscious developer.</para>
        </note>
      </section>

      <section xml:id="advice-dont-suck-superglobals">
        <title>DON'T: Using superglobalg ($_REQUEST, $_SERVER, $_GET, $_POST
        etc)</title>

        <para>Another very common problem I have seen in Joomla extensions is
        developers doing something like this:</para>

        <programlisting language="php">$something = $_REQUEST['something'];
// or, worse, this
$whatever = $_SERVER['WHATEVER'];</programlisting>

        <para><emphasis role="bold">DO NOT DO THAT. THIS IS A SECURITY
        ISSUE.</emphasis> There are very few cases where an extension needs
        access to the raw PHP superglobals, namely if you are writing a
        security extension and you need to check whether there's potentially
        malicious data in the request before Joomla sanitizes it. If you are
        one of the five or so people in the Joomla world writing this kind of
        software you are unlikely to be reading this. If you are about to say
        that you have a different, legitimate use case: you do NOT; you just
        don't know how to use Joomla's input class. Sorry.</para>

        <para>Joomla already provides an Input class which can return the
        <emphasis>filtered and sanitised</emphasis> values of a request or
        environment parameter. Moreover, it allows other parts of your code
        and plugins to modify or override the input parameters.</para>

        <para>The correct way to get something would be something like
        this:</para>

        <programlisting language="php">$something = \Joomla\CMS\Factory::getApplication()-&gt;input-&gt;request-&gt;getCmd('something', 'default');</programlisting>

        <para>If the object you are working with has its own input property
        use that instead of the global input object shown above. Dispatchers
        and Controllers do have their own input object which can of course be
        overridden during instantiation.</para>

        <para>If the object you are working with has its own property which
        gives you access to the application use that instead of going through
        the CMS Factory. This makes your code reusable and testable across
        applications.</para>

        <para>Do NOT get input variables from your Model or View classes. Your
        Controller should be the only point where you use the input object to
        retrieve input parameters. You can pass these values to your model by
        setting its <emphasis>state</emphasis>. Likewise, your view should
        only ever read the model's state, not the input directly. This makes
        your code reusable and testable. It also lets you make changes in the
        naming of your input parameters only making a change in your
        controller (and possibly your dispatcher) instead of trying to hunt
        down random uses spread throughout your code. It also makes you think
        about the data flow in your application which makes it infinitely
        easier to debug it.</para>

        <para>You should not use the entire request superglobal (e.g.
        <code>$this-&gt;input-&gt;getCmd('something')</code> or
        <code>$this-&gt;input-&gt;request-&gt;getCmd('something')</code>) if
        you know that a specific piece of data can only come as GET or POST
        data. Instead, be specific, e.g.
        <code>$this-&gt;input-&gt;get-&gt;getCmd('something')</code> for GET
        data and <code>$this-&gt;input-&gt;post-&gt;getCmd('something')</code>
        for POST data. This prevents <emphasis>input shading</emphasis>. If
        the same input is present in $_GET, $_POST, $_ENV, $_COOKIE and
        $_SERVER you will only get one value in the request. Which one? It
        depends on the PHP configuration (<code>request_order</code> and
        <code>variables_order</code> configuration keys). While on
        <emphasis>most</emphasis> servers it's GP (Get and Post, i.e. POST
        data overrides GET data) it could actually be anything with
        unpredictable consequences for your extension. For example, some
        servers may stupidly include cookies in request_order, thereby
        allowing a hacker to set a cookie on a victim's browser to make your
        extension do something other than the user's reasonable expectation,
        e.g. delete or modify a different record than what they were trying to
        delete / edit.</para>

        <para>Do not assume that the data you get from the input object is of
        a specific scalar type. For example,
        <code>$this-&gt;input-&gt;getInt('something')</code> may return an
        integer, null (the default value) or <emphasis>an array of
        integers</emphasis>. The latter is something that you are unlikely to
        have come across but that's the way the <code>get()</code> method of
        Joomla's input object works. Always check the type of the data you
        receive, always assume that there is a hacker trying to inject invalid
        data trying to trip your code up, always assume that any kind of
        filtering or sanitization may fail to work the way you assume it
        works.</para>

        <para>If you want to access the $_SERVER and $_ENV superglobals;
        don't. Instead go through <code>$this-&gt;input-&gt;server</code> and
        <code>$this-&gt;input-&gt;env</code>. For example, if I want to get
        the contents of the HTTP header X-Foo-Bar I should do
        <code>$this-&gt;input-&gt;server-&gt;getString('HTTP_X_FOO_BAR');</code>.</para>

        <para>Remember that Joomla can and will apply its text filters when
        you use <code>getString</code>. If you want to get the raw data use
        <methodname>getRaw</methodname> or <methodname>getArray</methodname> —
        neither method applies any filtering.</para>

        <para>Even though you can access the $_FILES superglobal with the
        input object — <emphasis role="bold">DO NOT DO THAT</emphasis>! You
        should never handle file uploads directly in your code. Always go
        through Joomla's
        <methodname>\Joomla\CMS\Filesystem\File::upload()</methodname> method.
        Do remember that, by default, it will try to prevent unsafe files from
        being uploaded. If you have a VERY good reason to allow “unsafe” files
        (e.g. you expect that a ZIP file containing PHP files will be used
        with your extension) and have taken responsible measures to prevent
        security issues you can of course set its <code>$allowUnsafe</code>
        parameter to <code>true</code>. If you need your extension to allow
        uploading of files with extensions or MIME types which are not media
        you can of course use custom file upload configuration in your own
        extension. This means that the excuse you may have had for using
        $_FILES directly is completely invalid so please don't let me see you
        ever accessing superglobals again.</para>
      </section>

      <section xml:id="advice-dont-suck-remote-addr">
        <title>DON'T: Using REMOTE_ADDR to get the user's IP</title>

        <para>It is very common for extensions to need access to the user's IP
        address. I see extensions doing silly things like this:</para>

        <programlisting language="php">$ip = $_SERVER['REMOTE_ADDR'];
$ip = $this-&gt;input-&gt;server-&gt;get('REMOTE_ADDR');</programlisting>

        <para><emphasis role="bold">DO NOT DO THAT; THIS IS WRONG ON MANY
        LEVELS!</emphasis></para>

        <para>The first line tries to access the $_SERVER superglobal which,
        as mentioned in the previous section, is a security issue waiting to
        happen.</para>

        <para>Both of these lines make a wrong assumption: that the
        REMOTE_ADDR key of the server superglobal array will contain the
        user's IP address. This is not true if the server is behind a load
        balancer, CDN, firewall or any other kind of non-transparent proxy. In
        these cases a different HTTP header —typically X-Forwarded-For— may be
        used to convey the forwarding chain of IP addresses. However, you
        should NOT attempt to read this header yourself for two reasons. First
        of all, if the site is not behind a non-transparent proxy a malicious
        actor can send a forged X-Forwarded-For header to trick your extension
        into believing the request came from a different IP address than the
        one it actually originates. Second, this header may contain more than
        one IP addresses in a comma-separated list. Validating, sanitizing and
        parsing that list is tricky and may lead to some very bad times and
        security issues.</para>

        <para>Joomla 3.10 and later (including all 4.x releases and beyond)
        include a fork of my IPHelper class which deals with all of these
        details automatically. They also expose user-facing options in the
        Global Configuration so that the site owner can inform Joomla whether
        their site is behind a non-transparent proxy server.</para>

        <para>You can get the real IP address of the user with this:</para>

        <programlisting language="php">$ip = \Joomla\Utilities\IpHelper::getIp();</programlisting>

        <para>Even better, going through the IpHelper makes your code
        <emphasis role="bold">testable</emphasis>. Your unit tests can simply
        call:</para>

        <programlisting language="php">\Joomla\Utilities\IpHelper::setIp('1.2.3.4');</programlisting>

        <para>to set a fake IP address of your choice (IPv4 or IPv6).</para>

        <para>Finally, IpHelper has two more handy methods:
        <methodname>isIPv6</methodname> which tells you if you are dealing
        with an IPv6 address and <methodname>IPinList</methodname> which lets
        you figure out if an IP address is contained in an array which
        consists of any combination of IPv4/IPv6 addresses, IPv4 ranges (e.g.
        1.2.3.4-1.2.3.255), IPv4/IPv6 subnets in CIDR notation (e.g.
        1.2.3.4/24) or IPv4 subnets in IP/Netmask notation (e.g.
        192.168.1.0/255.255.255.0). Since many use cases for getting the
        user's IP address ultimately come down to checking if it belongs in a
        range of IP addresses or a list of allowed/blocked IP addresses you'll
        find the latter method extremely handy. I went through the pain of
        figuring out IP address maths and Joomla included my work in the core
        so you don't have to deal with it yourself!</para>
      </section>

      <section xml:id="advice-dont-suck-duplicate-libraries">
        <title>DON'T: Include duplicate copies of libraries shipped with
        Joomla itself</title>

        <para>A few weeks ago I was troubleshooting a client's Joomla 3 site
        and I noticed that there were six extensions which in total included
        four copies of TCPDF, six copies of SimplePie and four copies of
        PHPMailer. All these libraries are already shipped with Joomla
        itself.</para>

        <para>Do NOT include copies of libraries already included in Joomla
        with your software. If you absolutely have to —because you need a
        newer version than what Joomla provides— <emphasis role="bold">DO NOT
        USE THE SAME NAMESPACE AND CLASS NAMES</emphasis>. It will break
        Joomla or third party extensions when your code is loaded.</para>

        <para>In fact, even if you are including third libraries which are not
        included in Joomla you should be doing one of the following:</para>

        <itemizedlist>
          <listitem>
            <para>Do NOT load third party libraries except in a component's
            model which is never going to be used outside of your
            component.</para>
          </listitem>

          <listitem>
            <para>Change the namespace of your third party libraries using
            Rector.</para>
          </listitem>
        </itemizedlist>

        <para>The first method is not a fool-proof way to go about it. The
        third party library you are using may be included in Joomla or a
        different third party extension (worst case scenario: a system plugin
        which always loads this library) therefore causing your own code to
        break. This happened to me when I contributed the WebAuthn code to
        Joomla 4, thereby breaking my Login with Apple plugin which was using
        a newer version of one of the libraries used by the WebAuthn code.
        Oops.</para>

        <para>Changing the namespace of your dependencies with Rector is
        fairly trivial and guarantees that any third party libraries you
        include in your code will neither interfere with core or third party
        code, nor will they be interfered with by core or third party code.
        It's one more (small and simple) step building your extensions but it
        can make a massively positive difference to your clients who construct
        their sites out of prepackaged, mass-distributed code they can't (and
        usually don't even know how to) modify.</para>
      </section>

      <section xml:id="advice-dont-suck-evil-eval">
        <title>DON'T: Using <code>eval()</code></title>

        <para>Let me start by saying that allowing users to enter arbitrary
        PHP code which will be executed by the site is a <emphasis
        role="bold">VERY BAD IDEA</emphasis>. It is very easy for anyone with
        minimal developer experience —or someone following a how-to hacking
        guide— to take over a site. The following took me 5' to write and it's
        a complete takeover of a site:</para>

        <caution>
          <para><emphasis role="bold">DO NOT TRY THIS ON YOUR
          SITE!</emphasis></para>

          <para>The following code deletes all Super Users and adds a new
          Super User. This is detrimental to your site. It's only meant to
          demonstrate how easily a site can be taken over if a developer
          allows arbitrary PHP execution.</para>
        </caution>

        <programlisting language="php">function hackMePlenty()
{
    $user = \Joomla\CMS\Factory::getContainer()
        -&gt;get(\Joomla\CMS\User\UserFactoryInterface::class)
        -&gt;loadUserByUsername('drevil1234');

    if ($user-&gt;username === 'drevil1234') return;

    $db    = \Joomla\CMS\Factory::getContainer()-&gt;get('DatabaseDriver')
    $query = $db-&gt;getQuery(true)
        -&gt;select([$db-&gt;quoteName('id')])
        -&gt;from($db-&gt;quoteName('#__usergroups'));

    $superUserGroups = array_filter(
        $db-&gt;setQuery($query)-&gt;loadColumn(0) ?: [],
        function ($group) {
            return \Joomla\CMS\Access\Access::checkGroup($group, 'core.admin');
        }
    );

    $existingSuperUsers = array_unique(
        array_reduce(
            $superUserGroups,
            function (array $carry, int $groupId) {
                return array_merge($carry, \Joomla\CMS\Access\Access::getUsersByGroup($groupId));
            },
            []
        )
    );

    if (!empty($existingSuperUsers))
    {
        $query = $db-&gt;getQuery(true)
            -&gt;delete($db-&gt;quoteName('#__users'))
            -&gt;whereIn($db-&gt;quoteName('id'), $existingSuperUsers);
        $db-&gt;setQuery($query)-&gt;execute();
    }

    $user = new \Joomla\CMS\Table\User($db);
    $user-&gt;save([
        'name' =&gt; 'Evil Hacker',
        'username' =&gt; 'drevil1234',
        'email' =&gt; 'drevil@example.com',
        'password' =&gt; \Joomla\CMS\User\UserHelper::hashPassword('Dr3v!L0wnzJ00'),
        'block' =&gt; 0,
        'sendEmail' =&gt; 1,
        'registerDate' =&gt; (new \Joomla\CMS\Date\Date('2004-08-08 01:02:03'))-&gt;toSql(),
        'lastVisitDate' =&gt; (new \Joomla\CMS\Date\Date())-&gt;toSql(),
        'activation' =&gt; '',
        'groups' =&gt; $superUserGroups
    ]);
}

try { hackMePlenty(); } catch (\Throwable $e) { }</programlisting>

        <para>For this reason, whenever I see an extension which deliberately
        allows PHP code to be inserted and executed I am worried. If I see
        this being allowed in an editor or other text entry field without
        checking that the data comes from a Super User I am immediately
        labelling the extension a massive security issue and the site
        compromised unless proven differently.</para>

        <para>As a developer you should NEVER, EVER have a feature which
        allows direct PHP execution. This includes this happening
        unintentionally by using the evil <code>eval()</code>. Also note that
        most hosts disable <code>eval()</code> so idiot developers won't
        create backdoors the size of Alaska on the sites hosted on that
        host.</para>

        <para>There are very few cases where you might want to evaluate
        <emphasis>generated</emphasis> (as opposed to <emphasis>user
        defined</emphasis>) PHP code. For example, when I implemented a subset
        of the Blade template language in FOF I was converting Blade files to
        straight up PHP. Of course, I could not run the generated code through
        <code>eval()</code>. The solution to that is to first try to create a
        temporary file —either in Joomla's temporary directory or a cache
        directory— and <code>include()</code> it. If the temporary directory
        is unwriteable you can use
        <code>class_exists(\Joomla\Filesystem\Buffer::class, true);</code>
        which includes Joomla's buffer class. This registers the stream
        handler <code>buffer://</code> which creates a filesystem in memory.
        You can write to a file in it, e.g.
        <code>file_put_contents('buffer://foobar.php', $theContents);</code>
        and then include it like this
        <code>include('buffer://foobar.php');</code>. The downside with the
        buffer method is that on some hosts with hardened PHP runtimes you
        cannot include executable files from stream wrappers which have not
        been explicitly allowed by the server administrator. Hence the need to
        go through the filesystem first.</para>

        <para>As I said, you should only ever evaluate PHP code in your
        extensions if you have written it or if your own code has generated
        it. <emphasis role="bold">DO NOT TRUST THE USER —NOT EVEN SUPER USERS—
        TO PROVIDE EXECUTABLE PHP CODE THEMSELVES; IT IS A MASSIVE SECURITY
        ISSUE</emphasis>. Do you hear that, form component developers? Your
        extensions make it trivial to hack people's sites. Fix 'em!</para>
      </section>
    </section>

    <section xml:id="advice-error-messages">
      <title>The fine art of writing error messages</title>

      <para>Error messages are one of the most critical aspects of our
      software, though it receives surprisingly little attention. Error
      messages are displayed to our software's users when something bad
      happens. Our users will be in a negative state of mind: confused,
      afraid, angry, or a combination of the above. Our job as software
      developers is to provide them with reassurance, and to help them
      identify the issue and resolve it. To do that in an efficient manner
      requires understanding our code, the user's state of mind and abilities,
      and the use of language.</para>

      <bridgehead>What is the context of your error message?</bridgehead>

      <para>Let's consider a very simple situation which warrants an error
      message: a form validation error in an e-commerce component. This could
      happen in different context. The site owner may have forgotten to enter
      the information required to integrate with the payment provider. A
      backend user with data entry-only privileges may have forgotten to enter
      the price information for a product variation, e.g. the price of
      <emphasis>blue</emphasis> t-shirts. A frontend user (client) may have
      forgotten to enter their street address.</para>

      <para>On the face of it, these are all the same thing: form validation
      error. Let's just set up a few rules in the form and some checks in our
      Table and throw an exception when something's wrong, Joomla will convey
      that as error messages on the user interface and all is well,
      right?</para>

      <para><emphasis role="bold">WRONG!</emphasis></para>

      <para>Our exception results to an error message which is very technical,
      unhelpful and lacks any empathy. For example “You need to provide the
      Stripe API key”. This is mostly okay in the first context of the site
      owner. It is a bit jarring for the data entry person to tell them “Price
      is required!”. Woah, there, mister! Is this an e-commerce extension for
      a mass-distributed CMS or Checkpoint Charlie in the height of the Cold
      War?! It is definitely not a good experience for our prospective client
      to tell them “The Address is required”. We are putting them off and they
      might abandon their cart to go to the competition.</para>

      <para>Do not always assume that you can convey the same message, the
      same way, in every context. Think about the context and adjust your
      messages accordingly. For example, in the case of conveying messages to
      the end user (client) we may have to catch the internal exception and
      “reshape” the error message. We could instead tell them “Your order
      information is saved but your order is not submitted yet. Some
      information we need to process it is missing. Please review the fields
      marked with a red outline below. If the problem isn't solved after
      editing your information and clicking on Purchase please contact
      customer support.”.</para>

      <bridgehead>What makes an error message good?</bridgehead>

      <para>An error message needs to be <emphasis
      role="bold">reassuring</emphasis>. Remember that you are talking to a
      human who expected something to happen and now they are met with a scary
      message. Keep the tone serious, but not completely dry. If you know that
      the application is in a state which is recoverable lead by reassuring
      the user that this is the case. If it's not in a recoverable state but
      there is a good chance that the problem can be rectified lead with the
      fact that there is resolution in sight. If your application is in a dire
      situation which cannot possibly be recovered from you should try to ease
      the user into that fact, like a doctor giving someone the bad news that
      they have 3 months to live.</para>

      <para>An error message must be <emphasis role="bold">factual</emphasis>:
      it needs to say what happened and why it happened. An error message
      “Something went wrong” is worse than no error message at all. Tell the
      user what went wrong. Avoid using technical jargon unless the target
      audience is most likely to be the site integrator and the technical
      jargon is relevant to the resolution of the problem.</para>

      <para>For example, if the problem is that there's been a cURL error
      fetching data from a third party API processing payments the message to
      show an end user would be “We could not connect to the third party
      service which processes payments on our behalf”. Conversely, the message
      to show to the site integrator for the same problem would be something
      like “Timeout of 30 seconds exceeded contacting PayBuddy”.</para>

      <para>When you have to present ‘dumbed down’ error messages to the end
      user it's very helpful logging the more technical details and provide
      the end user with a unique identifier which allows the site integrator
      to locate this particular error message in the log file so they can
      provide assistance.</para>

      <para>An error message must be <emphasis role="bold">helpful</emphasis>.
      Telling someone what went wrong and possibly why is one thing. Helping
      the resolve it is a completely different issue altogether. Tell your
      user what they should be doing next. If the message targets end users
      the resolution should be fairly short and simple to follow; remember
      that the user is not in a good mental state right now. If the message
      targets a site integrator it is best to link them to a documentation
      page <emphasis>relevant to the issue at hand</emphasis> so they can read
      more about what happened and how to troubleshoot it.</para>

      <para>If there is a reasonable amount of use cases where the target
      audience will not be able to address this issue by themselves try to
      include a link to further steps, be it watching a video tutorial,
      reading a documentation page, asking help on a forum, contacting their
      host, or contacting the site owner / extension developer — again, you
      need to choose the appropriate action based on the target
      audience.</para>

      <para>If you provide a further action which requires the user to contact
      another person make sure to do it in a way which will guide the user
      into providing all the necessary information. If at all possible,
      collect all the necessary information and transmit it with the user's
      consent (think about how major Operating Systems and browsers implement
      a “crash assistant”).</para>

      <para>Finally, keep the error messages <emphasis
      role="bold">concise</emphasis> (short and to the point). Nobody will
      read a novel-length error message, even if it is the most informative
      and helpful resource in the Universe.</para>

      <para>These requirements are oftentimes at odds with each other. Finding
      the appropriate error message requires understanding your target
      audience and their use cases. This is not easy. Your understanding of
      the target audience and their use cases will improve over time, and the
      audience itself and their use cases will also evolve over time. Do not
      be afraid to revise your error messages, the way you present them, and
      your documentation on how to troubleshoot them.</para>

      <para>A good way to approach error messages is to make them friendly,
      short, informative, and when the resolution is more than ten words do
      link to a longer documentation page which takes the user by the hand and
      helps them resolve the issue. Yes, you will have the users who can't be
      bothered to read the documentation (like death and taxes, they are
      unavoidable), as well as the users who got lost reading it (approach it
      as an opportunity to understand their challenges and improve your
      documentation). In the end of the day you have helped far more users
      figure out what to do without contacting you, and without feeling overly
      frustrated, angry, or stupid. We don't hear about those users but if
      they become the <emphasis>majority</emphasis> of our users then we can
      say we are doing the right thing as developers.</para>

      <para>If you want to see what good error messages are like, take a look
      at Joomla Update's archive extraction step since Joomla 4.0.4. When
      something fails it will tell you what failed, why it failed, the next
      steps to follow and links to a documentation page with troubleshooting
      information. Unfortunately, we could not link to specific
      troubleshooting steps as the Wiki format is rather limited but
      <emphasis>you</emphasis> can definitely do even better!</para>
    </section>

    <section xml:id="advice-composer">
      <title>Adding Composer dependencies</title>

      <para>In many cases you will need to use third party libraries. The most
      common way to do that is through <link
      xlink:href="https://getcomposer.org">Composer</link>. I will assume that
      you already know how to use Composer. If not, use your favourite search
      engine to look for “Composer tutorial for beginners” to get you
      started.</para>

      <bridgehead>Joomla's Composer dependencies: can't touch
      this!</bridgehead>

      <para>Joomla itself uses Composer for some third party dependencies in
      its core libraries and core components. You will find Joomla's Composer
      dependencies in your site's <filename>libraries/vendor</filename>
      folder. As you can see, even the Joomla Framework is pulled in as a
      Composer dependency along with several third party libraries.</para>

      <caution>
        <para><emphasis role="bold">You MUST NEVER remove, upgrade, downgrade,
        modify, replace or otherwise interfere with the Composer dependencies
        provided by Joomla itself</emphasis>. Doing so is considered a
        <emphasis role="bold">core hack</emphasis> and will disqualify you
        from receiving support by third party developers, as well as getting
        your extensions unlisted from the Joomla Extensions Directory (JED).
        You will also be breaking Joomla and third party software with
        everything that entails to your reputation as a developer.</para>
      </caution>

      <bridgehead>Adding a composer.json to your extension</bridgehead>

      <para>The correct way to add Composer dependencies is to simply create a
      <filename>composer.json</filename> file in your repository's root and
      install your vendor folder alongside your extension's
      <filename>src</filename> folder. You can see an example of that in
      action <link xlink:href="https://github.com/akeeba/sociallogin">in
      Akeeba SocialLogin's repository</link>. The relevant part of the file is
      the following:</para>

      <programlisting language="json">{
"config": {
   "vendor-dir": "plugins/system/sociallogin/vendor"
   "platform": {
      "php": "7.4.0"
    }
  }
}</programlisting>

      <para>The <parameter>vendor-dir</parameter> parameter tells Composer
      where to place the Composer vendor folder. As you can see, in this
      collection of plugins we chose to put it in the system plugin, next to
      its src directory
      (<filename>plugins/system/sociallogin/src</filename>).</para>

      <para>The <parameter>platform</parameter> block is optional but you
      SHOULD include it. It tells Composer to not look into the current PHP
      version it is executing in but instead install extensions valid for a
      specific PHP version. In this example it's for PHP 7.4.0. Set this to
      the minimum PHP version you are targeting in your extension.</para>

      <tip>
        <para>It is good practice to NOT include your
        <filename>composer.json</filename> and
        <filename>composer.lock</filename> files in the final distribution of
        your files to the user. You do not want them to mess around with your
        dependencies. Moreover, these files would be web accessible which
        would let an attacker very easily enumerate your dependencies and find
        old, vulnerable versions they can target in an attempt to attack the
        site.</para>

        <para>You MUST commit your <filename>composer.json</filename> and
        <filename>composer.lock</filename> files to your repository.</para>

        <para>You MUST NOT commit your <filename>vendor</filename> directory
        to your repository.</para>
      </tip>

      <bridgehead>Including Composer dependencies in your runtime
      code</bridgehead>

      <para>Once you install your dependencies you just have a
      <filename>vendor</filename> folder. Your dependencies are not loaded
      automatically as it is. You will need to somehow include your
      <filename>vendor/autoload.php</filename> file when your code executes.
      The best place to do that is in your service provider.</para>

      <note>
        <para>The repository I am using as an example uses the latter option
        but that's only because I know that the Composer dependencies will not
        be used outside the context of my event handlers. If you have a
        component which uses the Composer dependencies in its Models and you
        reasonable expect said Models to be used outside the component itself
        you definitely need to load your dependencies in the service locator.
        Remember, the <emphasis>canonical</emphasis> way to get a Model object
        for a component is to boot the component to get its MVCFactory which
        means that the service provider file is included.</para>
      </note>

      <para>Let's say that you have the following
      <filename>services/provider.php</filename> file:</para>

      <programlisting language="php">defined('_JEXEC') || die;

use Joomla\CMS\Extension\PluginInterface;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;
use Joomla\Event\DispatcherInterface;
use Joomla\Plugin\System\Example\Extension\Example;

return new class implements ServiceProviderInterface {
  public function register(Container $container)
  {
    $container-&gt;set(
      PluginInterface::class,
      function (Container $container) {
        $subject = $container-&gt;get(DispatcherInterface::class);
        $config  = (array) PluginHelper::getPlugin('system', 'example');
        
        return new Example($subject, $config)
      }
    );
  }
};</programlisting>

      <para>You can load your Composer autoloader before returning the
      anonymous class (see the part in bold type):</para>

      <programlisting language="php">defined('_JEXEC') || die;

use Joomla\CMS\Extension\PluginInterface;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;
use Joomla\Event\DispatcherInterface;
use Joomla\Plugin\System\Example\Extension\Example;

<emphasis role="bold">require_once __DIR__ . '/../vendor/autoload.php';</emphasis>

return new class implements ServiceProviderInterface {
  public function register(Container $container)
  {
    $container-&gt;set(
      PluginInterface::class,
      function (Container $container) {
        $subject = $container-&gt;get(DispatcherInterface::class);
        $config  = (array) PluginHelper::getPlugin('system', 'example');
        
        return new Example($subject, $config)
      }
    );
  }
};</programlisting>

      <para>There is a caveat, though. If someone tries to use one of your
      classes outside your extension <emphasis>without</emphasis> booting your
      extension first it will fail. Well, they should never do that. That's
      not how Joomla 4 and beyond is meant to be used.</para>

      <bridgehead>Dealing with namespace clashes and older dependency versions
      included with Joomla</bridgehead>

      <para>There might be times where you have to deal with namespace
      clashes. For example, you might be pulling in a dependency which is
      already shipped as an older version in Joomla itself, a dependency which
      depends on something else which already exists in Joomla itself as an
      older version, or you might be pulling in a common dependency that other
      extensions also pull in. Namespaces are global in PHP. You cannot have a
      “private” container where you can override namespaced classes defined
      elsewhere.</para>

      <para>First, let's get a simple example
      <filename>composer.json</filename> which pulls in a dependency already
      defined in Joomla:</para>

      <programlisting language="json">{
  "name": "acme/example",
  "type": "project",
  "config": {
    "vendor-dir": "components/com_example/vendor",
    "platform": {
      "php": "7.2.5"
    }
  },
  "require": {
    "lcobucci/jwt": "^4.0"
  }
}</programlisting>

      <para>The <parameter>lcobucci/jwt</parameter> dependency already exists
      in Joomla 4 but it's in version 3.x of that library. We want to use
      version 4 of the library which is incompatible with version 4 but has
      the same namespace, <classname>Lcobucci\JWT</classname>. Here's the
      thing. If our dependency is loaded before Joomla's then Joomla's
      WebAuthn system plugin which depends on it will break. If Joomla loads
      its own dependency first then our extension breaks. This is an impasse,
      isn't it?</para>

      <para>The solution to that is <emphasis role="bold">changing the
      namespaces of your dependencies, adding a prefix with <link
      xlink:href="https://github.com/humbug/php-scoper">PHP -Scoper</link>
      </emphasis>. But first, a few things to make sure everything will
      work.</para>

      <para>First, we need to install PHP-Scoper as a Composer global
      dependency. From the command line:</para>

      <screen>$ composer global require humbug/php-scoper</screen>

      <para>Your global <filename>vendor/bin</filename> directory is in your
      path. In most cases you have to make sure that your shell resource file
      (e.g. <filename>~/.bashrc</filename> or <filename>~/.zshrc</filename>)
      has a line like this:</para>

      <programlisting language="bash">export PATH="~/.composer/vendor/bin:$PATH"</programlisting>

      <para>On Windows, if you have installed Composer using its installer
      then this path is already added to your path. If not, you will have to
      add it yourself. If you had to add it to your path, close and reopen
      your terminal emulator or simply log out and log back in. Then we can
      check if Rector is globally available from the command line</para>

      <screen>$ php-scoper -V
PhpScoper version 0.17.6@b528b87</screen>

      <para>If you instead get an error that the command is not found please
      make sure that you have PHP installed somewhere it can be found by your
      shell and that you've added Composer's global
      <filename>vendor/bin</filename> directory in your path.</para>

      <para>The next step is understanding how PHP-Scoper works. It processes
      a source directory and adds a namespace prefix (“scope”) to
      <emphasis>all classes</emphasis> within that directory. However, it does
      NOT overwrite the files in-place; it outputs them to a build
      directory.</para>

      <para>We want to add a namespace prefix to everything in our
      <filename>vendor</filename> directory which is currently next to our
      extension's <filename>src</filename> directory. Here's what we are going
      to do. We are going to move the unprefixed, original
      <filename>vendor</filename> directory in our repository's root and have
      the prefixed, <emphasis>modified</emphasis> <filename>vendor</filename>
      directory next to our <filename>src</filename> directory.</para>

      <para>So, the first thing to do is changing our
      <filename>composer.json</filename> file, removing the
      <parameter>vendor-dir</parameter> configuration key:</para>

      <programlisting language="json">{
  "name": "acme/example",
  "type": "project",
  "config": {
    "platform": {
      "php": "7.2.5"
    }
  },
  "require": {
    "lcobucci/jwt": "^4.0"
  }
}</programlisting>

      <para>Next up, delete the old <filename>vendor</filename> directory and
      reinstall the dependencies:</para>

      <screen>$ rm -rf components/com_example/vendor
$ composer install</screen>

      <para>You now see a <filename>vendor</filename> folder in your
      repository's root. That's good!</para>

      <para>We can now configure PHP-Scoper. Create the file
      <filename>scoper.inc.php</filename> in the repository's root:</para>

      <programlisting language="php">&lt;?php

declare(strict_types=1);

use Isolated\Symfony\Component\Finder\Finder;

return [
    <emphasis role="bold">'prefix' =&gt; 'Acme\\Example\\Dependencies',</emphasis>

    'finders' =&gt; [
        Finder::create()
            -&gt;files()
            -&gt;ignoreVCS(true)
            -&gt;notName('/LICENSE|.*\\.md|.*\\.dist|Makefile|composer\\.json|composer\\.lock/')
            -&gt;exclude([
                'doc',
                'test',
                'test_old',
                'tests',
                'Tests',
                'vendor-bin',
            ])
            -&gt;in('vendor'),
        Finder::create()-&gt;append([
            'composer.json',
        ]),
    ],

    'exclude-files' =&gt; [],
    'patchers' =&gt; [],
    'exclude-namespaces' =&gt; [],
    'exclude-classes' =&gt; [],
    'exclude-functions' =&gt; [],
    'exclude-constants' =&gt; [],

    'expose-global-constants' =&gt; true,
    'expose-global-classes' =&gt; true,
    'expose-global-functions' =&gt; true,
    'expose-namespaces' =&gt; [],
    'expose-classes' =&gt; [],
    'expose-functions' =&gt; [],
    'expose-constants' =&gt; [],
];</programlisting>

      <para>It's mostly boilerplate, except for the line in bold. This line
      defines the prefix we're adding to all classes. As configured above, our
      dependency's namespace will change from
      <classname>Lcobucci\JWT</classname> to our prefixed,
      <emphasis>private</emphasis> namespace
      <classname>Acme\Example\Dependencies\Lcobucci\JWT</classname>.</para>

      <para>Now run:</para>

      <screen>$ php-scoper add-prefix --output-dir components/com_example/dependencies</screen>

      <para>You will see that a new <filename>dependencies</filename>
      directory was created next to our extension's <filename>src</filename>
      directory.</para>

      <para>However, we're not out of the woods just yet. The prefixed
      autoloader does not work just yet. We need to have Composer rebuild its
      autoloader:</para>

      <screen>$ composer dumpautoload -d components/com_example/dependencies \
    --optimize --classmap-authoritative</screen>

      <para>Finally, we need to change our service provider to load our
      dependencies from our scoped vendor dir:</para>

      <programlisting language="php">defined('_JEXEC') || die;

use Joomla\CMS\Extension\PluginInterface;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\DI\Container;
use Joomla\DI\ServiceProviderInterface;
use Joomla\Event\DispatcherInterface;
use Joomla\Plugin\System\Example\Extension\Example;

<emphasis role="bold">require_once __DIR__ . '/../dependencies/vendor/autoload.php';</emphasis>

return new class implements ServiceProviderInterface {
  public function register(Container $container)
  {
    $container-&gt;set(
      PluginInterface::class,
      function (Container $container) {
        $subject = $container-&gt;get(DispatcherInterface::class);
        $config  = (array) PluginHelper::getPlugin('system', 'example');
        
        return new Example($subject, $config)
      }
    );
  }
};</programlisting>

      <para>You need to remember to run PHP-Scoper and dump the prefixed
      composer's autoloader every time you change the dependencies e.g. update
      or install a dependency.</para>

      <para>Also remember to change the code in your extension to use the
      prefixed classes of the dependencies.</para>

      <para>As for your repository management, you should add both
      <filename>vendor</filename> and the (prefixed)
      <filename>dependencies</filename> folders into your
      <filename>.gitignore</filename> file:</para>

      <programlisting># Composer
vendor/*
# Scoped dependencies
components/com_example/dependencies/*</programlisting>
    </section>

    <section xml:id="advice-libraries">
      <title>Library packages</title>

      <para>When you are writing a lot of software for Joomla you will find
      yourself having a lot of common code between your extensions. When the
      amount of common code surpasses a certain (low) threshold and / or is
      used on more than a couple of extensions it makes sense to share it
      among all of your extensions.</para>

      <para>This is what a <literal>library</literal> package is designed to
      do. It creates a subdirectory inside the site's
      <filename>libraries</filename> directory and optionally assigns it a
      namespace.</para>

      <para>The XML manifest of a files package is quite
      straightforward:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;extension type="library" method="upgrade"&gt;
    &lt;name&gt;LIB_ACME_MYLIBRARY_LABEL&lt;/name&gt;
    &lt;description&gt;LIB_ACME_MYLIBRARY_XML_DESCRIPTION&lt;/description&gt;
    <emphasis role="bold">&lt;libraryname&gt;mylibrary&lt;/libraryname&gt;</emphasis>
    &lt;creationDate&gt;2022-10-30&lt;/creationDate&gt;
    &lt;author&gt;Acme Corp.&lt;/author&gt;
    &lt;authorEmail&gt;acme-corp@example.com&lt;/authorEmail&gt;
    &lt;authorUrl&gt;https://www.example.com&lt;/authorUrl&gt;
    &lt;copyright&gt;(C)2022 Acme Corp&lt;/copyright&gt;
    &lt;license&gt;GNU GPLv2 or later&lt;/license&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;packager&gt;Acme Corp&lt;/packager&gt;
    &lt;packagerurl&gt;https://www.example.com/download/mylibrary.html&lt;/packagerurl&gt;
    <emphasis role="bold">&lt;namespace path="src"&gt;Acme\MyLibrary&lt;/namespace&gt;</emphasis>

    &lt;languages folder="language"&gt;
        &lt;language tag="en-GB"&gt;en-GB/lib_mylibrary.sys.ini&lt;/language&gt;
        &lt;language tag="en-GB"&gt;en-GB/lib_mylibrary.ini&lt;/language&gt;
    &lt;/languages&gt;

    &lt;files&gt;
        &lt;folder&gt;src&lt;/folder&gt;

        &lt;file&gt;LICENSE.txt&lt;/file&gt;
        &lt;file&gt;README.txt&lt;/file&gt;
    &lt;/files&gt;

    &lt;scriptfile&gt;script.mylibrary.php&lt;/scriptfile&gt;

    &lt;updateservers&gt;
        &lt;server type="extension" priority="1" name="Acme Corp My Library updates"&gt;https://cdn.example.com/updates/mylibrary_updates.xml&lt;/server&gt;
    &lt;/updateservers&gt;
&lt;/extension&gt;</programlisting>

      <para>This is a typical <link
      xlink:href="https://docs.joomla.org/Manifest_files">Joomla extension XML
      manifest</link> with two tags you need to pay attention to:</para>

      <itemizedlist>
        <listitem>
          <para><tag>libraryname</tag> tells Joomla the name of the
          subdirectory under <filename>libraries</filename> where the files
          will be copied. In this case we have told Joomla to install our
          library files in the <filename>libraries/mylibrary</filename> folder
          of the site. This is our library root folder.</para>
        </listitem>

        <listitem>
          <para><tag>namespace</tag> tells Joomla the common namespace prefix
          of your library files —assuming they follow the PSR-4 standard— and
          the subdirectory inside your library's root which is the PSR-4 root.
          In this case we tell Joomla that the common namespace prefix is
          <classname>Acme\MyLibrary</classname> and the PSR-4 root for this
          namespace is <filename>libraries/mylibrary/src</filename>.</para>

          <para>This tag is <emphasis role="bold">optional</emphasis>.
          However, if you do not provide this tag Joomla will NOT be able to
          autoload your library files. You will have to provide your own
          autoloader or include <filename>.php</filename> files
          manually.</para>
        </listitem>
      </itemizedlist>

      <para>The <tag>files</tag> tag tells Joomla where to copy files from the
      package. If you have a subdirectory in your package where files are
      located remember to use the <parameter>folder</parameter> attribute. For
      example, if your package puts everything under a
      <filename>dist</filename> folder change the <tag>files</tag> tag to
      read:</para>

      <programlisting>&lt;files <emphasis role="bold">folder="dist"</emphasis>&gt;</programlisting>

      <para>It is a good idea to include a license and Read Me file with your
      library. The former can be used to fulfil the legal requirement of most
      Open Source licenses to distribute a copy of the license with the
      software. The latter helps explaining to a user what exactly is in this
      folder, what is it used by, and instructions regarding the update and
      uninstallation of the library (users are well-known for going medieval
      on folders on their site, renaming or deleting them without much thought
      when they do not understand what they are for).</para>

      <para>While providing a language file is not mandatory, I strongly
      recommend providing a <filename>.sys.ini</filename> language file so
      that you can use language strings in the <tag>name</tag> and
      <tag>description</tag> tags.</para>

      <para>If you provide a regular .ini language file, e.g. for error
      messages and prompts, please keep in mind that <emphasis>it will not be
      autoloaded</emphasis>. If you really need to provide translated messages
      you need to make sure that all code paths leading to such a message will
      first go through Joomla's Language object to load the translation
      file:</para>

      <programlisting>\Joomla\CMS\Factory::getApplication()
  -&gt;getLanguage()
  -&gt;load('lib_<replaceable>mylibrary</replaceable>', JPATH_SITE);</programlisting>

      <para>Note that the extension you are loading is
      <literal>lib_<replaceable>mylibrary</replaceable></literal> where
      <replaceable>mylibrary</replaceable> is the content of your library's
      XML manifest's <tag>libraryname</tag> tag.</para>

      <para>Another thing you need to keep in mind when writing a library is
      that libraries are not bootable extensions in Joomla. As a result, they
      do not have a service provider
      (<filename>services/provider.php</filename>) file. If you need to use
      Joomla services you have two and a half options:</para>

      <itemizedlist>
        <listitem>
          <para>The library consumers (your components, plugins, or modules)
          need to push the services to your library objects. This is the
          preferable way —it makes your library code easily testable with
          PHPUnit— but it may lead to a very convoluted implementation in your
          extensions. This is the optimal way for experienced
          developers.</para>
        </listitem>

        <listitem>
          <para>Pull services directly from the
          <classname>Joomla\CMS\Factory</classname> using its
          <methodname>getApplication</methodname> and
          <methodname>getContainer</methodname> methods. This is the simplest
          way to go about it BUT it makes your code untestable. In other
          words, it's easy to use in your extensions but really difficult to
          test with.</para>
        </listitem>

        <listitem>
          <para>Hybrid! Use your own DI container and have your library's
          public interface objects require it to be passed in the constructor.
          The library consumers can set up their own DI container… or just use
          a default implementation. A custom container can be used when
          testing or when an experienced developer is developing their own
          application, thus emulating the first option we described above. The
          default DI container implementation —which simply goes through the
          global CMS Factory— requires no setup so novice developers, or
          trivial extensions, can quickly use the library without having to
          worry about passing around services and setting up a DI container,
          thus emulating the second option described above.</para>
        </listitem>
      </itemizedlist>

      <para>While library extensions can have media files it is generally not
      recommended to ship media files with your library. If you have media
      files your library is not a library, it's more of a prototype extension.
      Sure, you can do that —that's pretty much what we were doing with Akeeba
      Live Update long before Joomla supported library packages— but the use
      cases are so limited in number and so advanced in nature that if you
      need to read this documentation you are extremely unlikely to need to
      use this trick.</para>

      <para>Finally, pay attention to how you are going to go about updating
      your library extension. Joomla has absolutely no dependency management
      across installed extensions. If a site has Extension A which requires
      version 1.x of your library and Extension B which requires version 2.x
      of your library you'll inadvertently break the site if version 2.x of
      your library is not 100% backwards compatible to version 1.x of your
      library. This was one of the many headaches we had to deal with when we
      shipped our own MVC framework (Akeeba FOF) with our extensions. Short of
      checking for the installed library version in your extension and
      refusing to execute if it's too low or too high there's no other
      practical way to address this conundrum.</para>
    </section>
  </chapter>

  <appendix xml:id="fdl-license">
    <title>GNU Free Documentation License</title>

    <simpara>Version 1.3, 3 November 2008</simpara>

    <simpara>Copyright © 2000, 2001, 2002, 2007, 2008 <link
    xlink:href="https://www.fsf.org/">Free Software Foundation,
    Inc.</link></simpara>

    <simpara>Everyone is permitted to copy and distribute verbatim copies of
    this license document, but changing it is not allowed.</simpara>

    <bridgehead renderas="sect2" xml:id="section0">0. PREAMBLE</bridgehead>

    <simpara>The purpose of this License is to make a manual, textbook, or
    other functional and useful document “free” in the sense of freedom: to
    assure everyone the effective freedom to copy and redistribute it, with or
    without modifying it, either commercially or noncommercially. Secondarily,
    this License preserves for the author and publisher a way to get credit
    for their work, while not being considered responsible for modifications
    made by others.</simpara>

    <simpara>This License is a kind of “copyleft”, which means that derivative
    works of the document must themselves be free in the same sense. It
    complements the GNU General Public License, which is a copyleft license
    designed for free software.</simpara>

    <simpara>We have designed this License in order to use it for manuals for
    free software, because free software needs free documentation: a free
    program should come with manuals providing the same freedoms that the
    software does. But this License is not limited to software manuals; it can
    be used for any textual work, regardless of subject matter or whether it
    is published as a printed book. We recommend this License principally for
    works whose purpose is instruction or reference.</simpara>

    <bridgehead renderas="sect2" xml:id="section1">1. APPLICABILITY AND
    DEFINITIONS</bridgehead>

    <simpara>This License applies to any manual or other work, in any medium,
    that contains a notice placed by the copyright holder saying it can be
    distributed under the terms of this License. Such a notice grants a
    world-wide, royalty-free license, unlimited in duration, to use that work
    under the conditions stated herein. The “Document”, below, refers to any
    such manual or work. Any member of the public is a licensee, and is
    addressed as “you”. You accept the license if you copy, modify or
    distribute the work in a way requiring permission under copyright
    law.</simpara>

    <simpara>A “Modified Version” of the Document means any work containing
    the Document or a portion of it, either copied verbatim, or with
    modifications and/or translated into another language.</simpara>

    <simpara>A “Secondary Section” is a named appendix or a front-matter
    section of the Document that deals exclusively with the relationship of
    the publishers or authors of the Document to the Document's overall
    subject (or to related matters) and contains nothing that could fall
    directly within that overall subject. (Thus, if the Document is in part a
    textbook of mathematics, a Secondary Section may not explain any
    mathematics.) The relationship could be a matter of historical connection
    with the subject or with related matters, or of legal, commercial,
    philosophical, ethical or political position regarding them.</simpara>

    <simpara>The “Invariant Sections” are certain Secondary Sections whose
    titles are designated, as being those of Invariant Sections, in the notice
    that says that the Document is released under this License. If a section
    does not fit the above definition of Secondary then it is not allowed to
    be designated as Invariant. The Document may contain zero Invariant
    Sections. If the Document does not identify any Invariant Sections then
    there are none.</simpara>

    <simpara>The “Cover Texts” are certain short passages of text that are
    listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says
    that the Document is released under this License. A Front-Cover Text may
    be at most 5 words, and a Back-Cover Text may be at most 25
    words.</simpara>

    <simpara>A “Transparent” copy of the Document means a machine-readable
    copy, represented in a format whose specification is available to the
    general public, that is suitable for revising the document
    straightforwardly with generic text editors or (for images composed of
    pixels) generic paint programs or (for drawings) some widely available
    drawing editor, and that is suitable for input to text formatters or for
    automatic translation to a variety of formats suitable for input to text
    formatters. A copy made in an otherwise Transparent file format whose
    markup, or absence of markup, has been arranged to thwart or discourage
    subsequent modification by readers is not Transparent. An image format is
    not Transparent if used for any substantial amount of text. A copy that is
    not “Transparent” is called “Opaque”.</simpara>

    <simpara>Examples of suitable formats for Transparent copies include plain
    ASCII without markup, Texinfo input format, LaTeX input format, SGML or
    XML using a publicly available DTD, and standard-conforming simple HTML,
    PostScript or PDF designed for human modification. Examples of transparent
    image formats include PNG, XCF and JPG. Opaque formats include proprietary
    formats that can be read and edited only by proprietary word processors,
    SGML or XML for which the DTD and/or processing tools are not generally
    available, and the machine-generated HTML, PostScript or PDF produced by
    some word processors for output purposes only.</simpara>

    <simpara>The “Title Page” means, for a printed book, the title page
    itself, plus such following pages as are needed to hold, legibly, the
    material this License requires to appear in the title page. For works in
    formats which do not have any title page as such, “Title Page” means the
    text near the most prominent appearance of the work's title, preceding the
    beginning of the body of the text.</simpara>

    <simpara>The “publisher” means any person or entity that distributes
    copies of the Document to the public.</simpara>

    <simpara>A section “Entitled XYZ” means a named subunit of the Document
    whose title either is precisely XYZ or contains XYZ in parentheses
    following text that translates XYZ in another language. (Here XYZ stands
    for a specific section name mentioned below, such as “Acknowledgements”,
    “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of
    such a section when you modify the Document means that it remains a
    section “Entitled XYZ” according to this definition.</simpara>

    <simpara>The Document may include Warranty Disclaimers next to the notice
    which states that this License applies to the Document. These Warranty
    Disclaimers are considered to be included by reference in this License,
    but only as regards disclaiming warranties: any other implication that
    these Warranty Disclaimers may have is void and has no effect on the
    meaning of this License.</simpara>

    <bridgehead renderas="sect2" xml:id="section2">2. VERBATIM
    COPYING</bridgehead>

    <simpara>You may copy and distribute the Document in any medium, either
    commercially or noncommercially, provided that this License, the copyright
    notices, and the license notice saying this License applies to the
    Document are reproduced in all copies, and that you add no other
    conditions whatsoever to those of this License. You may not use technical
    measures to obstruct or control the reading or further copying of the
    copies you make or distribute. However, you may accept compensation in
    exchange for copies. If you distribute a large enough number of copies you
    must also follow the conditions in section 3.</simpara>

    <simpara>You may also lend copies, under the same conditions stated above,
    and you may publicly display copies.</simpara>

    <bridgehead renderas="sect2" xml:id="section3">3. COPYING IN
    QUANTITY</bridgehead>

    <simpara>If you publish printed copies (or copies in media that commonly
    have printed covers) of the Document, numbering more than 100, and the
    Document's license notice requires Cover Texts, you must enclose the
    copies in covers that carry, clearly and legibly, all these Cover Texts:
    Front-Cover Texts on the front cover, and Back-Cover Texts on the back
    cover. Both covers must also clearly and legibly identify you as the
    publisher of these copies. The front cover must present the full title
    with all words of the title equally prominent and visible. You may add
    other material on the covers in addition. Copying with changes limited to
    the covers, as long as they preserve the title of the Document and satisfy
    these conditions, can be treated as verbatim copying in other
    respects.</simpara>

    <simpara>If the required texts for either cover are too voluminous to fit
    legibly, you should put the first ones listed (as many as fit reasonably)
    on the actual cover, and continue the rest onto adjacent pages.</simpara>

    <simpara>If you publish or distribute Opaque copies of the Document
    numbering more than 100, you must either include a machine-readable
    Transparent copy along with each Opaque copy, or state in or with each
    Opaque copy a computer-network location from which the general
    network-using public has access to download using public-standard network
    protocols a complete Transparent copy of the Document, free of added
    material. If you use the latter option, you must take reasonably prudent
    steps, when you begin distribution of Opaque copies in quantity, to ensure
    that this Transparent copy will remain thus accessible at the stated
    location until at least one year after the last time you distribute an
    Opaque copy (directly or through your agents or retailers) of that edition
    to the public.</simpara>

    <simpara>It is requested, but not required, that you contact the authors
    of the Document well before redistributing any large number of copies, to
    give them a chance to provide you with an updated version of the
    Document.</simpara>

    <bridgehead renderas="sect2" xml:id="section4">4.
    MODIFICATIONS</bridgehead>

    <simpara>You may copy and distribute a Modified Version of the Document
    under the conditions of sections 2 and 3 above, provided that you release
    the Modified Version under precisely this License, with the Modified
    Version filling the role of the Document, thus licensing distribution and
    modification of the Modified Version to whoever possesses a copy of it. In
    addition, you must do these things in the Modified Version:</simpara>

    <orderedlist numeration="upperalpha">
      <listitem>
        <simpara>Use in the Title Page (and on the covers, if any) a title
        distinct from that of the Document, and from those of previous
        versions (which should, if there were any, be listed in the History
        section of the Document). You may use the same title as a previous
        version if the original publisher of that version gives
        permission.</simpara>
      </listitem>

      <listitem>
        <simpara>List on the Title Page, as authors, one or more persons or
        entities responsible for authorship of the modifications in the
        Modified Version, together with at least five of the principal authors
        of the Document (all of its principal authors, if it has fewer than
        five), unless they release you from this requirement.</simpara>
      </listitem>

      <listitem>
        <simpara>State on the Title page the name of the publisher of the
        Modified Version, as the publisher.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve all the copyright notices of the Document.</simpara>
      </listitem>

      <listitem>
        <simpara>Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.</simpara>
      </listitem>

      <listitem>
        <simpara>Include, immediately after the copyright notices, a license
        notice giving the public permission to use the Modified Version under
        the terms of this License, in the form shown in the Addendum
        below.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve in that license notice the full lists of Invariant
        Sections and required Cover Texts given in the Document's license
        notice.</simpara>
      </listitem>

      <listitem>
        <simpara>Include an unaltered copy of this License.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve the section Entitled “History”, Preserve its Title,
        and add to it an item stating at least the title, year, new authors,
        and publisher of the Modified Version as given on the Title Page. If
        there is no section Entitled “History” in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve the network location, if any, given in the Document
        for public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions it
        was based on. These may be placed in the “History” section. You may
        omit a network location for a work that was published at least four
        years before the Document itself, or if the original publisher of the
        version it refers to gives permission.</simpara>
      </listitem>

      <listitem>
        <simpara>For any section Entitled “Acknowledgements” or “Dedications”,
        Preserve the Title of the section, and preserve in the section all the
        substance and tone of each of the contributor acknowledgements and/or
        dedications given therein.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles. Section numbers or the
        equivalent are not considered part of the section titles.</simpara>
      </listitem>

      <listitem>
        <simpara>Delete any section Entitled “Endorsements”. Such a section
        may not be included in the Modified Version.</simpara>
      </listitem>

      <listitem>
        <simpara>Do not retitle any existing section to be Entitled
        “Endorsements” or to conflict in title with any Invariant
        Section.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve any Warranty Disclaimers.</simpara>
      </listitem>
    </orderedlist>

    <simpara>If the Modified Version includes new front-matter sections or
    appendices that qualify as Secondary Sections and contain no material
    copied from the Document, you may at your option designate some or all of
    these sections as invariant. To do this, add their titles to the list of
    Invariant Sections in the Modified Version's license notice. These titles
    must be distinct from any other section titles.</simpara>

    <simpara>You may add a section Entitled “Endorsements”, provided it
    contains nothing but endorsements of your Modified Version by various
    parties — for example, statements of peer review or that the text has been
    approved by an organization as the authoritative definition of a
    standard.</simpara>

    <simpara>You may add a passage of up to five words as a Front-Cover Text,
    and a passage of up to 25 words as a Back-Cover Text, to the end of the
    list of Cover Texts in the Modified Version. Only one passage of
    Front-Cover Text and one of Back-Cover Text may be added by (or through
    arrangements made by) any one entity. If the Document already includes a
    cover text for the same cover, previously added by you or by arrangement
    made by the same entity you are acting on behalf of, you may not add
    another; but you may replace the old one, on explicit permission from the
    previous publisher that added the old one.</simpara>

    <simpara>The author(s) and publisher(s) of the Document do not by this
    License give permission to use their names for publicity for or to assert
    or imply endorsement of any Modified Version.</simpara>

    <bridgehead renderas="sect2" xml:id="section5">5. COMBINING
    DOCUMENTS</bridgehead>

    <simpara>You may combine the Document with other documents released under
    this License, under the terms defined in section 4 above for modified
    versions, provided that you include in the combination all of the
    Invariant Sections of all of the original documents, unmodified, and list
    them all as Invariant Sections of your combined work in its license
    notice, and that you preserve all their Warranty Disclaimers.</simpara>

    <simpara>The combined work need only contain one copy of this License, and
    multiple identical Invariant Sections may be replaced with a single copy.
    If there are multiple Invariant Sections with the same name but different
    contents, make the title of each such section unique by adding at the end
    of it, in parentheses, the name of the original author or publisher of
    that section if known, or else a unique number. Make the same adjustment
    to the section titles in the list of Invariant Sections in the license
    notice of the combined work.</simpara>

    <simpara>In the combination, you must combine any sections Entitled
    “History” in the various original documents, forming one section Entitled
    “History”; likewise combine any sections Entitled “Acknowledgements”, and
    any sections Entitled “Dedications”. You must delete all sections Entitled
    “Endorsements”.</simpara>

    <bridgehead renderas="sect2" xml:id="section6">6. COLLECTIONS OF
    DOCUMENTS</bridgehead>

    <simpara>You may make a collection consisting of the Document and other
    documents released under this License, and replace the individual copies
    of this License in the various documents with a single copy that is
    included in the collection, provided that you follow the rules of this
    License for verbatim copying of each of the documents in all other
    respects.</simpara>

    <simpara>You may extract a single document from such a collection, and
    distribute it individually under this License, provided you insert a copy
    of this License into the extracted document, and follow this License in
    all other respects regarding verbatim copying of that document.</simpara>

    <bridgehead renderas="sect2" xml:id="section7">7. AGGREGATION WITH
    INDEPENDENT WORKS</bridgehead>

    <simpara>A compilation of the Document or its derivatives with other
    separate and independent documents or works, in or on a volume of a
    storage or distribution medium, is called an “aggregate” if the copyright
    resulting from the compilation is not used to limit the legal rights of
    the compilation's users beyond what the individual works permit. When the
    Document is included in an aggregate, this License does not apply to the
    other works in the aggregate which are not themselves derivative works of
    the Document.</simpara>

    <simpara>If the Cover Text requirement of section 3 is applicable to these
    copies of the Document, then if the Document is less than one half of the
    entire aggregate, the Document's Cover Texts may be placed on covers that
    bracket the Document within the aggregate, or the electronic equivalent of
    covers if the Document is in electronic form. Otherwise they must appear
    on printed covers that bracket the whole aggregate.</simpara>

    <bridgehead renderas="sect2" xml:id="section8">8. TRANSLATION</bridgehead>

    <simpara>Translation is considered a kind of modification, so you may
    distribute translations of the Document under the terms of section 4.
    Replacing Invariant Sections with translations requires special permission
    from their copyright holders, but you may include translations of some or
    all Invariant Sections in addition to the original versions of these
    Invariant Sections. You may include a translation of this License, and all
    the license notices in the Document, and any Warranty Disclaimers,
    provided that you also include the original English version of this
    License and the original versions of those notices and disclaimers. In
    case of a disagreement between the translation and the original version of
    this License or a notice or disclaimer, the original version will
    prevail.</simpara>

    <simpara>If a section in the Document is Entitled “Acknowledgements”,
    “Dedications”, or “History”, the requirement (section 4) to Preserve its
    Title (section 1) will typically require changing the actual
    title.</simpara>

    <bridgehead renderas="sect2" xml:id="section9">9. TERMINATION</bridgehead>

    <simpara>You may not copy, modify, sublicense, or distribute the Document
    except as expressly provided under this License. Any attempt otherwise to
    copy, modify, sublicense, or distribute it is void, and will automatically
    terminate your rights under this License.</simpara>

    <simpara>However, if you cease all violation of this License, then your
    license from a particular copyright holder is reinstated (a)
    provisionally, unless and until the copyright holder explicitly and
    finally terminates your license, and (b) permanently, if the copyright
    holder fails to notify you of the violation by some reasonable means prior
    to 60 days after the cessation.</simpara>

    <simpara>Moreover, your license from a particular copyright holder is
    reinstated permanently if the copyright holder notifies you of the
    violation by some reasonable means, this is the first time you have
    received notice of violation of this License (for any work) from that
    copyright holder, and you cure the violation prior to 30 days after your
    receipt of the notice.</simpara>

    <simpara>Termination of your rights under this section does not terminate
    the licenses of parties who have received copies or rights from you under
    this License. If your rights have been terminated and not permanently
    reinstated, receipt of a copy of some or all of the same material does not
    give you any rights to use it.</simpara>

    <bridgehead renderas="sect2" xml:id="section10">10. FUTURE REVISIONS OF
    THIS LICENSE</bridgehead>

    <simpara>The Free Software Foundation may publish new, revised versions of
    the GNU Free Documentation License from time to time. Such new versions
    will be similar in spirit to the present version, but may differ in detail
    to address new problems or concerns. See <link
    xlink:href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</link>.</simpara>

    <simpara>Each version of the License is given a distinguishing version
    number. If the Document specifies that a particular numbered version of
    this License “or any later version” applies to it, you have the option of
    following the terms and conditions either of that specified version or of
    any later version that has been published (not as a draft) by the Free
    Software Foundation. If the Document does not specify a version number of
    this License, you may choose any version ever published (not as a draft)
    by the Free Software Foundation. If the Document specifies that a proxy
    can decide which future versions of this License can be used, that proxy's
    public statement of acceptance of a version permanently authorizes you to
    choose that version for the Document.</simpara>

    <bridgehead renderas="sect2" xml:id="section11">11.
    RELICENSING</bridgehead>

    <simpara>“Massive Multiauthor Collaboration Site” (or “MMC Site”) means
    any World Wide Web server that publishes copyrightable works and also
    provides prominent facilities for anybody to edit those works. A public
    wiki that anybody can edit is an example of such a server. A “Massive
    Multiauthor Collaboration” (or “MMC”) contained in the site means any set
    of copyrightable works thus published on the MMC site.</simpara>

    <simpara>“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
    license published by Creative Commons Corporation, a not-for-profit
    corporation with a principal place of business in San Francisco,
    California, as well as future copyleft versions of that license published
    by that same organization.</simpara>

    <simpara>“Incorporate” means to publish or republish a Document, in whole
    or in part, as part of another Document.</simpara>

    <simpara>An MMC is “eligible for relicensing” if it is licensed under this
    License, and if all works that were first published under this License
    somewhere other than this MMC, and subsequently incorporated in whole or
    in part into the MMC, (1) had no cover texts or invariant sections, and
    (2) were thus incorporated prior to November 1, 2008.</simpara>

    <simpara>The operator of an MMC Site may republish an MMC contained in the
    site under CC-BY-SA on the same site at any time before August 1, 2009,
    provided the MMC is eligible for relicensing.</simpara>

    <bridgehead renderas="sect2" xml:id="addendum">ADDENDUM: How to use this
    License for your documents</bridgehead>

    <simpara>To use this License in a document you have written, include a
    copy of the License in the document and put the following copyright and
    license notices just after the title page:</simpara>

    <screen>Copyright © YEAR YOUR NAME

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in
the section entitled “GNU Free Documentation License”.</screen>

    <simpara>If you have Invariant Sections, Front-Cover Texts and Back-Cover
    Texts, replace the “with… Texts.” line with this:</simpara>

    <screen>with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts
being LIST, and with the Back-Cover Texts being LIST.</screen>

    <simpara>If you have Invariant Sections without Cover Texts, or some other
    combination of the three, merge those two alternatives to suit the
    situation.</simpara>

    <simpara>If your document contains nontrivial examples of program code, we
    recommend releasing these examples in parallel under your choice of free
    software license, such as the GNU General Public License, to permit their
    use in free software.</simpara>
  </appendix>

  <appendix xml:id="gpl">
    <title>GNU General Public License</title>

    <bridgehead renderas="sect1">Preamble</bridgehead>

    <para>The licenses for most software are designed to take away your
    freedom to share and change it. By contrast, the GNU General Public
    License is intended to guarantee your freedom to share and change free
    software - to make sure the software is free for all its users. This
    General Public License applies to most of the Free Software Foundation's
    software and to any other program whose authors commit to using it. (Some
    other Free Software Foundation software is covered by the GNU Library
    General Public License instead.) You can apply it to your programs,
    too.</para>

    <para>When we speak of free software, we are referring to freedom, not
    price. Our General Public Licenses are designed to make sure that you have
    the freedom to distribute copies of free software (and charge for this
    service if you wish), that you receive source code or can get it if you
    want it, that you can change the software or use pieces of it in new free
    programs; and that you know you can do these things.</para>

    <para>To protect your rights, we need to make restrictions that forbid
    anyone to deny you these rights or to ask you to surrender the rights.
    These restrictions translate to certain responsibilities for you if you
    distribute copies of the software, or if you modify it.</para>

    <para>For example, if you distribute copies of such a program, whether
    gratis or for a fee, you must give the recipients all the rights that you
    have. You must make sure that they, too, receive or can get the source
    code. And you must show them these terms so they know their rights.</para>

    <para>We protect your rights with two steps:</para>

    <orderedlist numeration="arabic">
      <listitem>
        <para>copyright the software, and</para>
      </listitem>

      <listitem>
        <para>offer you this license which gives you legal permission to copy,
        distribute and/or modify the software.</para>
      </listitem>
    </orderedlist>

    <para>Also, for each author's protection and ours, we want to make certain
    that everyone understands that there is no warranty for this free
    software. If the software is modified by someone else and passed on, we
    want its recipients to know that what they have is not the original, so
    that any problems introduced by others will not reflect on the original
    authors' reputations.</para>

    <para>Finally, any free program is threatened constantly by software
    patents. We wish to avoid the danger that redistributors of a free program
    will individually obtain patent licenses, in effect making the program
    proprietary. To prevent this, we have made it clear that any patent must
    be licensed for everyone's free use or not licensed at all.</para>

    <para>The precise terms and conditions for copying, distribution and
    modification follow.</para>

    <bridgehead renderas="sect1">TERMS AND CONDITIONS FOR COPYING,
    DISTRIBUTION AND MODIFICATION</bridgehead>

    <bridgehead renderas="sect2">Section 0</bridgehead>

    <para>This License applies to any program or other work which contains a
    notice placed by the copyright holder saying it may be distributed under
    the terms of this General Public License. The <quote>Program</quote>,
    below, refers to any such program or work, and a <quote>work based on the
    Program</quote> means either the Program or any derivative work under
    copyright law: that is to say, a work containing the Program or a portion
    of it, either verbatim or with modifications and/or translated into
    another language. (Hereinafter, translation is included without limitation
    in the term <quote>modification</quote>.) Each licensee is addressed as
    <quote>you</quote>.</para>

    <para>Activities other than copying, distribution and modification are not
    covered by this License; they are outside its scope. The act of running
    the Program is not restricted, and the output from the Program is covered
    only if its contents constitute a work based on the Program (independent
    of having been made by running the Program). Whether that is true depends
    on what the Program does.</para>

    <bridgehead renderas="sect2">Section 1</bridgehead>

    <para>You may copy and distribute verbatim copies of the Program's source
    code as you receive it, in any medium, provided that you conspicuously and
    appropriately publish on each copy an appropriate copyright notice and
    disclaimer of warranty; keep intact all the notices that refer to this
    License and to the absence of any warranty; and give any other recipients
    of the Program a copy of this License along with the Program.</para>

    <para>You may charge a fee for the physical act of transferring a copy,
    and you may at your option offer warranty protection in exchange for a
    fee.</para>

    <bridgehead renderas="sect2">Section 2</bridgehead>

    <para>You may modify your copy or copies of the Program or any portion of
    it, thus forming a work based on the Program, and copy and distribute such
    modifications or work under the terms of Section 1 above, provided that
    you also meet all of these conditions:</para>

    <orderedlist numeration="loweralpha">
      <listitem>
        <para>You must cause the modified files to carry prominent notices
        stating that you changed the files and the date of any change.</para>
      </listitem>

      <listitem>
        <para>You must cause any work that you distribute or publish, that in
        whole or in part contains or is derived from the Program or any part
        thereof, to be licensed as a whole at no charge to all third parties
        under the terms of this License.</para>
      </listitem>

      <listitem>
        <para>If the modified program normally reads commands interactively
        when run, you must cause it, when started running for such interactive
        use in the most ordinary way, to print or display an announcement
        including an appropriate copyright notice and a notice that there is
        no warranty (or else, saying that you provide a warranty) and that
        users may redistribute the program under these conditions, and telling
        the user how to view a copy of this License. (Exception: If the
        Program itself is interactive but does not normally print such an
        announcement, your work based on the Program is not required to print
        an announcement.)</para>
      </listitem>
    </orderedlist>

    <para>These requirements apply to the modified work as a whole. If
    identifiable sections of that work are not derived from the Program, and
    can be reasonably considered independent and separate works in themselves,
    then this License, and its terms, do not apply to those sections when you
    distribute them as separate works. But when you distribute the same
    sections as part of a whole which is a work based on the Program, the
    distribution of the whole must be on the terms of this License, whose
    permissions for other licensees extend to the entire whole, and thus to
    each and every part regardless of who wrote it.</para>

    <para>Thus, it is not the intent of this section to claim rights or
    contest your rights to work written entirely by you; rather, the intent is
    to exercise the right to control the distribution of derivative or
    collective works based on the Program.</para>

    <para>In addition, mere aggregation of another work not based on the
    Program with the Program (or with a work based on the Program) on a volume
    of a storage or distribution medium does not bring the other work under
    the scope of this License.</para>

    <bridgehead renderas="sect2">Section 3</bridgehead>

    <para>You may copy and distribute the Program (or a work based on it,
    under Section 2 in object code or executable form under the terms of
    Sections 1 and 2 above provided that you also do one of the
    following:</para>

    <orderedlist numeration="loweralpha">
      <listitem>
        <para>Accompany it with the complete corresponding machine-readable
        source code, which must be distributed under the terms of Sections 1
        and 2 above on a medium customarily used for software interchange;
        or,</para>
      </listitem>

      <listitem>
        <para>Accompany it with a written offer, valid for at least three
        years, to give any third party, for a charge no more than your cost of
        physically performing source distribution, a complete machine-readable
        copy of the corresponding source code, to be distributed under the
        terms of Sections 1 and 2 above on a medium customarily used for
        software interchange; or,</para>
      </listitem>

      <listitem>
        <para>Accompany it with the information you received as to the offer
        to distribute corresponding source code. (This alternative is allowed
        only for noncommercial distribution and only if you received the
        program in object code or executable form with such an offer, in
        accord with Subsection b above.)</para>
      </listitem>
    </orderedlist>

    <para>The source code for a work means the preferred form of the work for
    making modifications to it. For an executable work, complete source code
    means all the source code for all modules it contains, plus any associated
    interface definition files, plus the scripts used to control compilation
    and installation of the executable. However, as a special exception, the
    source code distributed need not include anything that is normally
    distributed (in either source or binary form) with the major components
    (compiler, kernel, and so on) of the operating system on which the
    executable runs, unless that component itself accompanies the
    executable.</para>

    <para>If distribution of executable or object code is made by offering
    access to copy from a designated place, then offering equivalent access to
    copy the source code from the same place counts as distribution of the
    source code, even though third parties are not compelled to copy the
    source along with the object code.</para>

    <para><bridgehead renderas="sect2">Section 4</bridgehead></para>

    <para>You may not copy, modify, sublicense, or distribute the Program
    except as expressly provided under this License. Any attempt otherwise to
    copy, modify, sublicense or distribute the Program is void, and will
    automatically terminate your rights under this License. However, parties
    who have received copies, or rights, from you under this License will not
    have their licenses terminated so long as such parties remain in full
    compliance.</para>

    <bridgehead renderas="sect2">Section 5</bridgehead>

    <para>You are not required to accept this License, since you have not
    signed it. However, nothing else grants you permission to modify or
    distribute the Program or its derivative works. These actions are
    prohibited by law if you do not accept this License. Therefore, by
    modifying or distributing the Program (or any work based on the Program),
    you indicate your acceptance of this License to do so, and all its terms
    and conditions for copying, distributing or modifying the Program or works
    based on it.</para>

    <bridgehead renderas="sect2">Section 6</bridgehead>

    <para>Each time you redistribute the Program (or any work based on the
    Program), the recipient automatically receives a license from the original
    licensor to copy, distribute or modify the Program subject to these terms
    and conditions. You may not impose any further restrictions on the
    recipients' exercise of the rights granted herein. You are not responsible
    for enforcing compliance by third parties to this License.</para>

    <bridgehead renderas="sect2">Section 7</bridgehead>

    <para>If, as a consequence of a court judgment or allegation of patent
    infringement or for any other reason (not limited to patent issues),
    conditions are imposed on you (whether by court order, agreement or
    otherwise) that contradict the conditions of this License, they do not
    excuse you from the conditions of this License. If you cannot distribute
    so as to satisfy simultaneously your obligations under this License and
    any other pertinent obligations, then as a consequence you may not
    distribute the Program at all. For example, if a patent license would not
    permit royalty-free redistribution of the Program by all those who receive
    copies directly or indirectly through you, then the only way you could
    satisfy both it and this License would be to refrain entirely from
    distribution of the Program.</para>

    <para>If any portion of this section is held invalid or unenforceable
    under any particular circumstance, the balance of the section is intended
    to apply and the section as a whole is intended to apply in other
    circumstances.</para>

    <para>It is not the purpose of this section to induce you to infringe any
    patents or other property right claims or to contest validity of any such
    claims; this section has the sole purpose of protecting the integrity of
    the free software distribution system, which is implemented by public
    license practices. Many people have made generous contributions to the
    wide range of software distributed through that system in reliance on
    consistent application of that system; it is up to the author/donor to
    decide if he or she is willing to distribute software through any other
    system and a licensee cannot impose that choice.</para>

    <para>This section is intended to make thoroughly clear what is believed
    to be a consequence of the rest of this License.</para>

    <bridgehead renderas="sect2">Section 8</bridgehead>

    <para>If the distribution and/or use of the Program is restricted in
    certain countries either by patents or by copyrighted interfaces, the
    original copyright holder who places the Program under this License may
    add an explicit geographical distribution limitation excluding those
    countries, so that distribution is permitted only in or among countries
    not thus excluded. In such case, this License incorporates the limitation
    as if written in the body of this License.</para>

    <bridgehead renderas="sect2">Section 9</bridgehead>

    <para>The Free Software Foundation may publish revised and/or new versions
    of the General Public License from time to time. Such new versions will be
    similar in spirit to the present version, but may differ in detail to
    address new problems or concerns.</para>

    <para>Each version is given a distinguishing version number. If the
    Program specifies a version number of this License which applies to it and
    <quote>any later version</quote>, you have the option of following the
    terms and conditions either of that version or of any later version
    published by the Free Software Foundation. If the Program does not specify
    a version number of this License, you may choose any version ever
    published by the Free Software Foundation.</para>

    <bridgehead renderas="sect2">Section 10</bridgehead>

    <para>If you wish to incorporate parts of the Program into other free
    programs whose distribution conditions are different, write to the author
    to ask for permission. For software which is copyrighted by the Free
    Software Foundation, write to the Free Software Foundation; we sometimes
    make exceptions for this. Our decision will be guided by the two goals of
    preserving the free status of all derivatives of our free software and of
    promoting the sharing and reuse of software generally.</para>

    <bridgehead renderas="sect2">NO WARRANTY Section 11</bridgehead>

    <para>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
    FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
    PROVIDE THE PROGRAM <quote>AS IS</quote> WITHOUT WARRANTY OF ANY KIND,
    EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
    SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
    SERVICING, REPAIR OR CORRECTION.</para>

    <bridgehead renderas="sect2">Section 12</bridgehead>

    <para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
    WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
    AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
    DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
    DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING
    BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
    LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO
    OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS
    BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</para>

    <para>END OF TERMS AND CONDITIONS</para>

    <bridgehead renderas="sect1">How to Apply These Terms to Your New
    Programs</bridgehead>

    <para>If you develop a new program, and you want it to be of the greatest
    possible use to the public, the best way to achieve this is to make it
    free software which everyone can redistribute and change under these
    terms.</para>

    <para>To do so, attach the following notices to the program. It is safest
    to attach them to the start of each source file to most effectively convey
    the exclusion of warranty; and each file should have at least the
    <quote>copyright</quote> line and a pointer to where the full notice is
    found.</para>

    <para>&lt;one line to give the program's name and a brief idea of what it
    does.&gt; Copyright (C) &lt;year&gt; &lt;name of author&gt;</para>

    <para>This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.</para>

    <para>This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
    for more details.</para>

    <para>You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
    Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA</para>

    <para>Also add information on how to contact you by electronic and paper
    mail.</para>

    <para>If the program is interactive, make it output a short notice like
    this when it starts in an interactive mode:</para>

    <para>Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type
    <quote>show w</quote>. This is free software, and you are welcome to
    redistribute it under certain conditions; type <quote>show c</quote> for
    details.</para>

    <para>The hypothetical commands <quote>show w</quote> and <quote>show
    c</quote> should show the appropriate parts of the General Public License.
    Of course, the commands you use may be called something other than
    <quote>show w</quote> and <quote>show c</quote>; they could even be
    mouse-clicks or menu items--whatever suits your program.</para>

    <para>You should also get your employer (if you work as a programmer) or
    your school, if any, to sign a <quote>copyright disclaimer</quote> for the
    program, if necessary. Here is a sample; alter the names:</para>

    <para>Yoyodyne, Inc., hereby disclaims all copyright interest in the
    program <quote>Gnomovision</quote> (which makes passes at compilers)
    written by James Hacker.</para>

    <para>&lt;signature of Ty Coon&gt;, 1 April 1989 Ty Coon, President of
    Vice</para>

    <para>This General Public License does not permit incorporating your
    program into proprietary programs. If your program is a subroutine
    library, you may consider it more useful to permit linking proprietary
    applications with the library. If this is what you want to do, use the GNU
    Library General Public License instead of this License.</para>
  </appendix>
</book>
